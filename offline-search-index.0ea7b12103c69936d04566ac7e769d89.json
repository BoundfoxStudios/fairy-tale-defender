[{"body":"In diesem Teil der Dokumentation findest Du ein paar gesammelte Ideen.\nDiese haben keine Garantie, dass wir sie für das Spiel beachten. Allerdings möchten wir auch nicht, dass diese im Nimbus verloren gehen.\nAktuelle Ideen:\nStories ","categories":"","description":"Gesammelte Ideen, sodass diese nicht im Nimbus verschwinden.","excerpt":"Gesammelte Ideen, sodass diese nicht im Nimbus verschwinden.","ref":"/docs/ideas/","tags":"","title":"Ideen"},{"body":"Der Spieler nimmt die Rolle einer Glücksfee ein. Sie begleitet bekannte Märchen (in diesem Fall Rotkäppchen) und hilft dabei, dass die Geschichte so verläuft, wie wir sie kennen.\nIntro Wir haben unseren kleinen Zirkus-Wahrsagerwagen und die Glücksfee, in Gestalt einer bunt gekleideten Frau mittleren Alters, erzählt nach Auswahl der Geschichte: “Ah, das gute Rotkäppchen. Es gibt viele Wege, wie die Geschichte hätte verlaufen können. Das Glück musste ganz schön nachhelfen, damit sie so stattfindet, wie wir sie heute kennen.”.\nUmblende vom Standbild und Text zur Schlachtkarte\nLevel 1 Wölfe\nRotkäppchen besuchte ihre Großmutter regelmäßig. Die Tiere des Waldes bemerkten diese Regelmäßigkeit. Rotkäppchen störte es nur wenig, dass Vögel und Rehe sie erwarteten oder ihr folgten, um Brotkrümel zu essen, die sie manchmal verlor. Von den Tieren und dem regelmäßigen Fleischgeruch wurden aber auch Wölfe angelockt und lauerten ihr auf. Aber wie ihr wisst, hat irgendwas das Rudel vertrieben, sodass nur der größte Wolf am Ort des Hinterhaltes auf sie lauerte.\nWald-Karte, Wölfe abwehren\nLevel 2 Banditen\nDie Hütte der Großmutter ist aber auch bekannt und das Rotkäppchen Wein und gutes Essen mitbringt, lockt noch andere Interessenten an. Banditen haben in letzter Zeit öfter das Haus besucht und Kleinigkeiten geklaut. Jetzt mit dem Wissen, dass Rotkäppchen regelmäßig zu Besuch kommt, planen sie einen Überfall.\nWald-Karte, Banditen abwehren\nLevel 3 Jäger retten\nNachdem der große böse Wolf alleine bei der Hütte der Großmutter angekommen war, aber Wegelagerer und Raubtiere vertrieben worden waren, musste sich die Glücksfee darum kümmern, dass der Jäger bei der Hütte ankam. Auch ihm wurde im Wald aufgelauert. Einige Soldaten wollten ihn wegen Wilderei einsperren, aber auch Banditen hatten Interesse an den teuren Fellen und dem Fleisch, das er bei sich in der Hütte hatte.\nWald-Karte, hügelige Umgebung, Jägerhütte\nLevel 4 Hütte beschützen\nNachdem der Jäger sicher an der Hütte angekommen war, von der Glücksfee erst verteidigt und dann in die richtige Richtung geleitet worden war, traf er auf den bösen Wolf und rettete die beiden Frauen. Das sie danach aber sehr geschwächt waren, ist wohl verständlich. Auch dass der Jäger sich beim Kampf mit dem großen bösen Wolf ziemlich verausgabte, ist klar. Die Nacht jedoch hatte nicht die Freundlichkeit sie in Ruhe zu lassen. Im Gegenteil. Der Kampf lockte nur noch mehr Wesen an, die sehen wollten was noch übrig war.\nWald-Karte, bei Nacht, ähnlich Karte 2, aber mehr Wege und größer\n","categories":"","description":"Die erste Story zu Rotkäppchen","excerpt":"Die erste Story zu Rotkäppchen","ref":"/game-design-document/story/rotkaeppchen/","tags":"","title":"Rotkäppchen"},{"body":"Dieses Dokument sollte von allen gelesen werden, die Interesse haben, bei der Entwicklung und beim Testen des Spiels mitzuhelfen. Es beschreibt das Design für Fairy Tale Defender.\nTitel Vorläufig: Tower Defense Spiel Genre Strategie Tower Defense Setting Mittelalter/Fantasy Plattformen Windows \u003e= 10 macOS \u003e= 12 Verteilung Kostenfrei auf Steam Technologie Unity 2022 LTS 3D URP Shader Graph Input System Jobs/Burst ","categories":"","description":"Genre, Plattformen, Technologie, etc.","excerpt":"Genre, Plattformen, Technologie, etc.","ref":"/game-design-document/overview/","tags":"","title":"Übersicht"},{"body":"Loop-basiertes Gameplay Ein Level hat 20, 30, 40, 50, Wellen. Für Progress (sprich um Weiterzukommen) muss der Spieler die ersten 20 Wellen schaffen, bekommt dann ein neues Level freigeschaltet. Weitere Freischalten bei 30, …, 50 Wellen sind z.B. Achievementsterne. Hat den Vorteil, dass der Spieler Progress machen kann, aber auch zum Achievement-Jagen ermutigt wird, “alte” Level erneut zu spielen.\nHolt eventuell auch den Casual-Spieler ab, da er nicht gezwungen ist, permanent Levels erneut zu spielen.\nEs wird keinerlei “Reset”/Prestige-Mechanik geben.\n","categories":"","description":"Informationen über loop-basierten Ablauf","excerpt":"Informationen über loop-basierten Ablauf","ref":"/game-design-document/gameplay/loop-gameplay/","tags":"","title":"Loop-basierter Ablauf"},{"body":"Die Roadmap beschreibt sehr grob den Ablauf des Projektes und die Punkte, die wir erreichen wollen.\nOft werden Roadmaps auch mit einem Datum versehen, wann ungefähr was fertig sein soll. Auf ein Terminieren verzichten wir hier bewusst, da wir uns die Zeit nehmen, die wir brauchen.\nPhasen In diesem Abschnitt folgt eine sehr grobe Definition, welche Phasen durchlaufen werden. Ein Pfeil markiert, an welcher Stelle wir uns aktuell befinden.\nFindung des Genres: Entscheidung der Community: Tower Defense\nFindung des Themas: Entscheidung der Community: Mittelalter\nFindung des Stils\nHier werden wir auf Basis des Themas versuchen, einen grafischen Stil zu finden, an dem sich die kreativen Köpfe orientieren sollen.\nDie Stilfindung wird zu einem späteren Zeitpunkt stattfinden, sobald das GDD etwas Inhalt und man durch den MVP erste kleine Dinge implementiert hat.\nErstellung des Game Design Documents. \u003c-\nHier halten wir grob fest, was genau wir eigentlich für ein Spiel entwickeln wollen. Hier drin werden wir auch den MVP (siehe weiter unten) definieren.\nImplementierung der Basis-Infrastruktur. \u003c-\nDas hier wird bereits parallel zum aktuellen “Pfeil” mitlaufen, da diese Basis unabhängig vom Spieltyp ist und bereits implementiert werden kann.\nUmsetzung des MVPs. \u003c-\nDas bedeutet natürlich, dass hier modelliert, designt, entwickelt, getestet, etc. wird.\nJeden einzelnen Punkt werden wir im Laufe der Zeit weiter und genauer ausarbeiten, sobald wir die jeweilige Phase erreichen.\nNach Punkt 3 können wir uns auch an eine Namensfindung machen.\nAb Punkt 6, also wenn’s vom Spiel quasi was zu sehen gibt, können wir bereits das Spiel in einen Beta-Branch auf Steam deployen, sodass jeder, der dann einen Steam Key hat (wie hier die Verteilung aussieht, müssen wir noch schauen), den aktuellen Stand laden und testen kann.\nMVP Mit einem MVP, kurz für Minimal Viable Product, wird versucht herauszufinden, ob es für ein gewisses Spiel einen Markt bzw. Zielgruppe gibt. Das ist natürlich dann interessant, wenn man mit einem Spiel einen finanziellen Erfolg erreichen möchte. Merkt man durch den MVP, dass sich niemand für das Spiel interessiert, kann es sein, dass die Idee nicht gut ist und man über das Spiel nochmal nachdenken muss.\nIn unserem Fall ist das ein bisschen anders, da wir das Spiel kostenfrei zur Verfügung stellen werden und es vor allem auch um den Lernfaktor geht für jeden, der mitmachen möchte. Daher müssen wir keine “Forschung” betreiben, ob unser Spiel auf einen Markt trifft und einen finanziellen Erfolg bedeuten könnte.\nNichtsdestotrotz beschreibt ein MVP eben die kleinste Umsetzung der Kernidee.\nMVP Tower Defense Ziel des MVPs für ein Tower Defense ist es, einen ersten Game Loop zu erreichen. Dieser könnte wie folgt aussehen.\nSpiel starten (Spieler landet direkt auf einer Map) Spieler sieht einen Weg, links ein Portal, rechts unsere Basis. Gegner spawnen im Interval und laufen den Weg entlang. Spieler kann 1-2 verschiedene Türme bauen. Türme schießen auf den Gegner. Werden alle Gegner besiegt -\u003e Gewonnen Erreichen die Gegner unsere Basis -\u003e Verloren Wenn wir diesen MVP erreicht haben, haben wir bereits einiges umgesetzt.\nNatürlich gibt’s hier viele Dinge noch nicht, Menüs, Optionen, Map-Auswahl, und und und. Das ist zu diesem Zeitpunkt auch noch nicht wichtig und wird nach dem MVP angegangen. Natürlich kann, wenn sich genug beteiligen, auch in der MVP-Phase bereits eine Implementierung von Menüs, Optionen etc. geschehen. Bei gewissen Implementierungen kommt man sich hier ja auch nicht in die Quere.\nWichtig ist, dass das Hauptfokus bei der Umsetzung des Game Loops ist, denn nur mit diesem kann das Spiel letzendlich auch gespielt werden. :)\n","categories":"","description":"Beschreibt den groben Ablauf des Projekts.","excerpt":"Beschreibt den groben Ablauf des Projekts.","ref":"/docs/roadmap/","tags":"","title":"Roadmap"},{"body":"Klicke Screenshots an, um sie zu vergrößern.\n27.04.2023 Main Menu Level 1 Credits 07.04.2023 Main Menu Level 1 Credits ","categories":"","description":"Screenshots zum Projekt","excerpt":"Screenshots zum Projekt","ref":"/docs/screenshots/","tags":"","title":"Screenshots-Historie"},{"body":"Die Karten innerhalb der verschiedenen Level sind grundsätzlich rasterbasiert. Dabei handelt es sich nicht um flache Karten, sondern es sollen auch bergige Welten möglich sein. Es sollen abrupte größere Sprünge in der Höhe möglich sein, wie z.B. bei Bergen, um die Höhenunterschiede nicht ausschließlich kontinuierlich in Stufen zu gestalten. Damit würde die Landschaft nicht vollkommen homogen aussehen und etwas mehr Abwechslung für das Auge bieten.\nDie einzelnen Wege werden ebenfalls auf diesem Raster platziert, andere Dekoelemente wie Bäume hingegen sollen absolut frei von Designern platziert werden können.\nEventuell wird die Höhe auch Auswirkungen auf z.B. Türme und deren Schussfertigkeit haben, steht zu diesem Zeitpunkt aber noch nicht fest.\n","categories":"","description":"Informationen über das Terrain","excerpt":"Informationen über das Terrain","ref":"/game-design-document/gameplay/terrain/","tags":"","title":"Terrain"},{"body":"Rasterbasiertes Bauen (Grid based building) Die Spielenden sollen Türme nicht völlig frei platzieren können, d.h. sie können die Türme nicht pixelweise verschieben. Stattdessen darf nur eine freie Position auf einem Raster gewählt werden, außerhalb der gegnerischen Laufpfade.\nSobald eine Position gewählt und ein Turm errichtet wurde, gilt das Feld auf dieser Position als besetzt und es kann kein weiterer Turm mehr darauf gebaut werden.\nOb ein Turm auch eine größere Fläche als ein einzelnes Feld belegen kann, steht zu diesem Zeitpunkt noch nicht fest.\nBeispiele mit ähnlichen Systemen wären die Spiele Parkitect, Rimworld, Prison Architect uvm.\n","categories":"","description":"Informationen über das rasterbasierte Bauen","excerpt":"Informationen über das rasterbasierte Bauen","ref":"/game-design-document/gameplay/construction/","tags":"","title":"Rasterbasiertes Bauen"},{"body":"Resourcen Management Es wird “nur” Münzen für das Bauen von Türmen/Upgrades geben.\nFür das Töten von Gegnern bekommt man x Münzen, die man einsetzen kann.\nEventuell wird es spezielle Ressourcenfelder in Leveln gegeben, die dann die Türme buffen. Zum Beispiel könnte ein Bogenschütze, der auf Lava steht, Feuerpfeile verschießen.\n","categories":"","description":"Informationen über das Ressourcenmanagement","excerpt":"Informationen über das Ressourcenmanagement","ref":"/game-design-document/gameplay/resource-management/","tags":"","title":"Ressourcenmanagement"},{"body":"Der Spieler kann ausschließlich Türme bauen. Rekrutieren von Einheiten ist nicht vorgesehen.\nWelche Türme im Spiel vorkommen, ist noch nicht bekannt. Einige Ideen finden sich hier.\n","categories":"","description":"Informationen über Türme","excerpt":"Informationen über Türme","ref":"/game-design-document/gameplay/towers/","tags":"","title":"Türme"},{"body":"Wellen Typisch für ein Tower Defense Spiel ist, dass Gegner in Wellen erscheinen. Anfängliche Wellen starten mit leichteren Gegnern. Je länger ein Spieler durchhält, umso schwerer werden die Gegner in jeder Welle.\n“Schwer” in diesem Zusammenhang bedeutet, dass ein Gegner mehr Lebenspunkte, mehr Rüstung oder z.B. höhere Elementar-Widerstände hat. Zum aktuellen Zeitpunkt ist noch nicht klar, welche Attribute ein Gegner haben wird. Zu keinem Zeitpunkt kann der Gegner den Spieler bzw. die Türme des Spielers angreifen.\nArten von Gegner Bodeneinheiten Lufteinheiten Mini-Bosse Boss-Gegner End-Boss Anzahl der Gegner Gegner sollen sich wertig anfühlen. Daher wird es keine Masse an Gegner geben, die durch die Türme angegriffen wird, sondern wenige. Klasse statt Masse ist die Devise.\nWege Die Gegner laufen auf vorgefertigten Wegen von ihrem Spawnpunkt zum Ziel. Hierbei kann es sich entweder um Boden- oder Lufteinheiten handeln. Auf dem Weg werden sie von den Türmen beschossen und nehmen Schaden, bis sie entweder sterben oder am Ziel ankommen. Kommen sie am Ziel an, nimmt der Spieler Schaden.\nWegbeeinflussung durch den Spieler Der Spieler soll die Möglichkeit haben, die Wege beeinflussen zu können. Wie genau ist zu diesem Zeitpunkt noch offen. Erste Ideen finden sich hier.\nDas Verändern der Wege soll eine bewusste Entscheidung durch den Spieler sein. Wenn er dies macht, sollte es auch einen negativen Einfluss auf den Spieler haben. Wie genauer dieser aussieht, steht zu aktuellen Zeitpunkt noch nicht fest.\nDie Gegner sind intelligent und wissen, wann ein Weg blockiert ist und nehmen dann direkt eine alternative Route. Falls ein Gegner (z.B. Fluggegner) über eine Blockage fliegen kann, wird er den Weg über die Blockade gehen. Falls eine Blockage durch einen Gegner zerstört werden kann (siehe Ideen), wird er den Weg der Blockade gehen und diese zerstören. Somit wird der Weg wieder frei für alle Gegner.\n","categories":"","description":"Informationen über Gegner","excerpt":"Informationen über Gegner","ref":"/game-design-document/gameplay/enemies/","tags":"","title":"Gegner"},{"body":"Im Spiel hat der Spieler die Möglichkeit, verschiedene Levels zu spielen. In jedem Level muss er eine gewisse Anzahl an Wellen schaffen, bevor er das nächste Level spielen kann.\nDie Levels werden auf zwei verschiedene Arten schwieriger:\nJede Welle eines Levels wird schwieriger als die vorangegangene Welle. Jedes weitere Level ist etwas schwieriger als das Level zuvor. Es wird daher kein genereller Schwierigkeitsgrad benötigt. Die Schwierigkeit steigt kontinuierlich innerhalb jedes und mit jedem Level an.\nDurch das loop-basierte Gameplay kann der Spieler ein Level mehrmals spielen. Daher ist es so, dass der Spieler nicht in der Lage sein soll, jedes Level beim ersten Durchspielen bis zur letzten Welle zu schaffen. Das wird erreicht, dass nach der x-ten Welle, die x+1-te Welle überproportional schwerer ist. Erst durch Forschung und Freischaltung weiterer Türme kann der Spieler bis zur letzten Welle vordringen.\nEs braucht zudem eine Mechanik, die es erlaubt, dass der Spieler Wellen vorzeitig rufen kann. Das ermöglicht dem Spieler beim Wiederspielen eines leichteren Levels, die anfänglichen Wellen zu überspringen und sich auf die Herausforderung der späteren Wellen zu konzentrieren.\nHerausforderungsmodus Jedes Level kann in einem Herausforderungsmodus gestartet werden. In diesem Modus werden:\nGegner stärker/schneller Pausezeiten zwischen Wellen kürzer Türme schwächer Dieser Modus richtet sich an erfahrene Spieler, die bereits viel freigeschaltet haben und eine extra Portion Herausforderung wünschen.\nDer Spieler soll in diesem Modus auf eine noch zu bestimmende Art und Weise belohnt werden.\n","categories":"","description":"Informationen über Levels","excerpt":"Informationen über Levels","ref":"/game-design-document/gameplay/levels/","tags":"","title":"Levels"},{"body":"Der Spieler spielt aus einer Vogelperspektive. Er hat keinen steuerbaren Charakter.\nDer Spieler kann die Kamera rein-/rauszoomen, bewegen und auf der Y-Achse drehen. Die Standardeinstellung ist eine isometrische Darstellung des Spielfeldes.\n","categories":"","description":"Informationen über den Spieler","excerpt":"Informationen über den Spieler","ref":"/game-design-document/gameplay/player/","tags":"","title":"Spieler"},{"body":"Auf dieser Seite findest Du alles, was Du zum Modellieren in Blender wissen musst.\nBlender Starter-Kit Hier findest Du das Blender Starter-Kit.\nDownload Klicke hier, um das Blender Starter-Kit herunterzuladen.\nEs beinhaltet:\nProps.blend: Referenz-Datei mit Assets aus dem Spiel als Referenz für Größen, Formen. Tiles.blend: Referenz-Datei mit den Tiles aus dem Spiel für Größen. Starter.blend: Hiermit startest Du ein neues Asset für das Spiel. textures/ColorPalette_Summer.png: Die sommerliche Farbpalette. textures/Windscale.png: Die Skala für Wind-Effekte. Bitte beachte, dass die Texture und das passende Material bereits in der Starter.blend eingebunden sind. Du musst diese nur noch benutzen.\nBlender-Einstellungen Am besten ist es, wenn Du die Starter.blend als Grundlage nutzt, um eigene Assets zu erstellen. Dort ist bereits die Farbpaletten-Textur und das Export-Script hinterlegt.\nAchte bitte darauf, dass Du das bestehende Material ColorPalette nutzt. Bitte erstelle keine weiteren Materialien und nenne das bestehende Material auch nicht um. Das Material muss ColorPalette heißen, da wir beim Import in Unity nach diesem Suchen und mit dem Material der Engine ersetzen.\nExport-Einstellungen Wenn Du mit Deinem Modell fertig bist und es exportieren willst, dann beachte bitte folgende Dinge:\nExportiere pro Modell eine eigene FBX-Datei. Achte darauf, dass das Modell im Ursprung liegt, bevor Du es exportierst. Stelle die folgenden Einstellungen im Export-Dialog ein: Wenn Du mehrere Modelle in einer Blender-Datei hast, dann ist folgendes Script nützlich für den Export:\nExport-Script Das Export-Script ist in der Starter.blend im Blender Starter-Kit bereits enthalten.\nWechsle in das Scripting-Tab von Blender und erzeuge ein neues Script. Kopiere dann folgendes Script in den leeren Text-Editor.\nMit dem Skript hast Du zwei Möglichkeiten, einen Export anzustoßen.\nExport der aktiven Collection: Wähle hierzu einfach eine Scene-Collection an und starte das Skript. Es wird eine FBX-Datei erzeugt mit allem in der Scene-Collection. Achte hier bitte darauf, dass das Objekt im Nullpunkt steht! Export der selektierten Objekte: Wähle ein oder mehrere Objekte an und starte das Skript. Es wird pro Objekt eine eigene FBX-Datei erzeugt. Außerdem wird jedes Objekt automatisch beim Export in den Ursprung geschoben. In beiden Fällen werden die Dateien dort abgelegt, wo auch die Blender-Datei liegt.\nBitte beachte, dass Du im Object-Mode sein musst zum Exportieren.\nimport bpy import os # export to blend file location basedir = os.path.dirname(bpy.data.filepath) if not basedir: raise Exception(\"Blend file is not saved\") view_layer = bpy.context.view_layer obj_active = view_layer.objects.active selection = bpy.context.selected_objects selection_count = len(selection) # use active collection if no object is selected if selection_count == 0: name = bpy.path.display_name_from_filepath(bpy.context.blend_data.filepath) print(name) fn = os.path.join(basedir, name) bpy.ops.export_scene.fbx( filepath=fn + \".fbx\", use_active_collection=True, object_types= {'MESH', 'ARMATURE', 'EMPTY'}, use_mesh_modifiers=True, mesh_smooth_type='OFF', use_custom_props=True, bake_anim_use_nla_strips=False, bake_anim_use_all_actions=False, use_space_transform=True, bake_space_transform=True, axis_forward='-Z', axis_up='Y', apply_scale_options='FBX_SCALE_ALL') else: bpy.ops.object.select_all(action='DESELECT') for obj in selection: bpy.context.view_layer.objects.active = obj obj.select_set(True) bpy.ops.object.select_grouped( extend=True, type='CHILDREN_RECURSIVE' ) # Save the initial location and set the object to 0/0/0 oldLocation = obj.location.copy() obj.location = (0, 0, 0) # some exporters only use the active object view_layer.objects.active = obj name = bpy.path.clean_name(obj.name) fn = os.path.join(basedir, name) bpy.ops.export_scene.fbx( filepath=fn + \".fbx\", use_selection=True, object_types= {'MESH', 'ARMATURE', 'EMPTY'}, use_mesh_modifiers=True, mesh_smooth_type='OFF', use_custom_props=True, bake_anim_use_nla_strips=False, bake_anim_use_all_actions=False, use_space_transform=True, bake_space_transform=True, axis_forward='-Z', axis_up='Y', apply_scale_options='FBX_SCALE_ALL') # Restore the old location obj.location = oldLocation obj.select_set(False) print(\"written:\", fn) view_layer.objects.active = obj_active for obj in selection: obj.select_set(True) ","categories":"","description":"Informationen zur Modellierung in Blender.","excerpt":"Informationen zur Modellierung in Blender.","ref":"/docs/docs-visual/blender/","tags":"","title":"Blender"},{"body":"Studio für Videosequenzen für das Spiel.\nSoftware: Blender v3.5 Add-ons erforderlich: nein Download\nAssets In der Collection ASSETS/ befinden sich die referenzierten 3D-Modelle aus den externen Dateien (Props, Tiles, usw.).\nHimmel mit Wolken Collection: ENVIRONMENT/Sky\nViele kleine Wolken in tieferer Ebene und einige größere Wolken am Himmel.\nWolken wurden mittels Particle System vervielfacht und händisch etwas aufgeteilt Steuerung Steuerbar sind die Wolken über den Z-Winkel vom Objekt: ENVIRONMENT/clouds-rotation\nFür eine sanfte Bewegung der Wolken wurde eine Action erstellt die per Blending:Add 1° Drehung hinzufügt. Für die andere Bewegungsrichtung genügt es auf Blending:Subtract umzustellen.\nSonne / Licht Collection: ENVIRONMENT/\n/sun-object Light_1-Key Light_1-Keyhelper /sun-focus /Light-Fill-.. (.. = 1,2,3,usw.) Die Sonne dient auch als primäre Lichtquelle (Key). Die sekundären Lichtquellen (Fill) imitieren die indirekte Beleuchtung. Für manche Szenen könnte auch eine Sonne interessant sein, deshalb die grafische Umsetzung.\nSteuerung Platzierung der Sonne über die Winkel (X,Y,Z) vom Objekt: ENVIRONMENT/sun-object\nSteuerung/Fokus vom Lichtkegel der Sonne mittels Objekt: ENVIRONMENT/sun-focus\nWaldgebiet (Wald im Hintergrund) Collection: ENVIRONMENT/Forest\nWaldgebiet wird mittels Particle System (PS) generiert nur Objekte die in der Collection “Forest_PS-Objects” enthalten sind werden berücksichtigt Nebel Collection: ENVIRONMENT/Fog\nEin leichter Nebel auf ganzer Map und etwas stärkere Nebel-Abschnitte im Waldgebiet.\neinzelne kleine Abschnitte für das Waldgebiet Umsetzung Nebel mittels Shader Wassereffekte Collection: ENVIRONMENT/Water-effects\nStrömung “Water-flow” eigenes Objekt über dem Tiles Umsetzung mittels Shader Wasserringe “Water-ripples” (Ringe bei Hindernisse) eigenes Objekt über dem Tiles Umsetzung durch eine Mischung aus Geometry Nodes, Mesh Attributs und Shader nur Objekte die in der Collection “water_Edge-cutters” enthalten sind werden berücksichtigt Wind Umsetzung durch eine Mischung aus Simple Deform Modifier und Drivers zur zentralen Steuerung alle Objekte die vom Wind beeinflusst werden sollen (z.B. Bäume, Sträucher) benötigen den Modifier Windstärke wird durch “Angle” beeinflusst, die Feineinstellung erfolgt durch “Limits” Steuerung Zur einfacheren Regulierung wurden Actions erstellt, Objekt: ENVIRONMENT/wind-force\nIn der NLA kann ein sanfter Wind mit Windböen zusammengestellt werden.\nWind: Geometry Nodes Wir hätten den Wind in Blender gerne wie in Unity (mittels UV-Map, anhand der Y-Achse) umgesetzt. Falls Du die Umsetzung mit Geometry Nodes probieren möchtest, dann wende Dich an einen Ansprechpartner. ","categories":"","description":"Studio für Videosequenzen für das Spiel.","excerpt":"Studio für Videosequenzen für das Spiel.","ref":"/docs/docs-visual/blender/studio/","tags":"","title":"Blender-Studio"},{"body":"Wir nutzen als Basis die .NET Standards und folgen diesen weiteren Anpassungen.\nAngepasst und übersetzt vom Unity Open Project.\nCode Bezeichner Beschreibbare und präzise Namen, auch wenn diese länger werden. Lesbarkeit ist wichtiger als kurze Bezeichner. Verwende keine Abkürzungen. Verwende anerkannte Akryonme, z.B. UI oder IO. Präfixe boolsche Variablen mit “Is”, “Has”, “Can”, etc. z.B. CanJump, IsActive. Vermeide das Nummerieren von Namen, z.B. Animator1, Animator2, etc. Verwende sinnvolle Bezeichner, um den Unterschied erkenntlich zu machen, z.B. PlayerAnimator, EnemyAnimator. Groß-/Kleinschreibung camelCase: Erster Buchstabe ist kleingeschrieben, der jeweils erste Buchstabe der Folgewörter ist großgeschrieben.\nPascalCase: Der erste Buchstabe eines jeden Wortes ist großgeschrieben.\nKlassen, Methoden, Enums, Namespaces, öffentliche Felder und Eigenschaften: PascalCase. Lokale Variablen, Methodenparameter: camelCase. Private Felder: camelCase und Unterstrich-Präfix, z.B. _gameControls. Bei privaten Feldern, die serialisiert werden, also ein [SerializeField] haben: PascalCase. Programmierung Halte den Code in englischer Sprache (dict.cc, deepl.com helfen beim Übersetzen). Felder und Methoden bleiben private, außer man benötigt öffentlichen Zugriff. Versuche Singletons zu vermeiden, in dem du z.B. ein ScriptableObject (1, 2, 3) implementierst. Vermeide statische Variablen. Vermeide Magic Numbers (“magische Nummer”), z.B. value * 0.08, warum wird hier der Wert mit 0,08 multipliziert? Nutze stattdessen eine Konstante oder ein Feld, um der Zahl einen Namen zu geben. Nutze Namespaces, wie es in C# üblich ist, jeder Ordner ist automatisch ein Namespace. Das Basis-Namespace ist BoundfoxStudios.FairyTaleDefender. Serialisierte Felder aka [SerializeField] aka Dinge, die im Inspector angezeigt werden Du bist es von Unity gewohnt, serialisierte Felder auf diese Art und Weise anzulegen:\npublic class Something : MonoBehaviour { [SerializeField] private GameObject SomePrefab; } Diese Variante nutzen wir nicht, sondern wir bevorzugen diese Schreibweise:\npublic class Something : MonoBehaviour { [field: SerializeField] private GameObject SomePrefab { get; set; } } Dies hat den Vorteil, dass wir später diese Eigenschaft öffentlich machen können, aber nur Lese- und keinen Schreibzugriff für andere erlauben, z.B. so:\npublic class Something : MonoBehaviour { [field: SerializeField] public GameObject SomePrefab { get; private set; } } Nullable Reference Types Wir nutzen im Projekt Nullable Reference Types. Das bedeutet das alles, was null sein könnte, explizit auch so markiert werden muss.\n// Ohne Nullable Reference Types GameObject foo; foo = null; // Mit Nullable Reference Types GameObject? foo; foo = null; Durch Nullable Reference Types würde der obere Teil des Beispiel-Codes auch eine Warnung erzeugen.\nDurch das Unity-Serialisierungssystem ([SerializeField]) kommt es allerdings dazu, dass serialisierte Felder etwas anders geschrieben werden müssen:\n// Erzeugt eine Warnung: [field: SerializeField] private GameObject SomePrefab { get; set; } // Alternative 1, falls das Feld nicht optional ist: [field: SerializeField] private GameObject SomePrefab { get; set; } = default!; // Alternative 2, falls das Feld optional ist: [field: SerializeField] private GameObject? SomePrefab { get; set; } Alternative 1 Oft wird im Projekt Alternative 1 genutzt, da man Verknüpfungen zu anderen Assets und Skripten hat. Durch das default! überlisten wir den Compiler und teilen ihm quasi mit, dass das Feld bereits mit einem “nicht-null-Wert” belegt ist. Das bedeutet, dass die Definition private GameObject aussagt, dass das Feld nicht null ist, es im Code aber dennoch zu einer NullReferenceException kommen kann, schlicht weil man das Feld im Unity Inspector nicht gesetzt hat. Allerdings wollen wir auch nicht jedes Feld als nullable GameObject? markieren, da es das weitere Arbeiten im Code erschwert. Daher akzeptieren wir in diesem Fall einfach die NullReferenceException, da man das Setzen des Wertes im Inspector vergessen hat.\nZusätzlich kann man ein Debug.Assert in den Code einfügen, um dem Benutzer direkt mitzuteilen, das etwas fehlt:\nprivate void OnValidate() { // Guard.AgainstNull ist eine Funktion aus von Fairy Tale Defender und prüft, ob ein Feld oder Eigenschaft null ist. // Falls dem der Fall ist, gibt sie eine Nachricht aus. Guard.AgainstNull(() =\u003e SomePrefab); } Alternative 2 Diese kannst Du immer dann nutzen, sobald ein Referenztyp auch wirklich null sein kann. Entsprechend muss man im Verlauf des Codes darauf achten, was passieren soll, wenn die Eigenschaft null ist.\nAsynchrone Entwicklung / Coroutines Wir setzen bei Fairy Tale Defender auf eine externe Bibliothek, sodass wir C# async/await nutzen können: UniTask. Die Bibliothek integriert sich komplett in Unity und ersetzt oft die Nutzung von Coroutines (oder macht deren Nutzung deutlich angenehmer).\nVermeide daher das Implementieren von Coroutinen, falls das ganze auch via async/await implementierbar ist.\nKleine Info am Rande: Bevor es das async/await-Feature in .NET gab, nutzte Unity die Coroutines, um asynchrone Operationen zu ermöglichen. In der Zukunft will Unity selbst mehr und mehr in Richtung async/await gehen und steht dazu auch mit UniTask im Kontakt. Mehr Info siehe ein Blog-Post von Unity selbst -\u003e “Modernizing the .NET Runtime”.\nUnit-Tests Zum Unit-Testen nutzen wir zusätzlich das FluentAssertions-Framework, was das Schreiben und Lesen von Tests angenehmer gestaltet als das von Unity mitgebrachte Assert. Damit es in Unity genutzt werden kann, nutzen wir den Unity-Adapter.\nAußerdem steht Moq zur Verfügung, um Fake-Objekte zu erzeugen.\nFormatierung Verwende 1 Tab pro Spalte, keine Leerzeichen. Das gibt einfach jedem die Möglichkeit, den Code visuell so darzustellen, wie man sich wohlfühlt. Kommentare Schreibe Kommentare auf Englisch (dict.cc, deepl.com helfen beim Übersetzen). Versuche Kommentare zu vermeiden, der Code sollte für sich sprechen. Füge Kommentare dort hinzu, wo es wirklich sinnvoll ist, bspw. wenn eine gewisse Ablaufreihenfolge besteht, die eingehalten werden muss. Nutze VSDoc für Beschreibungen von Klassen, Methoden, etc. Beschreibe jede öffentliche Klasse, Methode und Eigenschaft welchen Zweck sie erfüllt, z.B. /// \u003csummary\u003e /// Diese Klasse kümmert sich um das Abspielen von Kamerafahrten. /// \u003c/summary\u003e Verwende keine #region-Direktiven oder Kommentare, die eine visuelle Trennung erzeugen, wie z.B. //-------. Falls Du sowas brauchst, ist das oft ein Hinweis, dass die Klasse zu viele Zuständigkeiten hat. Scene \u0026 Hierarchy Organisation Nutze leere GameObjects auf der obersten Ebene, um die Hierarchy visuell in logische Bereiche zu trennen, z.B. ----Environment----, ----Managers----. Nutze für diese GameObjects das EditorOnly-Tag, sodass Unity beim Bauen des Projekts diese GameObjects entfernt. Nutze leere GameObjects als Container, sobald Du mehr als 2 zusammenpassende Kind-Objekte hast. Benamung Nutze keine Leerzeichen innerhalb von GameObject-Namen. Nutze PascalCase, z.B. MainDoor, LeverTrigger. Benenne auch Prefab-Instanzen passend in der Hierarchy um. Projektdateien Benamung Gleiche Regeln wie bei Scene \u0026 Hierachy Benenne Deine Objekte so, dass sie auf natürliche Art und Weise gruppiert werden, wenn sie im gleichen Ordner sind. Start beim Namen mit dem “Ding” zu dem es gehört, z.B. PlayerAnimationController, PlayerIdle, PlayerRun, … Wenn es sinnvoll ist, können Objekte so benannt werden, dass ähnliche Objekte zusammenbleiben oder durch ein Adjektiv anders gruppiert werden würden. Beispiel: In einem Ordner mit Requisiten würde man Tische nach dem Schema TableRound und TableRectanngular benennen statt RectangularTable und RoundTable, sodass alle Tische logisch gruppiert werden. Vermeide Dateitypen in Namen, z.B. nutze ShinyMetal statt ShinyMetalMaterial. Ordnerstruktur Beispielstruktur:\n- Assets |- _Game [1] |- Art |- Buildings |- LightningTower |- Materials |- Prefabs |- Environment |- Nature |- Materials |- Prefabs |- Scenes [2] |- Examples [3] |- Menus |- Levels |- ScriptableObjects (Instanzen) [4] |- Scripts [5] |- Events |- ScriptableObjects (Definition) |- UI |- Materials |- _Sandbox [6] |- ... (eventuelle Drittanbieterintegrationen) _Game-Ordner, das ist unser Root-Ordner für das Spiel. Wir platzieren keinerlei Assets direkt im Assets-Ordner von Unity. Diesen halten wir frei für Drittanbieterintegrationen, z.B. Steam. Im Ordner Scenes legen wir alle Scenen des Spiels ab, logisch gruppiert in weiteren Unterordnern. Im Ordner Examples kannst Du, wenn Du neue Systeme für das Spiel implementierst, eine Beispielszene ablegen, um anderen zu zeigen, wie es funktioniert. Instanzen von ScriptableObjects legen wir separat in diesem Ordner ab. In diesem Ordner legen wir alle Skripte ab, gruppiert nach jeweiligem System. In diesem Ordner wird alles abgelegt, von dem wir wissen, dass es noch ausgetauscht werden muss. Eignet sich z.B. wenn man an einem Feature arbeitet, ein Beispiel-Modell dafür benutzt, dass dann später von einem Artist erst neu modelliert wird. Generell gilt, dass zusammengehörende Dinge in einem Ordner gruppiert werden sollen. Im Zweifel lieber einen Ordner mehr als zu wenig.\n","categories":"","description":"Beschreibung, wie wir unseren Code im Projekt schreiben und strukturieren.","excerpt":"Beschreibung, wie wir unseren Code im Projekt schreiben und …","ref":"/docs/docs-technical/coding-conventions/","tags":"","title":"Coding Conventions"},{"body":"Continuous Integration Vereinfacht beschreibt CI automatisierte Systeme, die bei Änderungen im Repo loslaufen und diese Änderungen prüfen, ob sie gewisse Dinge einhalten.\nDieses Repo nutzt GitHub Actions zur Umsetzung von Continuous Integration (CI). Alle Workflows finden sich unter .github/workflows. Wir setzen hier stark auf Game CI, die eine Build-Umgebung für Unity bereitstellen.\nIn unserem Fall gibt es mehrere Prüfungen, die loslaufen, sobald ein Push auf develop erfolgt oder ein PR gestellt wird.\nCode Linting: Prüfung, ob Code-Formatierung eingehalten wird. Unit Tests: Starten der Unity Edit- \u0026 Play-Mode-Tests. Export des Players: Es wird versucht, sowohl für Windows, Linux als auch für macOS das Spiel zu exportieren. Sobald alle drei Prüfungen abgeschlossen sind, kann ein PR übernommen werden. Schlägt auch nur eine der Prüfungen fehl, muss der Ersteller des PRs schauen, woran es liegt und diese Fehler beheben.\nUnity Lizenzierung Ein nerviges Problem bei lizenzierter Software ist oft das Aufsetzen von solchen automatischen Systemen, da diese in der Regel eine eigene Lizenz benötigen. Daher funktioniert es in unserem Repo wie folgt:\nPRs und Änderungen an develop werden mit einer Unity Personal License gebaut. Änderungen an main werden mit einer Unity Professional License gebaut (sodass der typische “Made by Unity”-Splashscreen nicht auftaucht). Continuous Delivery Vereinfacht beschreibt Continuous Delivery aus ständige Ausliefern von Änderungen an die Nutzer der Anwendung.\nIn unserem Fall ist das ein automatisches Ausliefern in einen Steam-Beta-Branch mit dem Namen CI.\nNach jedem Push auf develop erfolgt eine automatische Auslieferung. Wenn alles gut läuft bedeutet das, dass jede erfolgreiche Integration eines PRs innerhalb 1-2 Stunden spielbar auf einem Steam-Branch ist.\nTechnische Steam Infos Unser Spiel hat auf Steam die App Id: 2350330.\nFolgende Depots sind konfiguriert:\nDepot ID Beschreibung 2350331 Windows 2350332 macOS 2350333 Linux Dies ist bisher im Projekt noch nicht genutzt, soll aber implementiert werden.\n","categories":"","description":"Dokumentation über Continuous Integration \u0026 Continuous Delivery","excerpt":"Dokumentation über Continuous Integration \u0026 Continuous Delivery","ref":"/docs/docs-technical/ci-cd/","tags":"","title":"Continuous Integration \u0026 Continuous Delivery"},{"body":"Alle Elemente im Spiel orientieren sich an einer Farbpalette. Es wird “pro Jahreszeit” eine Farppalette geben.\nJede Farbpalette ist 16x16 Pixel groß und bietet somit Platz für 256 verschiedene Farben. Das sollte mehr als ausreichend sein.\nAnwenden kannst Du Farben in Blender via UV Editing.\nWenn Dir eine Farbe fehlt, schreib uns auf dem Discord eine Nachricht, sodass wir die Farbe hinzufügen können.\nDownload Du kannst die Farbpalette hier im Blender Starter-Kit herunterladen, falls Du noch kein Asset erstellt hast.\nFalls Du nur die Farbpalette runterladen möchtest, schaue unten bei den einzelnen Paletten.\nSommer [ Download ]\nHier siehst Du die Farbpalette für den Sommer:\n# Beschreibung 1 Erde 17 Dunkle Erde 2 Gras 18 Blatt Schattierung 1 34 Blatt Schattierung 2 3 Stein 19 Dunkler Stein 4 Wasser 5 Holz Schattierung 1 21 Holz Schattierung 2 37 Holz Schattierung 3 53 Holz Schattierung 4 69 Dachziegel 6 Blume Lila Schattierung 1 22 Blume Lila Schattierung 2 38 Blume Lila Schattierung 3 7 Blume Gelb Schattierung 1 23 Blume Gelb Schattierung 2 8 Blume Blau Schattierung 1 24 Blume Blau Schattierung 2 9 Weiß 25 Schwarz 41 Grau Schattierung 1 57 Grau Schattierung 2 73 Grau Schattierung 3 10 Pilz-Rot ","categories":"","description":"Beschreibung der Farbpalette im Spiel.","excerpt":"Beschreibung der Farbpalette im Spiel.","ref":"/docs/docs-visual/colors/","tags":"","title":"Farbpalette"},{"body":"In diesem Abschnitt findest Du Informationen über das Gameplay und Mechaniken vom Spiel.\n","categories":"","description":"Informationen über das Gameplay \u0026 Mechaniken","excerpt":"Informationen über das Gameplay \u0026 Mechaniken","ref":"/game-design-document/gameplay/","tags":"","title":"Gameplay"},{"body":"\nEs freut uns sehr, wenn wir Dein Interesse geweckt haben, dass Du Dich in irgendeiner Form bei Fairy Tale Defender beteiligen möchtest. Schau Dir am besten zuerst das Intro-Video auf YouTube an und lies dann hier weiter. Bitte beachte zudem unseren Code of Conduct, sodass wir hier alle miteinander respektvoll umgehen und eine angenehme Atmosphäre schaffen.\nAktuell haben sich 17 Menschen am Projekt beteiligt!\nBlackJack237 💻 Christian 📖 🎨 Christian Schamara 💻 fastFox2 💻 📖 🤔 GodGamer948 📖 Harry Alissavakis 🎨 Julia-dev1 📖 🤔 LotteMakesStuff 🧑‍🏫 M4lph 💻 📖 🤔 👀 💬 Manuel Rauber 💻 📖 🤔 🚇 🚧 📆 👀 💬 Maris 🎨 SirTobyB 📖 SuperPirate-ai 💻 Thorsten Kattanek 💻 TipiliF 📖 🤔 Tobby 💻 Tommy 🎨 🤔 Wichtig Kleines Vorwort: Wir stehen noch ganz am Anfang dieses Projektes. Wie es für ein neues Projekt üblich ist, ist der Anfang oft am schwierigsten. Es gibt noch keine Strukturen, keine Dinge, bei denen man sich orientieren kann. Wir gehen daher davon aus, dass der Anfang erstmal recht chaotisch ablaufen wird und sich mit der Zeit dann findet. Sei es technisch, kreativer oder organisatorischer Natur. Alles ist noch offen und alles wird nach und nach eine Struktur finden. :) Wer kann sich beteiligen? Jeder Mensch auf dieser Welt. :) Spieleentwicklung ist ein riesiges Thema und es gibt immer was zu tun. Wichtig ist, dass Du Lust und Laune mitbringst und natürlich Spaß an der ganzen Thematik hast.\nWas muss ich können? Es wird (fast) keine Rolle spielen, ob Du ein Anfänger oder bereits ein alter Hase bist. Im Laufe des Projektes werden wir viele Aufgaben haben, sodass jeder etwas für sich finden kann.\nWir alle werden an diesem Projekt sehr viel lernen und das ist auch eines der Ziele - gerade als Tutorial-Kanal auf YouTube.\nLerne Git! Eine Sache ist allerdings für alle Mitmacher wichtig: Die Benutzung von Git, bspw. mit einer Software wie GitHub-Desktop. Auf unserem YouTube-Kanal findest Du dazu ein kleines Video.\nAber: Git hat einen hohen Funktionsumfang, daher solltest Du Dich neben dem Video auf dem Kanal auch selbst mit Git beschäftigen. Über die Suchmaschine Deiner Wahl findest Du unzählige deutschsprachige Tutorials.\nOhne Git kannst Du (fast) nicht am Projekt mitmachen, es ist daher essentiell wichtig, dass Du Dir die Grundlagen aneignest, wie Du an den aktuellen Code kommst und wie ein Pull Request (PR) funktioniert.\nWas kann ich tun? Welche Rollen gibt es? Folgend eine Liste an Ideen, wie man sich an einer Spieleentwicklung beteiligen kann. Wahrscheinlich gibt es noch sehr viel mehr, als hier steht:\nDesigner 3D-Designer Erstellen von Modellen (Umgebung, Gebäude, Fauna und Flora, …) Erstellen von Charakteren (Menschen, Tiere, …) Rigging und Animation 2D-Designer Benutzeroberflächen Icons Marketingbilder (z.B. für die Steam-Seite, Spiel-Logo, etc.) Entwickler Game Code Unity Editor-Erweiterungen Shader/Shader-Graph Sound Musik Effekte Texter Übersetzungen Dokumentation Tutorials Marketingtexte (z.B. für die Steam-Seite) Organisation Game-Designer Ideen entwickeln, ausarbeiten Spieletester Testen und Fehler melden Verbesserungen vorschlagen … :) Verlässlichkeit Dieser Abschnitt ist super wichtig, wenn Du Dich entschließt mitzumachen, in welcher Form auch immer. Jedes Open Source Projekt funktioniert nur so gut, wie die Leute, die mitmachen. Anfangs ist man immer Feuer und Flamme und gerne mal schnell mit dabei. Aber: Dahinter steckt auch viel Arbeit, vor allem für uns, die es organisieren.\nDaher ist das Thema Verlässlichkeit für uns super wichtig. Wenn Du Dich entschließt mitzumachen und eine Aufgabe zu übernehmen (egal, ob diese groß oder klein ist), dann sind für uns in der Organisation zwei Dinge sehr wichtig:\nWir möchten uns darauf verlassen können, dass eine übernommene Aufgabe auch in einer endlichen Zeit fertig wird. Falls Du, man weiß ja nie, wie das Leben spielt, keine Zeit mehr für die Aufgabe hast, dies auch einfach kommunizierst. Niemand wird Dir böse sein, falls es mal nicht klappt und je früher Du es mitteilst, umso einfacher können wir in der Organisation diese Aufgabe neu verteilen. Kommunikation ist an dieser Stelle essentiell. Auch wenn Du Dir z.B. eine Aufgabe zutraust und dann ins Stolpern kommst, weil es doch schwerer ist als gedacht: kein Problem! Schreib in der Community, das gegenseitige Helfen ist genau das, was ein gemeinsames Projekt spannend macht.\nIch möchte … … technisch mitarbeiten (z.B. Entwickler) … visuell mitarbeiten (z.B. 3D-Designer, 2D-Designer) … auditiv mitarbeiten (z.B. Musik, Sound-Effekte) Fühlst Du Dich in dieser Liste noch nicht zu Hause, da Du z.B. eher Spieletester sein möchtest, kein Problem! Dann bist Du zum aktuellen Stand des Projekte noch etwas zu früh dran. Verfolge gerne das Projekt und schau später wieder rein. Sobald es mal “mehr vom Spiel gibt”, werden weitere Rollen sich am Spiel beteiligen können.\nWo finde ich, was es zu tun gibt? Wo sind die Aufgaben? Eine Liste von Aufgaben wirst Du auf der Issue-Seite von Fairy Tale Defender finden. Alternativ kannst Du auch einen Blick auf das Projekt-Board werfen. Das bedeutet aber nicht, dass Du nur an diesen Aufgaben arbeiten kannst. Wenn Du einen Bug gefunden hast oder Dir eine tolle Idee kommt, dann lass uns gerne darüber reden und eventuell machen wir daraus eine neue Aufgabe für Dich.\nHier erneut ein Hinweis zum Thema Verlässlichkeit: Bitte versuche immer nur eine Aufgabe zu übernehmen, diese abzuschließen (bzw. mindestens einen Pull Request zu stellen), bevor Du eine weitere Aufgabe übernimmst.\nWie kann ich eine Aufgabe übernehmen? Sowohl auf der Issue-Seite und auf dem Projekt-Board findest Du alle aktuellen Aufgaben. Alle Aufgaben, die mit Triage markiert sind, bzw. beim Projekt-Board in der Spalte Triage sind, müssen noch vorsortiert werden.\nFür Dich relevant sind daher alle Aufgaben, die nicht mit Triage markiert sind. Wenn Dich eine konkrete Aufgabe interessiert, klicke sie an, um zur Detailseite zu kommen. Lese Dir hier durch, um was es genau geht und stelle gerne Rückfragen, falls Dir eine Information fehlt. Sobald Du Dich entschließt, dass Du diese Aufgabe bearbeiten möchtest, schreibe einen Kommentar in dem folgender Text vorkommt: .meine-aufgabe - Du musst es exakt so schreiben, wie es dort steht, mit dem Punkt am Anfang, alles kleingeschrieben und dem Bindestrich. Sobald Du den Kommentar abgeschickt hast, wird es ca. 30-60 Sekunden dauern, bis GitHub Dir diese Aufgabe zuweist. Ab jetzt kannst Du daran arbeiten. :-)\nFalls Du eine Aufgabe findest, die schon jemand bearbeitet und Du auch dran interessiert bist, dann schreibe gerne einen Kommentar rein und melde Dich am besten kurz auf dem Discord-Server.\nWie kann ich eine Aufgabe wieder abgeben? Falls Dir irgendwas dazwischen kommt, Deine Aufgabe zu bearbeiten (siehe Thema Verlässlichkeit), dann öffnest Du einfach Deine Aufgabe auf GitHub und kannst rechts unter dem Punkt “Assignees” auf “Unassign me” klicken, dann wird Deine Aufgabe wieder zurückgegeben. Zudem wirst Du, falls Du Dich länger nicht um Deine Aufgabe kümmerst, automatisch vom System angeschrieben und daran erinnert.\nIch habe eine Aufgabe fertig, was mache ich damit? Wenn Du eine Aufgabe fertig hast, dann hast Du in der Regel auch eine oder mehrere Dateien verändert, hinzugefügt, gelöscht, etc. Jetzt wirst Du einen Pull Request erstellen, in dem Deine Änderungen sind und auch die Aufgabe verlinkt. Bitte aktiviere beim Erstellen des Pull Requests die Option “Allow edits from maintainers”. Falls alles passt, werden Deine Änderungen von den Ansprechpartnern ins Spiel übernommen werden. Falls etwas nicht passt oder noch was unklar ist, dann wird es entsprechende Rückfragen geben. Eventuell bedeutet das auch, dass Du erneut etwas anpassen musst, damit es dann schlussendlich zum Spiel passt.\nDinge, die Du nicht tun darfst Es gibt ein paar Dinge, die Du wirklich nicht tun darfst, wenn Du mitarbeitest:\nFüge keine Dinge hinzu, die gegen unseren Code of Conduct verstoßen, also z.B. sexualisierte, gewaltverherrlichende Inhalte (Text, Bilder, …), weiteres entnimm bitte dem Code of Conduct. Füge keine Dinge hinzu, die Du nicht selbst erstellt hast oder nicht CC0 lizenziert sind. Auch Code von anderen Projekten darf nicht genutzt werden, außer er ist selbst Open Source. Bei CC0-Lizenzen ist es zwar nicht nötig, dass wir den Original-Autor erwähnen, aber es ist natürlich schön, wenn wir das tun. Wenn Du daher etwas CC0-lizenziertes nutzt, dass Du dies dokumentierst, sodass wir diesen Punkt in den Credits aufnehmen können. Wenn Du Dich nicht an diese grundlegende Dinge hältst, behalten wir uns vor, Dich von der weiteren Zusammenarbeit mit diesem Projekt auszuschließen.\nSchlusswort Wir freuen uns sehr, wenn Du beim Projekt mitmachen möchtest. Es kann auch durchaus vorkommen, dass Dein Beitrag für sich gestellt super ist, aber er leider nicht zum Projekt passt. Schließlich möchten wir sicherstellen, dass das Projekt in die richtige Richtung läuft und wir am Ende etwas spielbares in den Händen halten können.\nDaher hat Boundfox Studios die finale Entscheidung darüber, was im Repository genehmigt wird oder nicht. Falls es je zu so einer Situation kommt, werden die Gründe ausführlich erläutert.\nDas Schluss-Schlusswort Wann immer Du eine Frage hast, nicht weiter kommst oder generell etwas zum Projekt wissen möchtest, komm gerne auf Discord und frag einfach nach. :-)\nUnd jetzt viel Spaß beim Mitmachen!\n","categories":"","description":"Info, wie man bei Fairy Tale Defender mitwirken kann.","excerpt":"Info, wie man bei Fairy Tale Defender mitwirken kann.","ref":"/docs/contributing/","tags":"","title":"Mitmachen"},{"body":"Basis-Tile Eine Tile ist der Grundbaustein zum Zusammensetzen des Terrains. Es ist ein 1 Meter langer, 1 Meter breiter und 0,2 Meter hoher Quader.\nDie Höhe, 0,2 Meter, teilt sich auf 0,1 Meter Boden und 0,1 Meter Oberfläche.\nAn diesem Tile orientieren sich alle weiteren Modellierungen.\nWeg-Tile Ein Weg-Tile beschreibt ein Tile, auf dem die Gegner laufen.\nDer Weg ist 0,8 Meter breit. Die Seiten sind jeweils 0,1 Meter breit.\nAuf dem Weg wird über Farbe eine leichte Schattierung erzeugt. Hierzu werden seitlich am Weg jeweils 0,1 Meter genutzt. Siehe gestrichelte Linie in der Beschreibung “Dunkler Boden” im Bild.\nBitte achte darauf, diese Maße exakt einzuhalten, ansonsten können wir die Tiles im Spiel nicht zusammensetzen.\nSo sieht z.B. ein Weg-Tile fertig modelliert und gerendert aus:\nTurm Ein Turm wird auf einem Tile platziert. Darf maximal 0,9 Meter breit und lang sein, sodass er niemals das ganze Tile einnimmt (sähe sonst komisch aus, wenn man Türme nebeneinander baut). Die Höhe kann je nach Turm etwas variieren und sollte auch um 1 Meter herum sein. Die Basis vom Turm kann rund oder eckig sein.\nOrigin Der Origin aller Objekte befindet sich unten in der Mitte vom Objekt.\n","categories":"","description":"Beschreibung der Tiles.","excerpt":"Beschreibung der Tiles.","ref":"/docs/docs-visual/tiles/","tags":"","title":"Tiles"},{"body":"Wir haben in Unity einen Fragment-Shader, der einen Wind-Effekt bei Natur-Elementen (z.B. Bäume, Gräser, Blumen) simulieren kann. Die nötige Information, welche Teile des Modells wie stark im Wind bewegt werden, speichern wir auf den Modellen im 2. UV-Kanal.\nDiesen 2. UV-Kanal kannst Du in Blender anlegen, in dem Du das Mesh auswählst, dann bei den Properties auf den “Object Data Properties”-Tab wechselst und dort beim Punkt “UV Maps” eine zweite Map anlegst. Wie Du diese nennst, spielt keine Rolle, wir empfehlen aber den Namen “Wind”, damit man weiß, für was diese UV Map existiert.\nJetzt ist wichtig zu wissen, wie die Vertices in dieser UV angeordnet werden müssen. Vorab: Die X-Achse spielt keine Rolle, für den Wind-Effekt ist ausschließlich die Y-Achse relevant.\nDie UV Map geht 0/0 (links unten) nach 1/1 (rechts oben). Die Y-Achse bestimmt nun, wie stark der Wind Einfluss auf den Vertex hat. Ist dieser bei 0, wird er nicht vom Wind beeinflusst und ist dieser bei 1, dann wird er maximal vom Wind beeinflusst.\nWenn man z.B. einen Baum nimmt, der aus einem Stamm und einer Krone besteht, dann könnte man alle Vertices vom Stamm auf 0 setzen, sodass dieser nicht im Wind mitbewegt wird und die Vertices der Krone auf 1, sodass diese maximal vom Wind erfasst wird.\nAlle Stuffen zwischen 0 und 1 bestimmen prozentual wie stark die Vertices vom Wind bewegt werden. So könnte man z.B. den Teil vom Stamm, der in die Krone reicht, bei 0.5 platzieren, sodass der obere Teil vom Stamm auch etwas vom Wind bewegt wird.\nSomit kann man gut bestimmen, welche Teile vom Modell wie stark vom Wind erfasst werden, ganz so, wie es in der echten Natur auch wäre.\nWindskala Anhand dieser Skala kannst Du Dich orientieren, wie du das UV-Mapping gestaltest. Du kannst gerne die Grafik herunterladen und als Bild im 2. UV-Kanal hinterlegen. Da wir in Unity nur den 1. UV-Kanal zum Rendern benutzen, taucht das Bild im Spiel später nicht auf.\nBeispiel in Blender So sieht es aus, wenn Du das Bild in den 2. UV-Kanal in Blender lädst:\n","categories":"","description":"Beschreibung wie Natur-Elemente (z.B. Baum, Gras) einen Wind-Effekt erhalten können.","excerpt":"Beschreibung wie Natur-Elemente (z.B. Baum, Gras) einen Wind-Effekt …","ref":"/docs/docs-visual/wind/","tags":"","title":"Wind-Effekt"},{"body":" Gendergerechte Sprache Zur Vereinfachung des Schreibens und Lesens des GDDs wird es im generischen Maskulinum verfasst. Beispielsweise umfasst der Begriff “Der Spieler” alle Spieler:innen aller Geschlechter. Hier findest Du das Game Design Document (GDD) des Spiels.\nDas GDD ist ein lebendes Dokument, dass das Konzept eines Spiels beschreibt. Hier findest Du Informationen über Genre, Design, Geschichte, Charaktere, Spielmechanik und/oder zur Projektorganisation und -planung.\n","categories":"","description":"Das Tower Defense Game Design Document","excerpt":"Das Tower Defense Game Design Document","ref":"/game-design-document/","tags":"","title":"Game Design Document"},{"body":"Grundidee ist, dass eine Geschichtenerzählerin verschiedene Geschichten erzählt, die der Spieler in spielbaren Levels erleben kann. Angelehnt sind die Geschichten an die Märchen der Gebrüder Grimm.\nMehr Info siehe in den Ideen bei Story 2.\nAktuelle Märchen, die umgesetzt werden sollen:\nRotkäppchen ","categories":"","description":"Die Story zum Tower Defense Game","excerpt":"Die Story zum Tower Defense Game","ref":"/game-design-document/story/","tags":"","title":"Story"},{"body":"In dieser Sektion findest Du Dokumentation über bestehende Systeme, die bereits implementiert wurden.\nBitte nutze die Navigation links, um die System-Dokumentationen zu finden.\n","categories":"","description":"Dokumentation wichtiger Systeme.","excerpt":"Dokumentation wichtiger Systeme.","ref":"/docs/docs-technical/systems/","tags":"","title":"Systeme"},{"body":"Hier findest Du die technische Dokumentation.\nWenn Du Dich interessiert, Dich technisch zu beteiligen, also das Entwickeln von Code, dann solltest Du Dir alle Informationen hier durchlesen.\n","categories":"","description":"Sammelpunkt der technischen Dokumentation.","excerpt":"Sammelpunkt der technischen Dokumentation.","ref":"/docs/docs-technical/","tags":"","title":"Technische Dokumentation"},{"body":"Hier findest Du die visuelle Dokumentation.\nWenn Du Dich interessiert, Dich visuell zu beteiligen, also dem Erstellen von 3D-Modellen oder 2D-Grafiken, dann solltest Du Dir alle Informationen hier durchlesen.\nWorauf muss ich achten? 3D Quasi Low Poly: Wir machen im Projekt nicht super harte Low Poly Umsetzung, aber eben auch kein High Poly. Versuche Polys zu vermeiden, wo Du keine benötigst und nutze gerne dort ein paar mehr, wo es benötigt wird.\nBitte achte darauf, dass alle Pivots korrekt gesetzt sind, gerade bei Dingen, die animiert werden sollen oder von Dir animiert wurden. Das Pivot vom Gesamtmodell soll unten in der Mitte des Modells sein.\nOrientierung an den Unity-Achsen:\nX-Achse: entspricht X+ in Blender\nY-Achse: entspricht Z+ in Blender\nZ-Achse: entspricht Y- in Blender\nWenn Du etwas modellierst, dass eine Richtung hat (z.B. ein Tier, ein Charaketer, ein Waffe), dann musst Du diese in Blender so ausrichten, dass die Richtung, in die das Objekt schaut, in Richtung Y- orientiert ist. Siehe hier z.B. unseren Wolf:\nIn Unity orientiert sich das Objekt dann mithilfe unseres Export-Scripts automatisch korrekt der Z-Achse.\nSkalierung: 1 Blender Unit = 1 Meter = 1 Unity Unit. Wenn wir Dein Modell in Unity importieren, muss es mit einem 1/1/1 Scaling bereits die korrekte Größe haben.\nBenutze bitte keinerlei Texturen, außer die Farbpaletten-Texture.\nBitte beachte, dass die Shader Deiner Modellierungssoftware nicht mit Unity kompatibel sind. D.h. im Idealfall benötigt Dein Modell keinen eigenen Shader. Falls Du allerdings, Ausnahmen bestätigen die Regel, ein Modell/Aufgabe hast, die einen eigenen Shader benötigt, muss dieser Shader in Unity entwickelt werden. Du kannst ihn zwar in Deiner Modellierungssoftware auch erstellen, er dient dann allerdings nur als Referenz für die Unity-Shader-Entwicklung.\nEinfache Modelle sollten aus nur einem Mesh bestehen.\nExportiere Deine Modelle als .fbx (speziell für Blender siehe hier).\nWie benenne ich meine Modelle? Benenne Deine Meshes, Animationen etc. korrekt (und auf Englisch, dict.cc hilft beim Übersetzen), denn niemand weiß, was Cube 1 und Animation 3 nachher wirklich ist. Benenne Dein Objekt so: Zuerst mit dem Typ, z.B. Tree (Baum), Bush (Busch), dann mit dem Namen der Variante, z.B. 1, 2 und dann abgetrennt mit einem Unterstrich _ die Modifikation davon (z.B. Large (Groß), Small (Klein)). Beispiele: Ein großer und kleiner Baum: Tree_1_Large, Tree_1_Small Ein Schatzkiste: TreasureChest Eine grüne/gelbe Blume: Flower_Green, Flower_Yellow Mixamo Leider kannst Du im Projekt nicht auf die Animationen von Mixamo zurückgreifen. Mixamo erlaubt zwar das Nutzen von Animationen in privaten und kommerziellen Projekten, aber nicht das Verteilen der Animationen. In dem Moment, in dem wir die Animationen hier auf GitHub hochladen, verteilen wir diese und verstoßen damit gegen die Lizenz.\n2D Dein Bild sollte so klein wie möglich und so groß wie nötig sein. Farben bzw. Farb-Palette muss sich im Laufe des Projektes noch finden. Wenn Du Bilder für die Benutzeroberfläche erstellst, sollte dieses in der Regel ein sogenanntes “9-slicing Sprite” sein, siehe hierzu die Dokumentation bei Unity. Es handelt sich hier um eine Standard-Technik, daher findest Du mit diesem Begriff einiges mehr über die Suchmaschine Deiner Wahl. Exportiere Deine Arbeit als .png. ","categories":"","description":"Sammelpunkt der visuellen Dokumentation.","excerpt":"Sammelpunkt der visuellen Dokumentation.","ref":"/docs/docs-visual/","tags":"","title":"Visuelle Dokumentation"},{"body":"Wenn ich PR gestellt habe, bricht es ab beim “Lint code base”-Check. Linting bedeutet, dass automatisiert eine Software (in diesem Fall dotnet-format) prüft, ob Du den Code so formatiert hast, wie wir es gerne in diesem Projekt hätten. Wenn dies fehlschlägt, dann ist Dein Code noch nicht korrekt formatiert.\nUm das Problem zu behben, musst Du in einer Kommandozeile, die im Ordner FairyTaleDefender geöffnet wurde, folgendes ausführen:\n# Windows: format.bat # Linux/mac:S ./format.sh Wenn der Befehl fertig ist, prüfst Du in GitHub Desktop, ob es geändert Dateien gibt, das sollte jetzt auch der Fall sein. Die geänderten Dateien (und prüfe bitte, ob es wirklich nur Deine Dateien sind) kannst Du nun committen und pushen.\nDurch den Push wird Dein PR erneut geprüft und sollte zumindest bei “Lint code base” kein Problem mehr machen.\nIch erhalte einen Fehler beim Ausführen von format.bat/format.sh. Es scheint, als hättest Du nicht .NET 6 installiert, dort kommt dotnet-format, was von format.bat/format.sh ausgeführt wird, mit. Bitte installiere das .NET 6 SDK\nWie kann ich Dinge entwickeln, für die ich Steam benötige? Um permanente Fehlermeldungen zu vermeiden, ist im Unity-Projekt die Steam-Integration per Standard ausgeschaltet. Erst durch den Build durch GitHub wird die Steam-Integration aktiviert.\nWenn Du eine Aufgabe übernimmst, bei der Du etwas implementieren möchtest, dass mit Steam zu tun hat, kannst Du die Steam-Integration lokal aktivieren. Dazu findest Du rechts oben im Editor einen Steam-Button, der per Standard rot (= aus) ist. Wenn Du diesen Button klickst, wird er grün und damit aktiviert sich die Steam-Integration. Klicke ihn erneut an, um die Integration wieder auszuschalten.\nAchtung Bevor Du einen PR stellst, musst Du die Steam-Integration wieder ausschalten, ansonsten werden die automatischen Prüfungen Deines PR fehlschlagen. ","categories":"","description":"Häufig gestellte Fragen zum Projekt.","excerpt":"Häufig gestellte Fragen zum Projekt.","ref":"/docs/docs-technical/faq/","tags":"","title":"Häufig gestellte Fragen"},{"body":"In diesem Glossar sollen einige Begrifflichkeiten definiert werden, die man unter Umständen so noch nicht kennt. Bitte beachte, dass diese Begrifflichkeiten in diesem Glossar oft sehr vereinfacht beschrieben werden, um ein Grundverständnis zu erzeugen. Du solltest natürlich auch die Suchmaschine Deiner Wahl bemühen, um Dein Verständnis zu vergrößern.\nSollte Dir hier ein Begriff fehlen, eröffne gerne ein Issue (“Sonstiges”).\nGit \u0026 Co. Git Allgmeine Versionskontrolle für Softwareentwicklung. GitHub Öffentliches Hosting eines Repositories. GitHub Desktop Software von GitHub zur vereinfachten Nutzung von Git und GitHub. Branch Beschreibt eine Abzweigung innerhalb des Repositories, um verschiedene Entwicklungsstände zu erzeugen. Commit Festsetzen von Änderungen in Git. Kann benannt werden, sodass man nachvollziehen kann, wann welche Änderungen gemacht wurden. Fork \"Verknüpfte\" Kopie eines Repositories. Wird z.B. genutzt um Features, Bugs, etc. zu entwickeln/fixen und dann via Pull Request an das Original-Repository zu übertragen. Repository, Repo Ein unter Versionskontrolle stehender Ordner, in dem Änderungen nachvollzogen werden können. Oder salopp: Ein Git(Hub)-Projekt.\nHier unterscheidet man zwischen einem lokalen Repo und einem remote Repo. Das lokale Repo liegt auf der Festplatte. Das remote Repo liegt z.B. bei GitHub. Über die Git-Kommandos Push und Pull kann das lokale Repo mit dem remote Repo kommunizieren. Pull Das Runterladen von Commits von einem remote Repo in das lokale Repo. Push Das Hochladen von Commits von einem lokalen Repo in ein remote Repo. Pull Request, PR Das Bereitstellen von Änderungen, die in einem Fork gemacht wurden, in das Original-Repo. Game Dev User Interface, UI Die Benutzeroberfläche einer Anwendung. GDD Game Design Document MVP Minimal Viable Product, siehe hier ","categories":"","description":"Auflistung eventueller unbekannter Wörter.","excerpt":"Auflistung eventueller unbekannter Wörter.","ref":"/docs/glossary/","tags":"","title":"Glossar"},{"body":"Das AudioCue-System dient dazu, einzelne Soundeffekte abzuspielen. Man möchte vielleicht fragen, warum nicht einfach das GameObjekt, welches den Sound benötigt eine AudioSource hat, welche dann den Sound abspielt. Dies ginge theoretisch, allerdings gibt es bei z.B. dem Tod einer Einheit das Problem, dass das GameObjekt zerstört werden soll und hierbei würde das Abspielen abgebrochen. Desswegen wird dies von einem System, welches diese Aufgabe zentraliesiert, übernommen.\nVerwendenung AudioCue Zuerst muss eine Instanz des AudioCueSO erstellt werden. An dieser Stelle muss der Audio Clip spezifiziert werden.\nAbspielendes GameObject Das abspielende GameObject muss eine Referenz, nennen wir sie eventChannel zu dem AudioCueEventChannelSO, abegelegt unter ScriptableObjects/Events, haben. Außerdem muss das GameObject die Instanz, beispielsweise PlayerDeathSound des AudioCueSO mit dem entsprechenden Clip kennen. Anschließend muss das Event mit eventChannel.Invoke(PlayerDeathSound); geworfen werden. Nun ist die Arbeit auf Seiten des Abspielenden GameObject erledigt und es kann sich selbst zerstören/zerstört werden, ohne dass Probleme auftreten.\n","categories":"","description":"Dokumentation des Audio Cue Systems.","excerpt":"Dokumentation des Audio Cue Systems.","ref":"/docs/docs-technical/systems/audiocue-system/","tags":"","title":"Audio Cue (Sound Effekte)"},{"body":" TODO Diese Seite ist aktuell noch nicht soweit ausgearbeitet, da es soundtechnisch leider noch nichts zu machen gibt. :) Du bist hier richtig, wenn Du Dich auditiv am Projekt beteiligen möchtest, d.h. Du\nmöchtest Musik komponieren oder möchtest Sound-Effekte für das Spiel erstellen. Worauf muss ich achten? Stereo-Sound. Exportiere Deine Arbeit als .wav-Datei. Wo lade ich meine Ergebnisse hin? Du kannst Deine Ergebnisse im Ordner _contributing/auditory ablegen. Hier erstellst Du einen Ordner mit Deinem Benutzernamen und dort drin je nach Bedarf weitere Ordner (falls Du z.B. an mehrere Stücken gearbeitet hast).\nWichtig ist, dass Du einmal die Original-Datei hochlädst (sodass jemand anders es weiterbearbeiten kann, falls es nötig ist) und bei Sounds einmal einen Export im .wav-Format, sodass wir es dann später in Unity nutzen können. Falls Dein Programm kein .wav exportieren kann (was sehr unwahrscheinlich ist), dann wäre auch .ogg oder .mp3 in Ordnung. .wav wird in jedem Fall allerdings bevorzugt.\nFalls Du Dir unsicher bist, frag gerne auf dem Discord nach.\nBeispiel Wenn Dein Benutzername DerMusterMensch ist und Du einen Plopp-Effekt erstellt hast, dann würdest Du den Ordner _contributing/auditory/DerMusterMensch/PloppEffect anlegen und dort zwei Dateien hochladen:\nPloppEffect.original PloppEffect.wav Was passiert dann? Siehe hier.\nHilfe, ich komme mit Git gar nicht klar Als kreativer Mensch hat man oft noch keinen Berührungspunkt mit dem sehr technischen Git gehabt. Spreche bitte einen Ansprechpartner an, eventuell kann er die Arbeit mit Git für Dich übernehmen.\nFür die Erweiterung Deiner Skills ist’s natürlich cool, wenn Du Dir Git aneignest.\n","categories":"","description":"Info über das Mitmachen im auditiven Bereich.","excerpt":"Info über das Mitmachen im auditiven Bereich.","ref":"/docs/contributing/auditory/","tags":"","title":"Auditiv (Effekte, Musik) mitmachen"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":" Gendergerechte Sprache Zur Vereinfachung des Schreibens und Lesens der Dokumentation wird sie im generischen Maskulinum verfasst. Beispielsweise umfasst der Begriff “Der Spieler” alle Spieler:innen aller Geschlechter. In dieser Dokumentation wirst Du nach und nach alles finden, was zu Fairy Tale Defender gehört.\nAuf der linken Seite findest Du ein Inhaltsverzeichnis, auf der rechten Seite kannst Du Dir den Quelltext von der Dokumentation anschauen. Diese ist, wie das komplette Projekt, auch Open-Source!\nUnten links und rechts findest Du wichtige Links zum Projekt, aber auch hier nochmal:\nGitHub Discord YouTube Twitter Weitere Socials YouTube “Fairy Tale Defender” Playlist Alle Videos zum Fairy Tale Defender findest Du in der Playlist auf YouTube!\n01.05.2023\n13.02.2023\n14.11.2022\n09.11.2022\n31.10.2022\n15.10.2022\n11.10.2022\n03.10.2022\n23.09.2022\n19.09.2022\n15.09.2022\nWer macht alles mit? Aktuell haben sich 17 Menschen am Projekt beteiligt!\nBlackJack237 💻 Christian 📖 🎨 Christian Schamara 💻 fastFox2 💻 📖 🤔 GodGamer948 📖 Harry Alissavakis 🎨 Julia-dev1 📖 🤔 LotteMakesStuff 🧑‍🏫 M4lph 💻 📖 🤔 👀 💬 Manuel Rauber 💻 📖 🤔 🚇 🚧 📆 👀 💬 Maris 🎨 SirTobyB 📖 SuperPirate-ai 💻 Thorsten Kattanek 💻 TipiliF 📖 🤔 Tobby 💻 Tommy 🎨 🤔 Repository Visualisierung Die Visualisierung wird täglich um Mitternacht aktualisiert.\n","categories":"","description":"","excerpt":" Gendergerechte Sprache Zur Vereinfachung des Schreibens und Lesens …","ref":"/docs/","tags":"","title":"Dokumentation"},{"body":"[ Boundfox YouTube Tutorial ]\nWenn Du noch nicht weißt, was ein Event-System ist, dann ist weiter unten eine kleine Erklärung.\nImplementierung Im Code findest Du das Event-System hier. Es besteht aus mehreren Event Channels in Form von ScriptableObjects. Ein Event Channel ist schlicht ein Kanal über den Informationen laufen.\nJeder kann Informationen in ein Event Channel geben und jeder kann diese Informationen mitbekommen. Dadurch das wir hier auf ScriptableObjects setzen, können Sender und Empfänger in unterschiedlichen Szenen sein, was z.B. für das Multi-Scene-Management sehr praktisch ist.\nflowchart LR Action[\"Aktion/Trigger (MonoBehaviour)\"] --\u003e|\"Raise()\"| Event[\"Event (ScriptableObject)\"] EventListener[\"Event Listener (MonoBehaviour)\"] --\u003e|\"Horcht auf\"| Event EventListener --\u003e Response[\"Antwort auf Event\"] Was ist ein Event-System? Der Sinn eines Event-Systems ist es, Systeme zu entkoppeln.\nNehmen wir als Beispiel mal das Leben des Spielers. Wenn der Spieler Leben verliert oder bekommt, möchte man das in der Regel im UI anzeigen. Jetzt könnte der Spieler eine Referenz auf das UI haben (oder auch umgekehrt) und sobald der Spieler Leben verliert oder gewinnt, diese Änderung direkt an das UI übertragen. Weiter möchten wir, dass die Gegner sich anders verhalten, je nach dem, wie viel Leben der Spieler hat. Auch hier könnte jetzt der Spieler alle Gegner kennen und ihnen mitteilen, wenn sich das Leben verändert. Weiter geht’s mit anderen Systemen: Post Processing zum Effekte je nach Leben anzeigen, Audio System, dass entsprechend den Sound ändert etc.\nflowchart LR Spieler --\u003e UI Spieler --\u003e Gegner1 Spieler --\u003e ... Spieler --\u003e GegnerX Spieler --\u003e PostProcessing Spieler --\u003e AudioSystem Wenn der Spieler all diese Systeme direkt kennen würde, nennt man dies auch eine hohe Kopplung. In der Softwareentwicklung versucht man, genau diese hohe Kopplung zu vermeiden. Auch wenn dieses Beispiel hier sehr einfach gehalten ist, führt diese Kopplung langsam aber sicher zu schlecht wartbarem Code. Denn, wann immer man sich die Spieler-Klasse ansieht, sehen wir viele Abhängigkeiten im Code. Jetzt muss jeder Entwickler schauen, was genau diese Abhängigkeiten machen, um zu verstehen, wie die Spieler-Klasse funktioniert. Außerdem hat die Spieler-Klasse viel mehr Verantwortung, als sie eigentlich haben müsste, da sie viele Bereiche der Gesamtanwendung kennt und bearbeitet.\nDas ist in der Softwareentwicklung kein erstrebenswerter Zustand.\nViel mehr wollen wir eine Entkopplung erreichen und hier tritt unser Event-System ein:\nflowchart LR Spieler --\u003e|Leben: 50| EventSystem EventSystem --\u003e|Leben: 50| UI EventSystem --\u003e|Leben: 50| GegnerX EventSystem --\u003e|Leben: 50| PostProcessing EventSystem --\u003e|Leben: 50| AudioSystem Leider sieht es jetzt durch die Grafik so aus, als hätten wir das Problem zum Event-System verschoben, dass jetzt alle anderen kennt. Dem ist aber nicht so. Anstelle dass der Spieler jedes Einzelsystem bearbeitet, nutzt es einfach nur das Event-System und teilt sein aktuelles Leben mit. Was jetzt damit passiert, das ist dem Spieler vollkommen egal. In diesem Moment haben wir alles voneinander entkoppelt. Die Spieler-Klasse hat viel weniger Verantwortlichkeiten, auch für den Entwickler ist es jetzt sehr viel einfacher zu verstehen, da statt viele Einzelsysteme nur noch das Event-System angesprochen wird. Damit haben wir jetzt eine lose Kopplung erreicht.\nEinfach ausgedrückt kann man sich das Event-System als eine Art Walkie-Talkie vorstellen. Jemand teilt seinen Zustand über das Walkie-Talkie mit, ohne zu wissen, wer diese Nachricht hört, ob sich jemand dafür interessiert und was mit der Information passiert.\n","categories":"","description":"Erklärung zu Event-Systemen.","excerpt":"Erklärung zu Event-Systemen.","ref":"/docs/docs-technical/systems/event-system/explanation/","tags":"","title":"Erklärung Event-System"},{"body":"Solltest Du nicht Wissen, was genau ein Event-Sytem ist, dann schau am besten einmal hier.\nBestehende Events Bestehende Events findest Du im Ordner _Game/ScriptableObjects/Events. Zu jedem Event gibt es dort auch eine kleine Erklärung, für was genau es zur Verfügung steht.\nEvent-Folgen Spielstart flowchart TD LoadScene --\u003e ToggleLoadingScreen1 ToggleLoadingScreen1[ToggleLoadingScreen] --\u003e LoadLevel{{Level wird geladen}} LoadLevel --\u003e ToggleLoadingScreen2[ToggleLoadingScreen] ToggleLoadingScreen2 --\u003e InitLevel{{Level wird initialisiert}} InitLevel --\u003e SceneReady SceneReady --\u003e GameplayStart ","categories":"","description":"Dokumentation des Event-Systems.","excerpt":"Dokumentation des Event-Systems.","ref":"/docs/docs-technical/systems/event-system/","tags":"","title":"Event-System"},{"body":"Durch forschen können weitere Inhalte und Verbesserungen freigeschaltet werden. Wie und wann man die Möglichkeit bekommt weiter zu forschen, steht noch offen. Dies könnte durch Sammeln von Erfahrung, beim Besiegen von Gegnern und ganzen Leveln der Fall sein, könnte aber auch z.B. Geld erfordern.\nDie Forschung könnte sich u.a. über folgende Gebiete erstrecken:\nTürme Türme werden erst mit abgeschlossener Forschung freigeschaltet Attribute werden verbessert Kosten werden reduziert für Bau für Upgrade Benötigte Zeit zum upgraden wird reduziert Personal Das Cap (Limit) an Personal könnte sich erhöhen Weniger Personalbedarf für bestimmte Türme Magie Element wird erst durch Forschung freigeschaltet Element wird verbessert Schaden Fläche Effektdauer Gegner Globaler Schadenbonus für alle Türme gegen eine bestimmte Gegnerart Könnte zum freischalten auch z.B. X-Kills an dem Gegnertyp benötigen ","categories":"","description":"Ideen wie im Spiel Forschung betrieben werden kann","excerpt":"Ideen wie im Spiel Forschung betrieben werden kann","ref":"/docs/ideas/research/","tags":"","title":"Forschung"},{"body":"Gegnerarten Bisher wurden folgende Gegner vorgeschlagen:\nBauern Zwerge Ritter Reiter Drachen Attribute der Gegner Gegner sollen über folgende Eigenschaften verfügen, die grob in jeweils 3-4 Stufen eingeteilt werden können.\nLebenspunkte: Wenig, Mittel, Viel Rüstung: Keine, Wenig, Mittel, Viel Geschwindigkeit: Langsam, Mittel, Schnell Größe: Klein, Mittel, Groß Erfahrungpunkte für den Spieler: Wenig, Mittel, Viel Münzen für den Spieler: Wenig, Mittel, Viel Elementarwiderstände: Luft, Wasser, Feuer, Erde Effektwiderstände: Umwerfwiderstand Typ: Boden-, Lufteinheit Es wurde sich gegen die Fähigkeit der Heilung bei Gegner entschieden.\nTabelle Bauer Zwerg Ritter Reiter Drachen Lebenspunkte Wenig Wenig Mittel Mittel (mehr als Ritter) Hoch Rüstung Keine Wenig Mittel Mittel Keine Geschwindigkeit Mittel Mittel Langsam Schnell Mittel Größe Mittel Klein Mittel Groß Groß Erfahrungspunkte Wenig Wenig Mittel Mittel Hoch Münzen Wenig Wenig Mittel Mittel Hoch Typ Boden Boden Boden Boden Flug ","categories":"","description":"Ideen, welche Gegner im Spiel vorkommen werden","excerpt":"Ideen, welche Gegner im Spiel vorkommen werden","ref":"/docs/ideas/enemies/","tags":"","title":"Gegner"},{"body":"Gemäß dem GDD laufen Gegner auf vorgefertigten Wegen. Diese Wege sollen allerdings durch den Spieler beeinflussbar sein.\nIdeen zu Wegen von Gegnern Level-Designer platziert Wege und/oder Wegpunkte für Boden- und Lufteinheiten. Bodeneinheiten könnten durch Wegveränderungen im Laufe des Levels anders verlaufen (siehe unten). Jedes Level benötigt mindestens einen Weg vom Spawnpunkt zum Ziel. Hat ein Level nur einen einzigen Weg oder wurden andere Wege so abgeschnitten, dass nur noch ein einziger Weg existiert, dann kann der Spieler keine unüberwindbare Barrikade erstellen. Jedes Level könnte einen oder mehrere Spawnpunkte haben. Ideen zur Veränderung von Wegen durch den Spieler Funktioniert nur bei Levels, die mehrere Wege haben Errichten von Barrikaden Könnten unüberwindbar sein Könnten durch Gegner zerstört werden Könnten nur durch bestimmte Gegnertypen bzw. Gegner mit bestimmten Attributen zerstört werden Das Verändern des Weges soll auch einen negativen Einfluss auf den Spieler haben, sodass das Beeinflussen eine bewusste Entscheidung sein muss Weniger Gold pro Gegner? Kürze Wartezeit zwischen Wellen? Mehr Gegner pro Welle? Stärkere Gegner? ","categories":"","description":"Ideen, wie die Gegner durch das Level laufen und blockiert werden können.","excerpt":"Ideen, wie die Gegner durch das Level laufen und blockiert werden …","ref":"/docs/ideas/navigation/","tags":"","title":"Gegner-Navigation"},{"body":" Fairy Tale Defender Open Source Tower Defense im Mittelalter-Theme. Ein Boundfox Studios Community-Projekt.\nDokumentation GitHub Mit Fairy Tale Defender wagen wir ein kleines Experiment: Dem Entwickeln eines open-source Spiels mit Unity. Jeder der sich beteiligen möchte, soll sich bei diesem Projekt einbringen können. Mitmachen erwünscht Wir freuen uns über jeden, der sich bei der Spielentwicklung beteiligen möchte. Ganz gleich ob Du Entwickler, 3D/2D-Artist, Musik/Effekt-Designer, Ideen-Geber, …, bist - alle sind herzlich willkommen.\nAktuell haben sich 17 Menschen am Projekt beteiligt!\nJetzt mitmachen …\nDiscord Komm auf den Discord-Server und beteilige Dich an den Diskussionen rund um Features, Implementierung und Asset-Erstellung!\nJetzt mitdiskutieren …\nYouTube Du interessiert Dich nur für den Fortschritt? Dann abonniere den YouTube-Kanal mit regelmäßigen Updates zum Projekt!\nJetzt anschauen …\nAktuell haben sich 17 Menschen am Projekt beteiligt!\nBlackJack237 💻 Christian 📖 🎨 Christian Schamara 💻 fastFox2 💻 📖 🤔 GodGamer948 📖 Harry Alissavakis 🎨 Julia-dev1 📖 🤔 LotteMakesStuff 🧑‍🏫 M4lph 💻 📖 🤔 👀 💬 Manuel Rauber 💻 📖 🤔 🚇 🚧 📆 👀 💬 Maris 🎨 SirTobyB 📖 SuperPirate-ai 💻 Thorsten Kattanek 💻 TipiliF 📖 🤔 Tobby 💻 Tommy 🎨 🤔 YouTube-Videos zu Fairy Tale Defender\n01.05.2023\n13.02.2023\n14.11.2022\n09.11.2022\n31.10.2022\n15.10.2022\n11.10.2022\n03.10.2022\n23.09.2022\n19.09.2022\n15.09.2022\n","categories":"","description":"","excerpt":" Fairy Tale Defender Open Source Tower Defense im Mittelalter-Theme. …","ref":"/","tags":"","title":"Fairy Tale Defender"},{"body":"Elementarmagie Folgende Elemente sollen als Magie ihren Weg in das Spiel finden:\nLuft Erde/ Stein Wasser/ Eis Feuer Türme Einige Ideen wie Türme Magie einsetzen könnten, finden sich hier.\n","categories":"","description":"Ideen wie Magie ins Spiel gebracht werden kann","excerpt":"Ideen wie Magie ins Spiel gebracht werden kann","ref":"/docs/ideas/magic/","tags":"","title":"Magie"},{"body":"Unity ist in der Lage, mehrere Szenen gleichzeitig laufen zu lassen. Dabei können wir als Entwickler bestimmen, wann wir neue Szenen dazu laden oder auch welche wieder entladen. In Unity-sprech ist das ein additives Laden von Szenen.\nDer Ablauf ist aktuell wie folgt:\nWir laden zum Start des Spiels die Initialization-Szene. Sie hat nur ein einziges Objekt mit dem InitializationLoader-Script. Dieses Script startet das eigentliche Spiel, in dem es zwei weitere Szenen lädt: PersistentManagers und das MainMenu. Danach wird die Initialization-Szene entladen. PersistentManagers ist eine Szene, die einmalig geladen wird und während der gesamten Laufzeit vom Spiel nie wieder entladen wird. In dieser Szene liegen Objekte/Manager, die wir das gesamte Spiel über benötigen, z.B. Hintergrundmusik oder das Laden von anderen Szenen (via SceneLoader-Skript). Über ein Event-System können andere Szenen und Objekte mit den PersistentManagers kommunizieren. Für den Fall, dass man in Unity den Play Mode von einer anderen Szene aus startet (was durchaus üblich ist), kümmert sich ein EditorOnly-GameObject darum, diese PersistentManagers zu laden. So, als hätte man das Spiel über die Initialization-Szene gestartet. Dieser Vorgang nennt sich bei Fairy Tale Defender “EditorColdStartup”. Die Implementierung des Multi Scene Managements findet sich im Ordner SceneManagement.\nsequenceDiagram autonumber Spielstart -\u003e\u003e Initialization: Lädt activate Spielstart activate Initialization Initialization -\u003e\u003e PersistentManagers: Lädt activate PersistentManagers Initialization -\u003e\u003e PersistentManagers: Event: LoadScene \"MainMenu\" PersistentManagers -\u003e\u003e MainMenu: Lädt Initialization -\u003e\u003e Initialization: Entlädt sich selbst deactivate Initialization Note over PersistentManagers, MainMenu: Typischer Spielablauf...\nSpiel wird gespielt... PersistentManagers -\u003e\u003e Spielstart: Spiel beenden deactivate PersistentManagers deactivate Spielstart Vorteile Kein DontDestroyOnLoad notwendig DontDestroyOnLoad (DDOL) bringt einige Nachteile mitsich:\nEs wird oft in Zusammenhang mit dem Singleton-Pattern implementiert. Das bedeutet, dass Unity das Objekt erstellt, das Skript dann prüft, ob es bereits existiert und falls ja, sich automatisch wieder zerstört. Das sind unnötig verbratene Ressourcen. Oft kann DDOL mit einem ScriptableObject ersetzt werden, da DDOL gerne für das Speichern von Laufzeitdaten verwendet wird, die man überall benötigt. Diesen Mechanismus kann man durch Multi Scene Management sehr einfach mit den PersistentManagers erreichen, da diese im Spiel immer zur Verfügung stehen. Kein code-typisches Singleton-Pattern notwendig Oft wird zusammen mit DDOL auch im Code ein Singleton-Pattern implementiert. Das bedeutet, dass das Objekt selbst entscheidet, ob es ein Singleton ist oder nicht. Das führt dann in der Regel dazu, dass man durch seine gesamte Codebase hinweg von überall den Zugriff auf irgendwelche Singletons sieht, was wiederum zu einer hohen Kopplung führt. Warum das schlecht ist, wird im Event-System erklärt.\nDennoch gibt es Anwendungsfälle, bei denen Singletons praktisch sind. Denn das Pattern als solches ist per-se erstmal nicht schlecht, sondern oft dessen Anwendung ist das, was es schlecht macht. Bei Multi Scene Management können wir ein Singleton ganz einfach erreichen, in dem wir ein GameObject in der PersistentManagers-Szene ablegen. Dadurch, dass diese einmalig geladen wird und das gesamte Spiel lebt, haben wir jetzt eine Instanz von einem Objekt, dass wir verwenden können, ergo ein Singleton.\nZudem kommt, dass Singeltons auch oft als Datencontainer, ähnlich wie bei DDOL, genutzt werden. Auch hier haben wir bereits ein Board-Mittel von Unity: ScriptableObjects.\nTypische Anwendungsfälle sind hier z.B. Dinge wie:\nScene Management Hintergrundmusik Analytics Ladebildschirm Nachteile Natürlich bringt das Multi Scene Management auch Nachteile mit sich.\nKomplexität: Gerade für Anfänger, die bisher nur mit einer Szene gearbeitet haben, kann Multi Scene Management zu Beginn sehr komplex wirken. Umdenken: Eigentlich was positives, aber anfänglich eher als Nachteil zu sehen: Man muss umdenken, wie der Code strukturiert ist, da man auf gewisse Dinge eben nicht sofort Zugriff hat, sondern eine Indirektion, z.B. über das Event-System gehen muss. ","categories":"","description":"Dokumentation des Multi-Scene-Managements.","excerpt":"Dokumentation des Multi-Scene-Managements.","ref":"/docs/docs-technical/systems/multi-scene-management/","tags":"","title":"Multi Scene Management"},{"body":"UI Prefabs Wir nutzen ein kleines System, um einfacher Prefabs für das UI finden zu können. Generell liegen die Prefabs im Ordner Prefabs/UI.\nUm komfortabel ein UI zusammenbauen zu können, integrieren wir unsere eigenen Prefabs auch in das Menü von Unity (Rechtsklick in der Hierarchy). Auf diese Art funktioniert das Zusammenstecken von UI-Elementen ähnlich wie bei den Standard-Unity-Elementen.\nDamit das ganze funktioniert, nutzen wir eine Instanz von PrefabManagerSO, dass alle Prefabs sammelt, die in diesem Menü angezeigt werden. Du findest die Instanz unter ScriptableObjects/PrefabManager, oder einfach im Menü auf Community Project -\u003e Select PrefabManager.\nIm Inspektor siehst Du, welche Prefabs verknüpft sind und genutzt werden können.\nWenn Du hier eigene Prefabs hinzufügen möchtest, musst Du den PrefabManager im Code und die Menü-Einträge erweitern.\nIch finde nicht, was ich brauche. Es kann durchaus sein, dass Du UI umsetzen möchtest, aber es dafür noch keine passenden Prefabs findest. Am Besten legst Du diese dann an und fügst wie, wie im Abschnitt zuvor beschrieben, dem PrefabManager hinzu.\n","categories":"","description":"Dokumentation über Prefabs.","excerpt":"Dokumentation über Prefabs.","ref":"/docs/docs-technical/systems/prefabs/","tags":"","title":"Prefabs"},{"body":"Oft benötgt man in Unity Referenzen auf andere GameObjects. Gerade durch den Ansatz mit Multi-Scene-Management kommt es vor, dass ein GameObject nicht in der eigenen Scene, sondern in einer anderen liegt. Leider wird zur Lösung hier oft ein Singleton-Pattern im Code implementiert, was die Wartbarkeit und Testbarkeit erschwert.\nAnstelle von Singletons im Code verwenden wir Runtime Anchors. Ein Runtime Anchor ist ein ScriptableObject, was eine Referenz auf ein bestimmtes GameObject kennt. Dadurch entkoppeln wir verschiedene Systeme und es entsteht keine harte Abhängigkeit. Als prominentes Beispiel wäre hier die MainCamera zu nennen, diese wird öfter mal in einem Spiel gebraucht, sei es zur Berechnung von Raycasts oder für Billboard-UI-Elemente.\nDie Basis vom Runtime Anchor ist wie folgt implementiert:\npublic abstract class RuntimeAnchorBaseSO\u003cT\u003e : ScriptableObject where T : class { public bool IsSet { get; private set; } private T? _item; public T? Item { get =\u003e _item; set { _item = value; IsSet = _item is not null; } } private void OnDisable() { _item = null; IsSet = false; } } Eine konkrete Implementierung für eine Camera wäre:\nusing UnityEngine; [CreateAssetMenu] public class CameraRuntimeAnchorSO : RuntimeAnchorBaseSO\u003cCamera\u003e { } Jetzt werden zwei Dinge benötigt:\nEin Skript muss den Wert des CameraRuntimeAnchorSOs setzen. Jemand muss diesen Wert konsumieren. In beiden Fällen wird in einem MonoBehaviour oder auch in einem weiteren ScriptableObject ein Feld dafür angelegt:\n[field: SerializeField] private CameraRuntimeAnchorSO CameraRuntimeAnchor { get; set; } = default!; // Anchor setzen: private void Awake() { CameraRuntimeAnchor.Item = GetComponent\u003cCamera\u003e(); } private void OnDestroy() { CameraRuntimeAnchor.Item = null; } // Anchor nutzen: private void DoSomething() { var camera = CameraRuntimeAnchor.Item; // camera.ScreenPointToRay... } ","categories":"","description":"Dokumentation über Runtime Anchors.","excerpt":"Dokumentation über Runtime Anchors.","ref":"/docs/docs-technical/systems/runtime-anchors/","tags":"","title":"Runtime Anchors"},{"body":"Du kannst komfortabel neue Szenen anlegen, wenn Du in Unity über das Menü File -\u003e New Scene gehst. Dort findest Du im Dialog zwei Templates, die von Fairy Tale Defender stammen:\nMenu Szene Level Szene Wähle die Menu Szene, wenn Du ein neues Menü anlegen möchtest. Darunter zählen alle FullScreen-Menüs, z.B. MainMenu, Optionen, Credits.\nWähle die Level Szene, wenn Du ein neues Leven anlegen möchtest.\n","categories":"","description":"Dokumentation der Scene Templates.","excerpt":"Dokumentation der Scene Templates.","ref":"/docs/docs-technical/systems/scene-templates/","tags":"","title":"Scene Templates"},{"body":"Diese Storys sind von unserem Community-Mitglied Tipi geschrieben worden. Sie sind gedacht, um eine Idee für die Handlung und damit die Umgebung und den grafischen Stil des Spiels zu setzen. Es sind jeweils die Startszenarien, die dann weiter ausgebaut werden, wenn die Community sich für eines entschieden hat (oder was ganz anderes will).\nÜber eine Abstimmung über den YouTube-Kanal hat sich die Community für Story 2 entschieden.\nStory 1 (Obsolet) Unsere Protagonistin ist Tochter einer mittelständischen Familie, ihre Kindheit war so weit in Ordnung. Ihr Vater war Handwerker, die Mutter hauptsächlich Mutter und wenn sie Zeit hatte, hat sie versucht, mit Kleinigkeiten etwas Geld dazuzuverdienen. Es reichte zum Leben, viel mehr aber auch nicht. Mit dem Heranwachsen zeigte sich immer mehr eine zurückhaltende, aber sehr aufmerksame Persönlichkeit, ideal für den Besuch einer Bedienstetenschule.\nSie sollte erst als Hausmädchen anfangen und später vielleicht bei einem Adligen den Haushalt übernehmen. Die Ausbildung lief ohne größere Probleme: Ein geschicktes junges Mädchen, ordentlich, schnell, freundlich und gut in der Lage trotz Stress ein freundliches Gesicht aufzusetzen. Bei einem der ersten Testeinsätze passierten ihr dann aber in der Aufregung erste Fehler. Nach dem Abräumen des Abendessens fielen mehrere Teile des Silberbesteckes zu Boden und einige rutschten unter die Möbel. Ihre Chefin aber sagte ihr, sie könnten es morgen mit der Hilfe des Küchenjungen herausholen.\nAm nächsten Morgen war aber ihre Chefin nicht da und ihre Vertretung sagte nur, sie sei krank und das Besteck jetzt egal. Obwohl das Mädchen mehrfach fragte, wurde es die gesamte Woche über immer wieder verschoben. Kurz vor Ende ihrer Probearbeit angelte sie mit einem Stock nach Ende der Arbeit 2 Silberlöffel und eine Gabel unter dem Schrank hervor, nur nahm sie diese mit nach Hause. Geübt darin immer ein freundliches Gesicht zu machen, ging sie einfach mit dem Besteck im Kleid aus dem Haus und verkaufte es am nächsten Tag auf dem Markt. Sie schenkte ihren Eltern eine Kleinigkeit zur Feier der überstandenen Probearbeit und hatte die gesamte Woche Angst, jemand würde sich melden, aber es passierte nichts.\nNach einem Monat sprach sie mit einer Freundin, die sie bei der Arbeit kennengelernt hatte. Nichts, niemandem war das Fehlen des Silberbestecks aufgefallen: Ein Wochenlohn konnte einfach so entwendet werden. Ab diesem Zeitpunkt war ihr klar: Sie könnte die Adligen bei der Arbeit einfach bestehlen, denn es hatte sich gezeigt, dass sie gar nicht zu schätzen wissen, was sie alles hatten. Straßenkinder hingegen zeigten sich als sehr dankbar, selbst wenn es nur um einen halben Apfel oder eine Handvoll Kirschen ging.\nSo zog es sich einige Jahre, bis die Kinder größer waren und sie eine erwachsene Frau war. Dies führte unausweichlich dazu, dass sie eine Gruppe sehr treuer und ebenfalls geschickter Freunde hatte. Anfangs versorgte sie diese ungewollt mit den Informationen, die für Einbrüche nötig waren. Nachdem sie aber realisiert hatte, was die ehemaligen Kinder dort taten, entschied sie sich, das Ganze zu koordinieren und weitere Kontakte aufzubauen. Die freundliche, elegante Art, die sie von der Bedienstetenschule gelernt hatte, ihre Erfolge beim Bestehlen der Adligen und ihre Fähigkeit ihre Emotionen sehr gut zu überspielen, brachten ihr schnell Kontakte zur Unterwelt ein. Nun hatte sie ihre eigene Diebeshöhle im Wald, die manchmal ungewollten Besuch bekam…\nVon dem Ausgangspunkt aus können verschiedenste Szenarien besucht werden. Städte, Wälder, Meere. Überall, wo sich Überfälle oder Schmuggeltouren lohnen, können wir verschiedenste Türme und Fallen bauen, von Alchemieständen, die am Wegesrand stehen über Giftbombenwerfer bis Turmruinen, die die Schurken besetzen, mit allen Upgrades von Feuerpfeilen bis Magie. Story 2 Wir spielen eine Geschichtenerzählerin. Sie zieht mit einem Jahrmarkt durchs Land und erzählt verschiedene Geschichten. Im Prinzip ist es eine Geschichte, die viele Abschnitte hat: die Geschichte der Glücksfee. Hinter den Kulissen von “Den sieben Geißlein” oder “Rotkäppchen” leitet die Glücksfee ungesehen den Großteil der Probleme, die auf die Geschichte zukommen, um. Schneewittchen z.B. hätte beim Verlassen des Waldes von viel mehr Wildtieren angegriffen werden müssen, aber hatte Glück, weil die Glücksfee Horden von gefährlichen Waldmonstern abgelenkt hat. Die Königin hat nicht nur einen Jäger losgeschickt, sondern haufenweise Kopfgeldjäger, nur der netteste ist an der Glücksfee vorbeigekommen, nachdem er ihr versprach Schneewittchen am Leben zu lassen. Angriffe auf die Zwerge von Monstern in den Minen oder das Abwehren von Assassinen ist auch das Werk der Glücksfee. Selbst am Ende, als der Prinz bei ihr auftauchte, kam er zufällig vorbei, weil alle anderen Kundschafter von der Glücksfee abgewehrt wurden und der Weg zu Schneewittchen für ihn als einziger sicherer Weg durch den Wald galt.\nWir können so jedes Märchen für uns nutzen und einbauen, worauf wir Lust haben, ohne die Modelle der Türme groß anzupassen. Und wegen Urheberrecht: Gebrüder Grimm sollte public-domain sein 😄 (Anmerkung des Lektors: Ja, solange wir den Original-Text nutzen, ist dieser gemeinfrei, denn die Urheber sind länger als 70 Jahre tot.), zumindest kenne ich genug andere Spiele, die das auch nutzen z.B. “Dark Parables” (die halt wirklich die ganzen Märchen durchmachen: Schneewittchen, Dornröschen, Jack und die wundererbse…) es gibt auch ein Gutenberg Projekt (oder so) in dem public-domain texte gehortet werden. Dieser Vorschlag hat den riesigen Vorteil, dass wir beim Design der Türme völlig eskalieren können, von Rotkäppchen Türmen mit Wolfsmotiven bis Rattenfänger Türmen, die Musik machen, oder Eiskönigin Tower, die Eisspeere und Schneestürme verschießen.\nStory 3 (Obsolet) In einem kleinen Walddorf ist es normal, dass alle 5 Jahre eine neue Kräuterfrau in die geheime Magie der Pflanzen und Tiere eingeweiht wird. Es braucht eine natürliche Begabung mit Pflanzen und ein gutes Verständnis der Heilkunde, um dafür infrage zu kommen. Unsere kleine Hexe hat beides. Zudem wird ein gutes Gespür für Magie und ein gesunder Abenteuerdrang benötigt, da man sein Dorf verlässt und die Welt kennenlernt oder genauer genommen einen sehr magischen Teil der Welt. Nach einigen Monaten der Ausbildung lernt man, wie Dinge dazu gebracht werden können, einfache Handlungen von selbst auszuführen, Töpfe, die sich selbst umrühren, Besen, die von selbst fegen, aber auch Bögen, die von selbst Pfeile verschießen. Sobald dieses Wissen gefestigt ist, bricht man auf zu seiner ersten Wanderschaft. Von dem Dorf aus geht es zu einem Breitenzirkel, der sich tief im Wald versteckt. Schlägt man an einem bestimmten Ort ein Lager auf, bittet man damit um Einlass und ein Auflösen der schützenden Magie, die die Druiden Siedlung versteckt hält. Natürlich muss man zuvor den Druiden beweisen, dass man nicht irgendwer ist. Ein normaler, nicht magischer Bürger würde in der Nacht von Wesen aus Laub mitsamt seinem Zelt aus der Lichtung getragen werden und irgendwo in der Wildnis aufwachen. Eine Hexe hingegen kann mit ihren magischen Geschützen diese Laubmonster abwehren. Dort endet die Reise jedoch nicht, es gibt andere Hexen und andere Länder, die man bereisen muss. Sümpfe, Moore, Dschungel, Küsten, Wüsten, sogar die hohe See und ferne Länder…\nHier können wir halt fröhlich alle Terrains einbauen und verschiedenste Magierichtungen mit einbeziehen: Druiden, Hexen, Magier, Heilige, dämonische Kreaturen: alles ist möglich.\n","categories":"","description":"Story-Ideen von unserem Community-Mitglied Tipi.","excerpt":"Story-Ideen von unserem Community-Mitglied Tipi.","ref":"/docs/ideas/story/","tags":"","title":"Story"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"Ein wichtiger Punkt bei jedem Tower Defense Spiel ist das Erfassen, welches Ziel als nächstes angegriffen wird.\nDas übernimmt in unserem Spiel ein TargetLocator-ScriptableObject. Ihn wird es in mehreren Ausführungen geben, aktuell ist nur ein TargetLocator für ballistische Waffen implementiert.\nIm groben läuft das Herausfinden des nächsten Ziels so ab, sofern die Waffe noch kein Ziel hat:\nFinde alle Gegner im Umkreis des Turms (der durch die Waffe selbst bestimmt wird. Schaue, welche der Gegner, die gefunden wurden, auch im passenden Angriffswinkel der Waffe sind. Z.B. kann ein Katapult Gegner treffen, die in einem 90°-Winkel vor der Waffe sind, es kann also nicht seitlich oder nach hinten schießen. Falls Gegner im richtigen Angriffswinkel sind, suche je nach TargetType der Waffe einen Gegner aus. Gegner wurde gefunden und wird solange verfolgt, bis er entweder zerstört wurde oder außerhalb der Angriffsreichweite ist. TargetType Der TargetType bestimmt, welche Art von Gegner bevorzugt wird:\nClosest: Der Gegner, der am nahesten ist. Random: Irgendein Gegner. Diese zwei sind bereits implementiert und können später noch erweitert werden.\n","categories":"","description":"Dokumentation über TargetLocator / Zielerfassung.","excerpt":"Dokumentation über TargetLocator / Zielerfassung.","ref":"/docs/docs-technical/systems/weapons/target-locator/","tags":"","title":"TargetLocator / Zielerfassung"},{"body":"Inhaltsverzeichnis Du bist hier richtig, wenn Du Dich für die Entwicklung interessierst, d.h. Du\nentwickelst Code für das Spiel, entwickelst Erweiterungen für den Unity-Editor, möchtest bestehende Bugs im Spiel beseitigen und/oder möchtest mit Shadern bzw. dem Shader-Graph visuellen Pepp hinzufügen (siehe auch hier) Worauf muss ich achten? Lies Dir die Technische Dokumentation durch. Du musst die korrekte Unity-Version installieren, das ist aktuell Unity 2022.2.14f1. Schaue gerne hier nach, welche Version im Projekt eingesetzt wird, falls vergessen wurde, dieses Dokument zu aktualisieren. Um Unity in dieser Version zu installieren, klicke hier, wenn Du den Unity Hub installiert hast. Alternativ, schaue gerne hier auf der Unity-Seite nach der Version. Unity tendiert gerne dazu, dass es Dinge mitändert, die man nicht oder vermeintlich nicht angefasst hat. Konzentriere Dich daher generell nur auf Deine Aufgabe und prüfe in Git, ob Du auch nur die Sachen committest, die Du auch wirklich geändert hast. Was soll ich nicht tun? Bitte mache folgende Dinge nicht oder nur nach Rücksprache mit einem Ansprechpartner:\nAktualisierung der Unity-Version. Neues Package dem Projekt hinzufügen. Bestehendes Package aktualisieren. Lösche keine Assets oder Szenen, die nicht unmittelbar mit Deiner Aufgabe zu tun haben. Refactoring, Rename kann in Ordnung sein. Füge keine Test-Szenen oder Test-Scripte hinzu. Du kannst diese gerne für Dich erstellen, aber committe und pushe sie nicht. Nutze nicht den alten Unity-Text. Wir setzten ausschließlich auf TextMeshPro. Nutze nicht das alte Unity Input. Wir nutzen ausschließlich das neue Unity Input System. Wo lade ich meine Ergebnisse hin? Im Gegensatz zur kreativen Mitarbeit, arbeitest Du als als Techniker direkt am Unity-Projekt und machst dort Deine Änderungen.\nWas passiert dann? Siehe hier.\nHilfe, ich komme mit Git gar nicht klar Als technischer Mitwirkender musst Du Dir Git soweit aneignen, dass Du es für das Projekt nutzen kannst. :)\nFrag gerne auf dem Discord nach, wenn Du so gar nicht weiter kommst.\nJetBrains Rider Lizenz JetBrains sponsert Fairy Tale Defender mit Lizenzen für JetBrains Rider! Jeder Entwickler, der sich im Projekt regelmäßig engagiert und aktiv ist, kann eine Lizenz für JetBrains Rider erhalten.\n","categories":"","description":"Info über das Mitmachen im technischen Bereich.","excerpt":"Info über das Mitmachen im technischen Bereich.","ref":"/docs/contributing/technical/","tags":"","title":"Technisch mitmachen"},{"body":"In Fairy Tale Defender können wir sowohl für UI-Elemente als auch für GameObjects Tooltips anzeigen. Tooltips sind Hinweistexte/Bilder, die erscheinen, sobald man mit der Maus über bestimmte Elemente fährt.\nUm einen Tooltip zu nutzen, kann eine der Klassen von Tooltip-Typen auf einem GameObject platziert werden. Sobald man das Spiel startet und über das Element fährt, wird der entsprechende Tooltip angezeigt.\nWichtig ist, dass alle GameObjects, die ein Tooltip anzeigen sollen, einen Collider benötigen! Im Moment reagieren die Tooltips auch nur bei Objekten, die auf dem Layer “Tower” sind. Falls weitere benötigt werden, können wir das anpassen.\nBei UI-Elementen funktioniert es direkt, sofern der Canvas einen GraphicsRaycaster hat (per Standard so) und das UI-Element irgendwas hat, was raycast-bar ist (z.B. ein Image).\nAktuell sind folgende Tooltips implementiert. Weitere können bei Bedarf hinzugefügt werden.\nTooltip-Typen TextTooltip Nutzt einen lokalisierbaren String.\n","categories":"","description":"Dokumentation über Tooltips.","excerpt":"Dokumentation über Tooltips.","ref":"/docs/docs-technical/systems/tooltips-system/","tags":"","title":"Tooltips"},{"body":"Auf dieser Seite findet sich die Dokumentation, wie man einen Turm im Spiel erstellen und organisiert ablegen kann. Wichtig zu verstehen ist, dass der Turm selbst keine großartige Funktion hat. Oft würde die Funktion, z.B. von einem Katapult-Turm, direkt “in den Turm” implementiert werden. Wir gehen im Spiel allerdings einen anderen Ansatz und sehen die Waffe als eigenständige Waffe, die die eigentliche Funktion implementiert hat. Der Turm ist nur ein “Etwas”, das die Waffe trägt. Daher ist es wichtig, sich auch den Abschnitt über Waffen durchzulesen.\nOrganisation Prefabs Im Ordner _Game/Prefabs/Buildings/Towers befinden sich alle vom Spieler baubaren Türme. Jeder Turm bekommt hier seinen eigenen Ordner.\nAls Beispiel zeigt das Bild den “CatapultTower”:\nJeder Turm besteht aus drei Prefabs:\nTurmname_Gfx: Beinhaltet die grafische Umsetzung des Turms ohne weitere Scripts. Turmname_Blueprint: Ist eine Variante von Turmname_Gfx, bei dem die Materialen zum Blueprint geändert wurden. Diese Repräsentation wird genutzt, um dem Spieler ein “Geist”-Element anzuzeigen, wo der Turm gebaut werden kann. Im Bild sieht man links den Blueprint/Geist und rechts den gebauten Turm. Turmname: Der eigentliche funktionierende Turm, der im Spiel platziert wird. Er nutzt Tower_Base als Basis-Prefab, Turmname_Gfx für die visuelle Darstellung und eine Waffe. Wie genau alles zusammengestöpselt ist, erklärt der Abschnitt Turmaufbau. ScriptableObject Zu jedem baubaren Turm gehört ein ScriptableObject, das im Ordner _Game/ScriptableObjects/Buildings/Towers abgelegt wird.\nIn diesem ScriptableObject stehen aktuell nur, welches Prefab gebaut werden kann und welches Prefab als Blueprint dient.\nTurmaufbau Im weiteren wird beschrieben, wie die drei Prefabs für einen Turm aufgebaut sind.\nGfx-Prefab Basis-Prefab. Beinhaltet direkt das Modell oder Modelle für die visuelle Repräsentation. Beinhaltet ein leeres GameObject “Weapon” das dort platziert ist, wo später die Waffe vom Turm stehen wird. Blueprint-Prefab Varianten-Prefab vom obigen Gfx-Prefab. Hier werden alle Materialen (sofern nötig) zum Blueprint-Material geändert. Sollte der Turm irgendwelche Effekte haben, die wir im Baumodus nicht benötigen, dann können sie hier ausgeschaltet werden. In das GameObject Weapon wird jetzt die visuelle Repräsentation einer Waffe gelegt (siehe Waffenaufbau. Turm-Prefab Varianten-Prefab von Tower_Base. In das GameObject GFX wird das Gfx-Prefab (siehe oben) abgelegt. Beinhaltet alle Scripts, um den Turm zum Leben zu erwecken. ","categories":"","description":"Dokumentation über Türme.","excerpt":"Dokumentation über Türme.","ref":"/docs/docs-technical/systems/towers/","tags":"","title":"Towers"},{"body":"Allgemeine Ideen Kanonenturm Feuert auf ein einzelnes Ziel Katapultturm Flächenschaden Balisteturm Gut gegen Rüstung Trebuchetturm Ähnlich wie Katapult Mehr Schaden, langsamere Feuerrate Feuer/Wasser/Luft/Erde Turm Falls Magie in dieser Form einer Rolle spielt Eisturm Verlangsamung Ideen vom Livestream am 13.11.2022 Weitere Turmideen: Blizzardturm Erdwurzelturm Blitzturm Wandturm: Luft: Pustet Gegner weg (nehmen anderen Weg) Erdwurzel: Hält kleine und mittlere Gegner auf Wasser: Lässt nur gerüstete oder große Gegner durch Feuer: Lässt nur Luftgegner durch Idee von Wodan im Discord: Türme haben “Personal” als Ressource\nJe mehr Personal pro Turm, umso schneller könnte dieser wieder feuerbereit gemacht werden, schneller ausgerichtet (rotiert) werden usw.\nDazu könnte man dann auch das Personal pro Level erstmal begrenzen und über Forschung weiter erhöhen, oder auch das benötigte Personal verringern.\nAbgesehen von “normalem Personal” wären auch Magier denkbar\nTürme sollen über folgende Attribute verfügen können: Maximal 3 Upgrades -\u003e Turmupgrade deaktiviert den Turm für eine gewisse Zeit\nAnzahl der Ziele: Einzel-, Mehrfachziel oder Flächenschaden\nZieltyp: Boden, Lufteinheiten\nMindestreichweite (Abstand zum Turm, darunter kann kein Gegner getroffen werden): Wenig, Mittel, Hoch\nMaximale Reichweite: Nahkampf, Kurz, Mittel, Weit\nAngriffswinkel: Die Breite der Fläche innerhalb der ein Turm angreifen kann in Grad.\nRotationsgeschwindigkeit des Turmes bzw der Einheit darauf: Langsam, Mittel, Schnell\nFeuerrate: Langsam, Mittel, Schnell\nAngriffskraft: Schwach, Mittel, Stark\nTreffergenauigkeit: Niedrig, Mittel, Hoch\nTreffereffekte: Umwerfen (Gegner kurzzeitig bewegungsunfähig), Verlangsamen, Schaden über Zeit\nModifikatoren: Gift, Rüstungsdurchdringung, Feuer (Chance Gegner in Brand zu setzen, Feuerrate könnte langsamer werden, ebenso Treffergenauigkeit abnehmen)\nAllgemein sollten Modifikatoren ebenso eine negative Auswirkung haben, z.B. auch Geldkosten um zeitweise zu aktivieren. Türme evtl. zu Gruppen zusammenfassbar wie in RTS Spielen um Modifikatoren für diese auf einmal zu aktivieren. Angriffsmodus (Priorisiertes Ziel): Nächster Gegner, Weitestentfernter Gegner, Zufällig, Höchste Lebenspunkte, Stärkste Rüstung, Schwächste Rüstung, Boden- oder Flugeinheit\nTabelle Kanonen Bogenschützen Katapult Trebuchet Anzahl der Ziele Einzelziel Mehrfachziele Flächenschaden Flächenschaden Zieltyp Boden Boden, Luft Boden Boden Min. Reichweite Mittel Wenig Mittel Hoch Max. Reichweite Mittel Kurz Mittel (mehr als Kanonenturm) Hoch Angriffswinkel 360° 360° 60° 25° Rotationsgeschwindigkeit Mittel Schnell Mittel Niedrig Feuerrate Mittel Schnell Langsam Langsam (langsamer als Katapult) Angriffskraft Mittel Schwach Hoch Hoch (mehr als Katapult) Genauigkeit Mittel Hoch Mittel Niedrig Effekte Umwerfen Verlangsamen Umwerfen Umwerfen Modifikatoren Feuer, Rüstungsdurchdringung, Gift Feuer Feuer ","categories":"","description":"Turmideen","excerpt":"Turmideen","ref":"/docs/ideas/towers/","tags":"","title":"Türme"},{"body":"Du bist hier richtig, wenn Du Dich visuell am Projekt beteiligen möchtest, d.h. Du\nmodellierst 3D-Modelle, erstellst 2D-Grafiken, -Icons, UI-Designs oder möchtest mit Shadern bzw. dem Shader-Graph visuellen Pepp hinzufügen (siehe auch hier) Worauf muss ich achten? Lese Dir vorab die visuelle Dokumentation durch.\nWo lade ich meine Ergebnisse hin? Du kannst Deine Ergebnisse im Ordner _contributing/visual ablegen. Hier erstellst Du einen Ordner mit Deinem Benutzernamen und dort drin je nach Bedarf weitere Ordner (falls Du z.B. an mehrere Modellen gearbeitet hast).\nWichtig ist, dass Du einmal die Original-Datei hochlädst (sodass jemand anders es weiterbearbeiten kann, falls es nötig ist) und Dein 3D-Modell als .fbx oder Deine 2D-Arbeit als .png.\nBitte achte auch darauf, dass Deine Dateien bereits optimiert sind, unnötige Sachen entfernt sind, etc. Original-Dateien tendieren oft dazu, recht schnell groß zu werden. Git und große Dateien sind nicht unbedingt Freunde, je mehr Du daher optimierst, umso besser.\nFalls Du Dir unsicher bist, frag gerne auf dem Discord nach.\nBeispiel Wenn Dein Benutzername DerMusterMensch ist und Du ein Baum-Modell erstellt hast, dann würdest Du den Ordner _contributing/visual/DerMusterMensch/Baum anlegen und dort zwei Dateien hochladen:\nBaum.blendfile Baum.fbx Was passiert dann? Siehe hier.\nHilfe, ich komme mit Git gar nicht klar Als kreativer Mensch hat man oft noch keinen Berührungspunkt mit dem sehr technischen Git gehabt. Spreche bitte einen Ansprechpartner an, eventuell kann er die Arbeit mit Git für Dich übernehmen.\nFür die Erweiterung Deiner Skills ist’s natürlich cool, wenn Du Dir Git aneignest.\n","categories":"","description":"Info über das Mitmachen im visuellen Bereich.","excerpt":"Info über das Mitmachen im visuellen Bereich.","ref":"/docs/contributing/visual/","tags":"","title":"Visuell (3D, 2D) mitmachen"},{"body":"Auf dieser Seite finden sich alle Informationen zu den im Spiel implementierten Waffen und wie man neue Waffen erstellen kann. Wichtig ist, dass mit Waffe nicht der Turm gemeint ist. Der Turm ist eine recht dümmliche Struktur, die nur zum Tragen einer Waffe dient.\nDie Waffe implementiert die Funktion, um z.B. ein Katapult zum Abschuss zu bringen. Daher unterscheiden wir die Waffen nach ihrer Art, z.B. ballistische Waffen (Katapult), direkte Waffen (Gewehre), etc.\nOrganisation Ähnlich wie Türme bestehen Waffen aus Prefabs und ScriptableObjects.\nPrefabs Im Ordner _Game/Prefabs/Weapons befinden sich alle Waffen. Jede Waffe bekommt hier einen eigenen Ordner.\nAls Beispiel zeigt das Bild das “Catapult”:\nJede Waffe besteht aus zwei Prefabs:\nWaffenname_Gfx: Beinhaltet die grafische Umsetzung der Waffe ohne weitere Scripts. Waffenname: Ist eine Variante von Weapon_Base und beinhaltet alle Scripts, um die Waffe zum Leben zu erwecken. Er nutzt Waffenname_Gfx für die visuelle Repräsentation. ScriptableObject Zu jeder Waffe gehört ein ScriptableObject, das im Ordner _Game/ScriptableObjects/Weapons abgelegt wird.\nIn diesem ScriptableObject werden alle Parameter für eine Waffe festgehalten, z.B.\nReichweite Mindestreichweite Angriffswinkel etc. Diese Werte sind als Basiswerte zu verstehen und werden später durch Forschung verbessert werden können.\nWaffenaufbau Gfx-Prefab Basis-Prefab. Beinhaltet direkt das Modell oder Modelle für die visuelle Repräsentation. Waffe-Prefab Varianten-Prefab von Weapon_Base. Beinhaltet alle Scripts, um die Waffe zum Leben zu erwecken. Eine Waffe nutzt je nach Waffenart ein bestimmtes Script. z.B. benutzt eine ballistische Waffe das Script BallisticWeapon. Hier wird das ScriptableObject für die Waffendefinition verknüpft (siehe oben als auch ein Target Locator. Zusätzlich wird das Prefab für ein Projektil bestimmt. ","categories":"","description":"Dokumentation über Waffen.","excerpt":"Dokumentation über Waffen.","ref":"/docs/docs-technical/systems/weapons/","tags":"","title":"Waffen"},{"body":"Die Idee der Gruppierung in Waffenarten ist, dass man ähnliche Waffen nicht mehrfach implementieren muss. Ein Beispiel wäre ein Katapult und ein Trebuchet. Beides sind ballistische Waffen, die in ihrer Grundfunktion gleich sind: Sie schleudern ein Projektil auf den Gegner. Der Unterschied ist am Ende nur etwas in der Animation, (Mindest-)Reichweite und Stärke. Ansonsten sind diese Waffen gleich. Es wäre daher nicht gut, wenn wir beide Waffen jedes mal von Grund auf implementieren müssten.\nIm Ideallfall nutzen beide das gleiche Script für eine ballistische Waffe und unterscheiden sich nur in den Parametern und natürlich im visuellen Modell.\nBallistische Waffen Zu ballistischen Waffen gehören z.B. Katapulte, Trebuchets, etc. - alles, was ein Projektil durch die Luft schleudert. Charakteristisch für diese Waffen ist oft, dass sie ungenau sind, aber dafür Flächenschaden anrichten. Auch sind sie oft recht langsam und das Projektil benötigt einige Zeit, um das Ziel zu treffen. Für ballistische Waffen exitiert ein ScriptableObject vom Typ BallisticWeaponSO.\nBeispiel vom Katapult:\nProjektile Ballistische Waffen verschießen Projektile, die aktuell so implementiert sind, dass sie physikalisch korrekt fliegen. Ein Projektil hat einen dynamischen Rigidbody und wird durch die Gravitation nach unten gezogen. Beim Start ein Projektiles wird einmalig die Abschussgeschwindigkeit (Velocity) bestimmt, anhand derer das Projektil zu seinem Zielpunkt fliegt.\n","categories":"","description":"Dokumentation über Waffenarten.","excerpt":"Dokumentation über Waffenarten.","ref":"/docs/docs-technical/systems/weapons/weapon-types/","tags":"","title":"Waffenarten"}]