<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fairy Tale Defender – Waffen</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/</link><description>Recent content in Waffen on Fairy Tale Defender</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><atom:link href="https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: TargetLocator / Zielerfassung</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/target-locator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/target-locator/</guid><description>
&lt;p>Ein wichtiger Punkt bei jedem Tower Defense Spiel ist das Erfassen, welches Ziel als nächstes angegriffen wird.&lt;/p>
&lt;p>Das übernimmt in unserem Spiel ein TargetLocator-ScriptableObject.
Ihn wird es in mehreren Ausführungen geben, aktuell ist nur ein TargetLocator für ballistische Waffen implementiert.&lt;/p>
&lt;p>Im groben läuft das Herausfinden des nächsten Ziels so ab, sofern die Waffe noch kein Ziel hat:&lt;/p>
&lt;ol>
&lt;li>Finde alle Gegner im Umkreis des Turms (der durch die &lt;a href="../">Waffe&lt;/a> selbst bestimmt wird.&lt;/li>
&lt;li>Schaue, welche der Gegner, die gefunden wurden, auch im passenden Angriffswinkel der Waffe sind.
Z.B. kann ein Katapult Gegner treffen, die in einem 90°-Winkel vor der Waffe sind, es kann also nicht seitlich oder nach hinten schießen.&lt;/li>
&lt;li>Falls Gegner im richtigen Angriffswinkel sind, suche je nach &lt;a href="#TargetType">TargetType&lt;/a> der Waffe einen Gegner aus.&lt;/li>
&lt;li>Gegner wurde gefunden und wird solange verfolgt, bis er entweder zerstört wurde oder außerhalb der Angriffsreichweite ist.&lt;/li>
&lt;/ol>
&lt;h2 id="targettype">TargetType&lt;/h2>
&lt;p>Der TargetType bestimmt, welche Art von Gegner bevorzugt wird:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Closest&lt;/code>: Der Gegner, der am nahesten ist.&lt;/li>
&lt;li>&lt;code>Random&lt;/code>: Irgendein Gegner.&lt;/li>
&lt;/ul>
&lt;p>Diese zwei sind bereits implementiert und können später noch erweitert werden.&lt;/p></description></item><item><title>Docs: Waffenarten</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/weapon-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/weapon-types/</guid><description>
&lt;p>Die Idee der Gruppierung in Waffenarten ist, dass man ähnliche Waffen nicht mehrfach implementieren muss.
Ein Beispiel wäre ein Katapult und ein Trebuchet.
Beides sind ballistische Waffen, die in ihrer Grundfunktion gleich sind: Sie schleudern ein Projektil auf den Gegner.
Der Unterschied ist am Ende nur etwas in der Animation, (Mindest-)Reichweite und Stärke.
Ansonsten sind diese Waffen gleich.
Es wäre daher nicht gut, wenn wir beide Waffen jedes mal von Grund auf implementieren müssten.&lt;/p>
&lt;p>Im Ideallfall nutzen beide das gleiche Script für eine ballistische Waffe und unterscheiden sich nur in den Parametern und natürlich im visuellen Modell.&lt;/p>
&lt;h2 id="ballistische-waffen">Ballistische Waffen&lt;/h2>
&lt;p>Zu ballistischen Waffen gehören z.B. Katapulte, Trebuchets, etc. - alles, was ein Projektil durch die Luft schleudert.
Charakteristisch für diese Waffen ist oft, dass sie ungenau sind, aber dafür Flächenschaden anrichten.
Auch sind sie oft recht langsam und das Projektil benötigt einige Zeit, um das Ziel zu treffen.
Für ballistische Waffen exitiert ein ScriptableObject vom Typ &lt;code>BallisticWeaponSO&lt;/code>.&lt;/p>
&lt;p>Beispiel vom Katapult:&lt;/p>
&lt;p>&lt;img src="../assets/weapon-so.png" alt="Katapult">&lt;/p>
&lt;h3 id="projektile">Projektile&lt;/h3>
&lt;p>Ballistische Waffen verschießen Projektile, die aktuell so implementiert sind, dass sie physikalisch korrekt fliegen.
Ein Projektil hat einen dynamischen Rigidbody und wird durch die Gravitation nach unten gezogen.
Beim Start ein Projektiles wird einmalig die Abschussgeschwindigkeit (Velocity) bestimmt, anhand derer das Projektil zu seinem Zielpunkt fliegt.&lt;/p>
&lt;h4 id="schaden">Schaden&lt;/h4>
&lt;p>Bei Kollision fügen Projektile Gegnern Schaden zu. Dazu benötigt jedes Projektil eine weitere Komponente, die das Interface IDealDamageOnCollision implementiert.&lt;/p>
&lt;p>Hierfür gibt es derzeit 2 Implementierungen:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Einzelschaden: Die Komponente SingleTargetDamageOnCollision trifft nur genau das Ziel, mit dem das Projektil kollidiert.
&lt;img src="../assets/single-target-damage-on-collision-component.png" alt="Einzelschaden">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Flächenschaden: Die Komponente AreaDamageOnCollision nutzt einen SphereCast um potenziell mehreren Gegnern im gegebenen Radius vom Ort der Kollision Schaden zuzufügen.&lt;br>
&lt;img src="../assets/area-damage-on-collision-component.png" alt="Flächenschaden">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Anschließend wird in beiden Fällen das GameObject welches das Projektil darstellt gelöscht.&lt;/p></description></item></channel></rss>