<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fairy Tale Defender – Dokumentation</title><link>https://docs.fairytaledefender.de/docs/</link><description>Recent content in Dokumentation on Fairy Tale Defender</description><generator>Hugo -- gohugo.io</generator><language>de-de</language><atom:link href="https://docs.fairytaledefender.de/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Game-Design-Document: Rotkäppchen</title><link>https://docs.fairytaledefender.de/game-design-document/story/rotkaeppchen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/story/rotkaeppchen/</guid><description>
&lt;p>Der Spieler nimmt die Rolle einer Glücksfee ein.
Sie begleitet bekannte Märchen (in diesem Fall Rotkäppchen) und hilft dabei, dass die Geschichte so verläuft, wie wir sie kennen.&lt;/p>
&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Wir haben unseren kleinen Zirkus-Wahrsagerwagen und die Glücksfee, in Gestalt einer bunt gekleideten Frau mittleren Alters, erzählt nach Auswahl der Geschichte:
&amp;ldquo;Ah, das gute Rotkäppchen. Es gibt viele Wege, wie die Geschichte hätte verlaufen können.
Das Glück musste ganz schön nachhelfen, damit sie so stattfindet, wie wir sie heute kennen.&amp;rdquo;.&lt;/p>
&lt;blockquote>
&lt;p>Umblende vom Standbild und Text zur Schlachtkarte&lt;/p>
&lt;/blockquote>
&lt;h2 id="level-1">Level 1&lt;/h2>
&lt;blockquote>
&lt;p>Wölfe&lt;/p>
&lt;/blockquote>
&lt;p>Rotkäppchen besuchte ihre Großmutter regelmäßig.
Die Tiere des Waldes bemerkten diese Regelmäßigkeit.
Rotkäppchen störte es nur wenig, dass Vögel und Rehe sie erwarteten oder ihr folgten, um Brotkrümel zu essen, die sie manchmal verlor.
Von den Tieren und dem regelmäßigen Fleischgeruch wurden aber auch Wölfe angelockt und lauerten ihr auf.
Aber wie ihr wisst, hat irgendwas das Rudel vertrieben, sodass nur der größte Wolf am Ort des Hinterhaltes auf sie lauerte.&lt;/p>
&lt;blockquote>
&lt;p>Wald-Karte, Wölfe abwehren&lt;/p>
&lt;/blockquote>
&lt;h2 id="level-2">Level 2&lt;/h2>
&lt;blockquote>
&lt;p>Banditen&lt;/p>
&lt;/blockquote>
&lt;p>Die Hütte der Großmutter ist aber auch bekannt und das Rotkäppchen Wein und gutes Essen mitbringt, lockt noch andere Interessenten an.
Banditen haben in letzter Zeit öfter das Haus besucht und Kleinigkeiten geklaut.
Jetzt mit dem Wissen, dass Rotkäppchen regelmäßig zu Besuch kommt, planen sie einen Überfall.&lt;/p>
&lt;blockquote>
&lt;p>Wald-Karte, Banditen abwehren&lt;/p>
&lt;/blockquote>
&lt;h2 id="level-3">Level 3&lt;/h2>
&lt;blockquote>
&lt;p>Jäger retten&lt;/p>
&lt;/blockquote>
&lt;p>Nachdem der große böse Wolf alleine bei der Hütte der Großmutter angekommen war, aber Wegelagerer und Raubtiere vertrieben worden waren, musste sich die Glücksfee darum kümmern, dass der Jäger bei der Hütte ankam.
Auch ihm wurde im Wald aufgelauert.
Einige Soldaten wollten ihn wegen Wilderei einsperren, aber auch Banditen hatten Interesse an den teuren Fellen und dem Fleisch, das er bei sich in der Hütte hatte.&lt;/p>
&lt;blockquote>
&lt;p>Wald-Karte, hügelige Umgebung, Jägerhütte&lt;/p>
&lt;/blockquote>
&lt;h2 id="level-4">Level 4&lt;/h2>
&lt;blockquote>
&lt;p>Hütte beschützen&lt;/p>
&lt;/blockquote>
&lt;p>Nachdem der Jäger sicher an der Hütte angekommen war, von der Glücksfee erst verteidigt und dann in die richtige Richtung geleitet worden war, traf er auf den bösen Wolf und rettete die beiden Frauen.
Das sie danach aber sehr geschwächt waren, ist wohl verständlich.
Auch dass der Jäger sich beim Kampf mit dem großen bösen Wolf ziemlich verausgabte, ist klar.
Die Nacht jedoch hatte nicht die Freundlichkeit sie in Ruhe zu lassen.
Im Gegenteil.
Der Kampf lockte nur noch mehr Wesen an, die sehen wollten was noch übrig war.&lt;/p>
&lt;blockquote>
&lt;p>Wald-Karte, bei Nacht, ähnlich Karte 2, aber mehr Wege und größer&lt;/p>
&lt;/blockquote></description></item><item><title>Game-Design-Document: Übersicht</title><link>https://docs.fairytaledefender.de/game-design-document/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/overview/</guid><description>
&lt;p>Dieses Dokument sollte von allen gelesen werden, die Interesse haben, bei der Entwicklung und beim Testen des Spiels mitzuhelfen.
Es beschreibt das Design für Fairy Tale Defender.&lt;/p>
&lt;h2 id="titel">Titel&lt;/h2>
&lt;ul>
&lt;li>Fairy Tale Defender&lt;/li>
&lt;/ul>
&lt;h2 id="genre">Genre&lt;/h2>
&lt;ul>
&lt;li>Strategie&lt;/li>
&lt;li>Tower Defense&lt;/li>
&lt;/ul>
&lt;h2 id="setting">Setting&lt;/h2>
&lt;ul>
&lt;li>Mittelalter/Fantasy&lt;/li>
&lt;/ul>
&lt;h2 id="plattformen">Plattformen&lt;/h2>
&lt;ul>
&lt;li>Windows &amp;gt;= 10&lt;/li>
&lt;li>macOS &amp;gt;= 12&lt;/li>
&lt;li>Linux (64-Bit-Versionen)&lt;/li>
&lt;/ul>
&lt;h2 id="verteilung">Verteilung&lt;/h2>
&lt;ul>
&lt;li>Kostenfrei auf Steam&lt;/li>
&lt;/ul>
&lt;h2 id="technologie">Technologie&lt;/h2>
&lt;ul>
&lt;li>Unity 2022 LTS
&lt;ul>
&lt;li>3D URP&lt;/li>
&lt;li>Shader Graph&lt;/li>
&lt;li>Input System&lt;/li>
&lt;li>Jobs/Burst&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Game-Design-Document: Loop-basierter Ablauf</title><link>https://docs.fairytaledefender.de/game-design-document/gameplay/loop-gameplay/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/gameplay/loop-gameplay/</guid><description>
&lt;h2 id="loop-basiertes-gameplay">Loop-basiertes Gameplay&lt;/h2>
&lt;p>Ein Level hat 20, 30, 40, 50, Wellen. Für Progress (sprich um Weiterzukommen) muss der Spieler die ersten 20 Wellen schaffen,
bekommt dann ein neues Level freigeschaltet. Weitere Freischalten bei 30, &amp;hellip;, 50 Wellen sind z.B. Achievementsterne.
Hat den Vorteil, dass der Spieler Progress machen kann, aber auch zum Achievement-Jagen ermutigt wird, &amp;ldquo;alte&amp;rdquo; Level
erneut zu spielen.&lt;/p>
&lt;p>Holt eventuell auch den Casual-Spieler ab, da er nicht gezwungen ist, permanent Levels erneut zu spielen.&lt;/p>
&lt;p>Es wird keinerlei &amp;ldquo;Reset&amp;rdquo;/Prestige-Mechanik geben.&lt;/p></description></item><item><title>Docs: Roadmap</title><link>https://docs.fairytaledefender.de/docs/roadmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/roadmap/</guid><description>
&lt;p>Die Roadmap beschreibt sehr grob den Ablauf des Projektes und die Punkte, die wir erreichen wollen.&lt;/p>
&lt;p>Oft werden Roadmaps auch mit einem Datum versehen, wann ungefähr was fertig sein soll.
Auf ein Terminieren verzichten wir hier bewusst, da wir uns die Zeit nehmen, die wir brauchen.&lt;/p>
&lt;h2 id="phasen">Phasen&lt;/h2>
&lt;p>In diesem Abschnitt folgt eine sehr grobe Definition, welche Phasen durchlaufen werden.
Ein Pfeil markiert, an welcher Stelle wir uns aktuell befinden.&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Findung des Genres: Entscheidung der Community: &lt;strong>Tower Defense&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Findung des Themas: Entscheidung der Community: &lt;strong>Mittelalter&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;del>Findung des Stils&lt;/del>&lt;/p>
&lt;p>&lt;del>Hier werden wir auf Basis des Themas versuchen, einen grafischen Stil zu finden, an dem sich die kreativen Köpfe orientieren sollen.&lt;/del>&lt;/p>
&lt;p>Die Stilfindung wird zu einem späteren Zeitpunkt stattfinden, sobald das GDD etwas Inhalt und man durch den MVP erste kleine Dinge implementiert hat.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Erstellung des Game Design Documents. &lt;code>&amp;lt;-&lt;/code>&lt;/p>
&lt;p>Hier halten wir grob fest, was genau wir eigentlich für ein Spiel entwickeln wollen.
Hier drin werden wir auch den MVP (siehe weiter unten) definieren.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Implementierung der Basis-Infrastruktur. &lt;code>&amp;lt;-&lt;/code>&lt;/p>
&lt;p>Das hier wird bereits parallel zum aktuellen &amp;ldquo;Pfeil&amp;rdquo; mitlaufen, da diese Basis unabhängig vom Spieltyp ist und bereits implementiert werden kann.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Umsetzung des MVPs. &lt;code>&amp;lt;-&lt;/code>&lt;/p>
&lt;p>Das bedeutet natürlich, dass hier modelliert, designt, entwickelt, getestet, etc. wird.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>Jeden einzelnen Punkt werden wir im Laufe der Zeit weiter und genauer ausarbeiten, sobald wir die jeweilige Phase erreichen.&lt;/p>
&lt;p>Nach &lt;strong>Punkt 3&lt;/strong> können wir uns auch an eine Namensfindung machen.&lt;/p>
&lt;p>Ab &lt;strong>Punkt 6&lt;/strong>, also wenn&amp;rsquo;s vom Spiel quasi was zu sehen gibt, können wir bereits das Spiel in einen Beta-Branch auf Steam deployen, sodass jeder, der dann einen Steam Key hat (wie hier die Verteilung aussieht, müssen wir noch schauen), den aktuellen Stand laden und testen kann.&lt;/p>
&lt;h2 id="mvp">MVP&lt;/h2>
&lt;p>Mit einem MVP, kurz für Minimal Viable Product, wird versucht herauszufinden, ob es für ein gewisses Spiel einen Markt bzw. Zielgruppe gibt.
Das ist natürlich dann interessant, wenn man mit einem Spiel einen finanziellen Erfolg erreichen möchte.
Merkt man durch den MVP, dass sich niemand für das Spiel interessiert, kann es sein, dass die Idee nicht gut ist und man über das Spiel nochmal nachdenken muss.&lt;/p>
&lt;p>In unserem Fall ist das ein bisschen anders, da wir das Spiel kostenfrei zur Verfügung stellen werden und es vor allem auch um den Lernfaktor geht für jeden, der mitmachen möchte.
Daher müssen wir keine &amp;ldquo;Forschung&amp;rdquo; betreiben, ob unser Spiel auf einen Markt trifft und einen finanziellen Erfolg bedeuten könnte.&lt;/p>
&lt;p>Nichtsdestotrotz beschreibt ein MVP eben die kleinste Umsetzung der Kernidee.&lt;/p>
&lt;h3 id="mvp-tower-defense">MVP Tower Defense&lt;/h3>
&lt;p>Ziel des MVPs für ein Tower Defense ist es, einen ersten Game Loop zu erreichen.
Dieser könnte wie folgt aussehen.&lt;/p>
&lt;ul>
&lt;li>Spiel starten (Spieler landet direkt auf einer Map)&lt;/li>
&lt;li>Spieler sieht einen Weg, links ein Portal, rechts unsere Basis.&lt;/li>
&lt;li>Gegner spawnen im Interval und laufen den Weg entlang.&lt;/li>
&lt;li>Spieler kann 1-2 verschiedene Türme bauen.&lt;/li>
&lt;li>Türme schießen auf den Gegner.&lt;/li>
&lt;li>Werden alle Gegner besiegt -&amp;gt; Gewonnen&lt;/li>
&lt;li>Erreichen die Gegner unsere Basis -&amp;gt; Verloren&lt;/li>
&lt;/ul>
&lt;p>Wenn wir diesen MVP erreicht haben, haben wir bereits einiges umgesetzt.&lt;/p>
&lt;p>Natürlich gibt&amp;rsquo;s hier viele Dinge noch nicht, Menüs, Optionen, Map-Auswahl, und und und.
Das ist zu diesem Zeitpunkt auch noch nicht wichtig und wird nach dem MVP angegangen.
Natürlich kann, wenn sich genug beteiligen, auch in der MVP-Phase bereits eine Implementierung von Menüs, Optionen etc. geschehen.
Bei gewissen Implementierungen kommt man sich hier ja auch nicht in die Quere.&lt;/p>
&lt;p>Wichtig ist, dass das Hauptfokus bei der Umsetzung des Game Loops ist, denn nur mit diesem kann das Spiel letzendlich auch gespielt werden. :)&lt;/p></description></item><item><title>Docs: Screenshots-Historie</title><link>https://docs.fairytaledefender.de/docs/screenshots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/screenshots/</guid><description>
&lt;p>Klicke Screenshots an, um sie zu vergrößern.&lt;/p>
&lt;h2 id="27042023">27.04.2023&lt;/h2>
&lt;div class="td-card-deck card-deck mb-4">
&lt;div class="td-card card mb-4">
&lt;div class="card-header">
Main Menu
&lt;/div>
&lt;div class="card-body">
&lt;p class="card-text">
&lt;a href="assets/2023-04-27/main-menu.png">&lt;img src="assets/2023-04-27/main-menu.png" alt="Main Menu">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="td-card card mb-4">
&lt;div class="card-header">
Level 1
&lt;/div>
&lt;div class="card-body">
&lt;p class="card-text">
&lt;a href="assets/2023-04-27/level-1.png">&lt;img src="assets/2023-04-27/level-1.png" alt="Level 1">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="td-card card mb-4">
&lt;div class="card-header">
Credits
&lt;/div>
&lt;div class="card-body">
&lt;p class="card-text">
&lt;a href="assets/2023-04-27/credits.png">&lt;img src="assets/2023-04-27/credits.png" alt="Credits">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;h2 id="07042023">07.04.2023&lt;/h2>
&lt;div class="td-card-deck card-deck mb-4">
&lt;div class="td-card card mb-4">
&lt;div class="card-header">
Main Menu
&lt;/div>
&lt;div class="card-body">
&lt;p class="card-text">
&lt;a href="assets/2023-04-07/main-menu.png">&lt;img src="assets/2023-04-07/main-menu.png" alt="Main Menu">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="td-card card mb-4">
&lt;div class="card-header">
Level 1
&lt;/div>
&lt;div class="card-body">
&lt;p class="card-text">
&lt;a href="assets/2023-04-07/level-1.png">&lt;img src="assets/2023-04-07/level-1.png" alt="Level 1">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="td-card card mb-4">
&lt;div class="card-header">
Credits
&lt;/div>
&lt;div class="card-body">
&lt;p class="card-text">
&lt;a href="assets/2023-04-07/credits.png">&lt;img src="assets/2023-04-07/credits.png" alt="Credits">&lt;/a>
&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Game-Design-Document: Terrain</title><link>https://docs.fairytaledefender.de/game-design-document/gameplay/terrain/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/gameplay/terrain/</guid><description>
&lt;p>Die Karten innerhalb der verschiedenen Level sind grundsätzlich rasterbasiert. Dabei handelt es sich nicht um flache Karten, sondern es sollen auch bergige Welten möglich sein.
Es sollen abrupte größere Sprünge in der Höhe möglich sein, wie z.B. bei Bergen, um die Höhenunterschiede nicht ausschließlich kontinuierlich in Stufen zu gestalten. Damit würde die Landschaft nicht vollkommen homogen aussehen und etwas mehr Abwechslung für das Auge bieten.&lt;/p>
&lt;p>Die einzelnen Wege werden ebenfalls auf diesem Raster platziert, andere Dekoelemente wie Bäume hingegen sollen absolut frei von Designern platziert werden können.&lt;/p>
&lt;p>Eventuell wird die Höhe auch Auswirkungen auf z.B. Türme und deren Schussfertigkeit haben, steht zu diesem Zeitpunkt aber noch nicht fest.&lt;/p></description></item><item><title>Game-Design-Document: Rasterbasiertes Bauen</title><link>https://docs.fairytaledefender.de/game-design-document/gameplay/construction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/gameplay/construction/</guid><description>
&lt;h2 id="rasterbasiertes-bauen-grid-based-building">Rasterbasiertes Bauen (Grid based building)&lt;/h2>
&lt;p>Die Spielenden sollen &lt;a href="../../../docs/ideas/towers/">Türme&lt;/a> nicht völlig frei platzieren können, d.h. sie können die Türme nicht pixelweise verschieben.
Stattdessen darf nur eine freie Position auf einem Raster gewählt werden, außerhalb der gegnerischen Laufpfade.&lt;/p>
&lt;p>Sobald eine Position gewählt und ein Turm errichtet wurde, gilt das Feld auf dieser Position als besetzt und es kann kein weiterer Turm mehr darauf gebaut werden.&lt;/p>
&lt;p>Ob ein Turm auch eine größere Fläche als ein einzelnes Feld belegen kann, steht zu diesem Zeitpunkt noch nicht fest.&lt;/p>
&lt;p>Beispiele mit ähnlichen Systemen wären die Spiele Parkitect, Rimworld, Prison Architect uvm.&lt;/p></description></item><item><title>Game-Design-Document: Ressourcenmanagement</title><link>https://docs.fairytaledefender.de/game-design-document/gameplay/resource-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/gameplay/resource-management/</guid><description>
&lt;h2 id="resourcen-management">Resourcen Management&lt;/h2>
&lt;p>Es wird &amp;ldquo;nur&amp;rdquo; Münzen für das Bauen von Türmen/Upgrades geben.&lt;/p>
&lt;p>Für das Töten von Gegnern bekommt man x Münzen, die man einsetzen kann.&lt;/p>
&lt;p>Eventuell wird es spezielle Ressourcenfelder in Leveln gegeben, die dann die Türme buffen. Zum Beispiel könnte ein
Bogenschütze, der auf Lava steht, Feuerpfeile verschießen.&lt;/p></description></item><item><title>Game-Design-Document: Türme</title><link>https://docs.fairytaledefender.de/game-design-document/gameplay/towers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/gameplay/towers/</guid><description>
&lt;p>Der Spieler kann ausschließlich Türme bauen.
Rekrutieren von Einheiten ist nicht vorgesehen.&lt;/p>
&lt;p>Welche Türme im Spiel vorkommen, ist noch nicht bekannt.
Einige Ideen finden sich &lt;a href="../../../docs/ideas/towers/">hier&lt;/a>.&lt;/p></description></item><item><title>Game-Design-Document: Gegner</title><link>https://docs.fairytaledefender.de/game-design-document/gameplay/enemies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/gameplay/enemies/</guid><description>
&lt;h2 id="wellen">Wellen&lt;/h2>
&lt;p>Typisch für ein Tower Defense Spiel ist, dass Gegner in Wellen erscheinen.
Anfängliche Wellen starten mit leichteren Gegnern.
Je länger ein Spieler durchhält, umso schwerer werden die Gegner in jeder Welle.&lt;/p>
&lt;p>&amp;ldquo;Schwer&amp;rdquo; in diesem Zusammenhang bedeutet, dass ein Gegner mehr Lebenspunkte, mehr Rüstung oder z.B. höhere Elementar-Widerstände hat.
Zum aktuellen Zeitpunkt ist noch nicht klar, welche Attribute ein Gegner haben wird.
Zu keinem Zeitpunkt kann der Gegner den Spieler bzw. die Türme des Spielers angreifen.&lt;/p>
&lt;h2 id="arten-von-gegner">Arten von Gegner&lt;/h2>
&lt;ul>
&lt;li>Bodeneinheiten&lt;/li>
&lt;li>Lufteinheiten&lt;/li>
&lt;li>Mini-Bosse&lt;/li>
&lt;li>Boss-Gegner&lt;/li>
&lt;li>End-Boss&lt;/li>
&lt;/ul>
&lt;h2 id="anzahl-der-gegner">Anzahl der Gegner&lt;/h2>
&lt;p>Gegner sollen sich wertig anfühlen.
Daher wird es keine Masse an Gegner geben, die durch die Türme angegriffen wird, sondern wenige.
Klasse statt Masse ist die Devise.&lt;/p>
&lt;h2 id="wege">Wege&lt;/h2>
&lt;p>Die Gegner laufen auf vorgefertigten Wegen von ihrem Spawnpunkt zum Ziel.
Hierbei kann es sich entweder um Boden- oder Lufteinheiten handeln.
Auf dem Weg werden sie von den Türmen beschossen und nehmen Schaden, bis sie entweder sterben oder am Ziel ankommen.
Kommen sie am Ziel an, nimmt der Spieler Schaden.&lt;/p>
&lt;h3 id="wegbeeinflussung-durch-den-spieler">Wegbeeinflussung durch den Spieler&lt;/h3>
&lt;p>Der Spieler soll die Möglichkeit haben, die Wege beeinflussen zu können.
Wie genau ist zu diesem Zeitpunkt noch offen.
Erste Ideen finden sich &lt;a href="../../../docs/ideas/navigation/">hier&lt;/a>.&lt;/p>
&lt;p>Das Verändern der Wege soll eine bewusste Entscheidung durch den Spieler sein.
Wenn er dies macht, sollte es auch einen negativen Einfluss auf den Spieler haben.
Wie genauer dieser aussieht, steht zu aktuellen Zeitpunkt noch nicht fest.&lt;/p>
&lt;p>&lt;img src="assets/ways.svg" alt="Wege">&lt;/p>
&lt;p>Die Gegner sind intelligent und wissen, wann ein Weg blockiert ist und nehmen dann direkt eine alternative Route.
Falls ein Gegner (z.B. Fluggegner) über eine Blockage fliegen kann, wird er den Weg über die Blockade gehen.
Falls eine Blockage durch einen Gegner zerstört werden kann (siehe &lt;a href="../../../docs/ideas/navigation/">Ideen&lt;/a>), wird er den Weg der Blockade gehen und diese zerstören.
Somit wird der Weg wieder frei für alle Gegner.&lt;/p></description></item><item><title>Game-Design-Document: Levels</title><link>https://docs.fairytaledefender.de/game-design-document/gameplay/levels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/gameplay/levels/</guid><description>
&lt;p>Im Spiel hat der Spieler die Möglichkeit, verschiedene Levels zu spielen.
In jedem Level muss er eine gewisse Anzahl an &lt;a href="../enemies/">Wellen schaffen&lt;/a>, bevor er das nächste Level spielen kann.&lt;/p>
&lt;p>Die Levels werden auf zwei verschiedene Arten schwieriger:&lt;/p>
&lt;ol>
&lt;li>Jede Welle eines Levels wird schwieriger als die vorangegangene Welle.&lt;/li>
&lt;li>Jedes weitere Level ist etwas schwieriger als das Level zuvor.&lt;/li>
&lt;/ol>
&lt;p>Es wird daher kein genereller Schwierigkeitsgrad benötigt.
Die Schwierigkeit steigt kontinuierlich innerhalb jedes und mit jedem Level an.&lt;/p>
&lt;p>Durch das &lt;a href="../loop-gameplay/">loop-basierte Gameplay&lt;/a> kann der Spieler ein Level mehrmals spielen.
Daher ist es so, dass der Spieler nicht in der Lage sein soll, jedes Level beim ersten Durchspielen bis zur letzten Welle zu schaffen.
Das wird erreicht, dass nach der x-ten Welle, die x+1-te Welle überproportional schwerer ist.
Erst durch Forschung und Freischaltung weiterer Türme kann der Spieler bis zur letzten Welle vordringen.&lt;/p>
&lt;p>Es braucht zudem eine Mechanik, die es erlaubt, dass der Spieler Wellen vorzeitig rufen kann.
Das ermöglicht dem Spieler beim Wiederspielen eines leichteren Levels, die anfänglichen Wellen zu überspringen und sich auf die Herausforderung der späteren Wellen zu konzentrieren.&lt;/p>
&lt;h2 id="herausforderungsmodus">Herausforderungsmodus&lt;/h2>
&lt;p>Jedes Level kann in einem Herausforderungsmodus gestartet werden.
In diesem Modus werden:&lt;/p>
&lt;ul>
&lt;li>Gegner stärker/schneller&lt;/li>
&lt;li>Pausezeiten zwischen Wellen kürzer&lt;/li>
&lt;li>Türme schwächer&lt;/li>
&lt;/ul>
&lt;p>Dieser Modus richtet sich an erfahrene Spieler, die bereits viel freigeschaltet haben und eine extra Portion Herausforderung wünschen.&lt;/p>
&lt;p>Der Spieler soll in diesem Modus auf eine noch zu bestimmende Art und Weise belohnt werden.&lt;/p></description></item><item><title>Game-Design-Document: Spieler</title><link>https://docs.fairytaledefender.de/game-design-document/gameplay/player/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/game-design-document/gameplay/player/</guid><description>
&lt;p>Der Spieler spielt aus einer Vogelperspektive.
Er hat keinen steuerbaren Charakter.&lt;/p>
&lt;p>Der Spieler kann die Kamera rein-/rauszoomen, bewegen und auf der Y-Achse drehen.
Die Standardeinstellung ist eine isometrische Darstellung des Spielfeldes.&lt;/p></description></item><item><title>Docs: Blender-Studio</title><link>https://docs.fairytaledefender.de/docs/docs-visual/blender/studio/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-visual/blender/studio/</guid><description>
&lt;p>Studio für Videosequenzen für das Spiel.&lt;/p>
&lt;ul>
&lt;li>Software: Blender v3.5&lt;/li>
&lt;li>Add-ons erforderlich: nein&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="assets/BlenderStudio.zip">Download&lt;/a>&lt;/p>
&lt;p>&lt;img src="assets/Blender-Studio.png" alt="Screenshot Blender-Studio">&lt;/p>
&lt;h2 id="assets">Assets&lt;/h2>
&lt;p>In der Collection &lt;code>ASSETS/&lt;/code> befinden sich die referenzierten 3D-Modelle aus den externen Dateien (Props, Tiles, usw.).&lt;/p>
&lt;h2 id="himmel-mit-wolken">Himmel mit Wolken&lt;/h2>
&lt;p>&lt;strong>Collection: ENVIRONMENT/Sky&lt;/strong>&lt;/p>
&lt;p>Viele kleine Wolken in tieferer Ebene und einige größere Wolken am Himmel.&lt;/p>
&lt;ul>
&lt;li>Wolken wurden mittels Particle System vervielfacht und händisch etwas aufgeteilt&lt;/li>
&lt;/ul>
&lt;h3 id="steuerung">Steuerung&lt;/h3>
&lt;p>Steuerbar sind die Wolken über den Z-Winkel vom Objekt: ENVIRONMENT/clouds-rotation&lt;/p>
&lt;p>Für eine sanfte Bewegung der Wolken wurde eine Action erstellt die per Blending:Add 1° Drehung hinzufügt.
Für die andere Bewegungsrichtung genügt es auf Blending:Subtract umzustellen.&lt;/p>
&lt;h2 id="sonne--licht">Sonne / Licht&lt;/h2>
&lt;p>&lt;strong>Collection: ENVIRONMENT/&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>/sun-object
&lt;ul>
&lt;li>Light_1-Key&lt;/li>
&lt;li>Light_1-Keyhelper&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>/sun-focus&lt;/li>
&lt;li>/Light-Fill-.. (.. = 1,2,3,usw.)&lt;/li>
&lt;/ul>
&lt;p>Die Sonne dient auch als primäre Lichtquelle (Key).
Die sekundären Lichtquellen (Fill) imitieren die indirekte Beleuchtung.
Für manche Szenen könnte auch eine Sonne interessant sein, deshalb die grafische Umsetzung.&lt;/p>
&lt;h3 id="steuerung-1">Steuerung&lt;/h3>
&lt;p>Platzierung der Sonne über die Winkel (X,Y,Z) vom Objekt: ENVIRONMENT/sun-object&lt;/p>
&lt;p>Steuerung/Fokus vom Lichtkegel der Sonne mittels Objekt: ENVIRONMENT/sun-focus&lt;/p>
&lt;h2 id="waldgebiet-wald-im-hintergrund">Waldgebiet (Wald im Hintergrund)&lt;/h2>
&lt;p>&lt;strong>Collection: ENVIRONMENT/Forest&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Waldgebiet wird mittels Particle System (PS) generiert&lt;/li>
&lt;li>nur Objekte die in der Collection &amp;ldquo;Forest_PS-Objects&amp;rdquo; enthalten sind werden berücksichtigt&lt;/li>
&lt;/ul>
&lt;h2 id="nebel">Nebel&lt;/h2>
&lt;p>&lt;strong>Collection: ENVIRONMENT/Fog&lt;/strong>&lt;/p>
&lt;p>Ein leichter Nebel auf ganzer Map und etwas stärkere Nebel-Abschnitte im Waldgebiet.&lt;/p>
&lt;ul>
&lt;li>einzelne kleine Abschnitte für das Waldgebiet&lt;/li>
&lt;li>Umsetzung Nebel mittels Shader&lt;/li>
&lt;/ul>
&lt;h2 id="wassereffekte">Wassereffekte&lt;/h2>
&lt;p>&lt;strong>Collection: ENVIRONMENT/Water-effects&lt;/strong>&lt;/p>
&lt;h3 id="strömung-water-flow">Strömung &amp;ldquo;Water-flow&amp;rdquo;&lt;/h3>
&lt;ul>
&lt;li>eigenes Objekt über dem Tiles&lt;/li>
&lt;li>Umsetzung mittels Shader&lt;/li>
&lt;/ul>
&lt;h3 id="wasserringe-water-ripples-ringe-bei-hindernisse">Wasserringe &amp;ldquo;Water-ripples&amp;rdquo; (Ringe bei Hindernisse)&lt;/h3>
&lt;ul>
&lt;li>eigenes Objekt über dem Tiles&lt;/li>
&lt;li>Umsetzung durch eine Mischung aus Geometry Nodes, Mesh Attributs und Shader&lt;/li>
&lt;li>nur Objekte die in der Collection &amp;ldquo;water_Edge-cutters&amp;rdquo; enthalten sind werden berücksichtigt&lt;/li>
&lt;/ul>
&lt;h2 id="wind">Wind&lt;/h2>
&lt;ul>
&lt;li>Umsetzung durch eine Mischung aus Simple Deform Modifier und Drivers zur zentralen Steuerung&lt;/li>
&lt;li>alle Objekte die vom Wind beeinflusst werden sollen (z.B. Bäume, Sträucher) benötigen den Modifier&lt;/li>
&lt;li>Windstärke wird durch &amp;ldquo;Angle&amp;rdquo; beeinflusst, die Feineinstellung erfolgt durch &amp;ldquo;Limits&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h3 id="steuerung-2">Steuerung&lt;/h3>
&lt;p>Zur einfacheren Regulierung wurden Actions erstellt, Objekt: ENVIRONMENT/wind-force&lt;/p>
&lt;p>In der NLA kann ein sanfter Wind mit Windböen zusammengestellt werden.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Wind: Geometry Nodes&lt;/h4>
Wir hätten den Wind in Blender gerne wie in Unity (mittels UV-Map, anhand der Y-Achse) umgesetzt. Falls Du die Umsetzung mit Geometry Nodes probieren möchtest, dann wende Dich an einen &lt;a href="https://github.com/boundfoxstudios/fairy-tale-defender#ansprechpartner">Ansprechpartner&lt;/a>.
&lt;/div></description></item><item><title>Docs: Coding Conventions</title><link>https://docs.fairytaledefender.de/docs/docs-technical/coding-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/coding-conventions/</guid><description>
&lt;p>Wir nutzen als Basis die &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-type-members">.NET Standards&lt;/a> und folgen diesen weiteren Anpassungen.&lt;/p>
&lt;blockquote>
&lt;p>Angepasst und übersetzt vom &lt;a href="https://docs.google.com/document/d/1-eUWZ0lWREFu5iH-ggofwnixDDQqalOoT4Yc0NpWR3k/edit">Unity Open Project&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;h2 id="code">Code&lt;/h2>
&lt;h3 id="bezeichner">Bezeichner&lt;/h3>
&lt;ul>
&lt;li>Beschreibbare und präzise Namen, auch wenn diese länger werden. Lesbarkeit ist wichtiger als kurze Bezeichner.&lt;/li>
&lt;li>Verwende &lt;em>keine&lt;/em> Abkürzungen.&lt;/li>
&lt;li>Verwende anerkannte Akryonme, z.B. UI oder IO.&lt;/li>
&lt;li>Präfixe boolsche Variablen mit &amp;ldquo;Is&amp;rdquo;, &amp;ldquo;Has&amp;rdquo;, &amp;ldquo;Can&amp;rdquo;, etc. z.B. &lt;code>CanJump&lt;/code>, &lt;code>IsActive&lt;/code>.&lt;/li>
&lt;li>Vermeide das Nummerieren von Namen, z.B. &lt;code>Animator1&lt;/code>, &lt;code>Animator2&lt;/code>, etc. Verwende sinnvolle Bezeichner, um den Unterschied erkenntlich zu machen, z.B. &lt;code>PlayerAnimator&lt;/code>, &lt;code>EnemyAnimator&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="groß-kleinschreibung">Groß-/Kleinschreibung&lt;/h3>
&lt;blockquote>
&lt;p>&lt;strong>camelCase&lt;/strong>: Erster Buchstabe ist kleingeschrieben, der jeweils erste Buchstabe der Folgewörter ist großgeschrieben.&lt;/p>
&lt;p>&lt;strong>PascalCase&lt;/strong>: Der erste Buchstabe eines jeden Wortes ist großgeschrieben.&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>Klassen, Methoden, Enums, Namespaces, öffentliche Felder und Eigenschaften: PascalCase.&lt;/li>
&lt;li>Lokale Variablen, Methodenparameter: camelCase.&lt;/li>
&lt;li>Private Felder: camelCase und Unterstrich-Präfix, z.B. &lt;code>_gameControls&lt;/code>.
&lt;ul>
&lt;li>Bei privaten Feldern, die serialisiert werden, also ein &lt;code>[SerializeField]&lt;/code> haben: PascalCase.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="programmierung">Programmierung&lt;/h3>
&lt;ul>
&lt;li>Halte den Code in englischer Sprache (dict.cc, deepl.com helfen beim Übersetzen).&lt;/li>
&lt;li>Felder und Methoden bleiben private, außer man benötigt öffentlichen Zugriff.&lt;/li>
&lt;li>Versuche Singletons zu vermeiden, in dem du z.B. ein ScriptableObject (&lt;a href="https://www.youtube.com/watch?v=TjTL-MXPnbo">1&lt;/a>, &lt;a href="https://www.youtube.com/watch?v=qqzZZfgtQyU">2&lt;/a>, &lt;a href="https://www.youtube.com/watch?v=QkVpYHc1s60">3&lt;/a>) implementierst.&lt;/li>
&lt;li>Vermeide statische Variablen.&lt;/li>
&lt;li>Vermeide Magic Numbers (&amp;ldquo;magische Nummer&amp;rdquo;), z.B. &lt;code>value * 0.08&lt;/code>, warum wird hier der Wert mit 0,08 multipliziert? Nutze stattdessen eine Konstante oder ein Feld, um der Zahl einen Namen zu geben.&lt;/li>
&lt;li>Nutze Namespaces, wie es in C# üblich ist, jeder Ordner ist automatisch ein Namespace. Das Basis-Namespace ist &lt;code>BoundfoxStudios.FairyTaleDefender&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h4 id="serialisierte-felder-aka-serializefield-aka-dinge-die-im-inspector-angezeigt-werden">Serialisierte Felder aka [SerializeField] aka Dinge, die im Inspector angezeigt werden&lt;/h4>
&lt;p>Du bist es von Unity gewohnt, serialisierte Felder auf diese Art und Weise anzulegen:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">public&lt;/span> &lt;span style="color:#00f">class&lt;/span> &lt;span style="color:#2b91af">Something&lt;/span> : MonoBehaviour
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [SerializeField]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">private&lt;/span> GameObject SomePrefab;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Diese Variante nutzen wir &lt;strong>nicht&lt;/strong>, sondern wir bevorzugen diese Schreibweise:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">public&lt;/span> &lt;span style="color:#00f">class&lt;/span> &lt;span style="color:#2b91af">Something&lt;/span> : MonoBehaviour
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [field: SerializeField]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">private&lt;/span> GameObject SomePrefab { &lt;span style="color:#00f">get&lt;/span>; &lt;span style="color:#00f">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Dies hat den Vorteil, dass wir später diese Eigenschaft öffentlich machen können, aber nur Lese- und keinen Schreibzugriff für andere erlauben, z.B. so:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">public&lt;/span> &lt;span style="color:#00f">class&lt;/span> &lt;span style="color:#2b91af">Something&lt;/span> : MonoBehaviour
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [field: SerializeField]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">public&lt;/span> GameObject SomePrefab { &lt;span style="color:#00f">get&lt;/span>; &lt;span style="color:#00f">private&lt;/span> &lt;span style="color:#00f">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="nullable-reference-types">Nullable Reference Types&lt;/h4>
&lt;p>Wir nutzen im Projekt &lt;a href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/nullable-reference-types">Nullable Reference Types&lt;/a>.
Das bedeutet das alles, was &lt;code>null&lt;/code> sein könnte, explizit auch so markiert werden muss.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// Ohne Nullable Reference Types&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GameObject foo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo = &lt;span style="color:#00f">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// Mit Nullable Reference Types&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>GameObject? foo;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>foo = &lt;span style="color:#00f">null&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Durch Nullable Reference Types würde der obere Teil des Beispiel-Codes auch eine Warnung erzeugen.&lt;/p>
&lt;p>Durch das Unity-Serialisierungssystem (&lt;code>[SerializeField]&lt;/code>) kommt es allerdings dazu, dass serialisierte Felder etwas anders geschrieben werden müssen:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// Erzeugt eine Warnung:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[field: SerializeField]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">private&lt;/span> GameObject SomePrefab { &lt;span style="color:#00f">get&lt;/span>; &lt;span style="color:#00f">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// Alternative 1, falls das Feld nicht optional ist:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[field: SerializeField]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">private&lt;/span> GameObject SomePrefab { &lt;span style="color:#00f">get&lt;/span>; &lt;span style="color:#00f">set&lt;/span>; } = &lt;span style="color:#00f">default&lt;/span>!;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// Alternative 2, falls das Feld optional ist:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[field: SerializeField]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">private&lt;/span> GameObject? SomePrefab { &lt;span style="color:#00f">get&lt;/span>; &lt;span style="color:#00f">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="alternative-1">Alternative 1&lt;/h5>
&lt;p>Oft wird im Projekt Alternative 1 genutzt, da man Verknüpfungen zu anderen Assets und Skripten hat.
Durch das &lt;code>default!&lt;/code> überlisten wir den Compiler und teilen ihm quasi mit, dass das Feld bereits mit einem &amp;ldquo;nicht-null-Wert&amp;rdquo; belegt ist.
Das bedeutet, dass die Definition &lt;code>private GameObject&lt;/code> aussagt, dass das Feld nicht null ist, es im Code aber dennoch zu einer &lt;code>NullReferenceException&lt;/code> kommen kann, schlicht weil man das Feld im Unity Inspector nicht gesetzt hat.
Allerdings wollen wir auch nicht jedes Feld als nullable &lt;code>GameObject?&lt;/code> markieren, da es das weitere Arbeiten im Code erschwert.
Daher akzeptieren wir in diesem Fall einfach die NullReferenceException, da man das Setzen des Wertes im Inspector vergessen hat.&lt;/p>
&lt;p>Zusätzlich kann man ein &lt;code>Debug.Assert&lt;/code> in den Code einfügen, um dem Benutzer direkt mitzuteilen, das etwas fehlt:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">private&lt;/span> &lt;span style="color:#00f">void&lt;/span> OnValidate()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Guard.AgainstNull ist eine Funktion aus von Fairy Tale Defender und prüft, ob ein Feld oder Eigenschaft null ist.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// Falls dem der Fall ist, gibt sie eine Nachricht aus.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Guard.AgainstNull(() =&amp;gt; SomePrefab);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="alternative-2">Alternative 2&lt;/h5>
&lt;p>Diese kannst Du immer dann nutzen, sobald ein Referenztyp auch wirklich &lt;code>null&lt;/code> sein kann.
Entsprechend muss man im Verlauf des Codes darauf achten, was passieren soll, wenn die Eigenschaft &lt;code>null&lt;/code> ist.&lt;/p>
&lt;h4 id="asynchrone-entwicklung--coroutines">Asynchrone Entwicklung / Coroutines&lt;/h4>
&lt;p>Wir setzen bei Fairy Tale Defender auf eine externe Bibliothek, sodass wir C# &lt;code>async/await&lt;/code> nutzen können: &lt;a href="https://github.com/Cysharp/UniTask">UniTask&lt;/a>.
Die Bibliothek integriert sich komplett in Unity und ersetzt oft die Nutzung von Coroutines (oder macht deren Nutzung deutlich angenehmer).&lt;/p>
&lt;p>Vermeide daher das Implementieren von Coroutinen, falls das ganze auch via &lt;code>async/await&lt;/code> implementierbar ist.&lt;/p>
&lt;blockquote>
&lt;p>Kleine Info am Rande: Bevor es das &lt;code>async/await&lt;/code>-Feature in .NET gab, nutzte Unity die Coroutines, um asynchrone Operationen zu ermöglichen.
In der Zukunft will Unity selbst mehr und mehr in Richtung &lt;code>async/await&lt;/code> gehen und steht dazu auch mit UniTask im Kontakt.
Mehr Info siehe ein &lt;a href="https://blog.unity.com/technology/unity-and-net-whats-next">Blog-Post von Unity selbst&lt;/a> -&amp;gt; &amp;ldquo;Modernizing the .NET Runtime&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;h4 id="unit-tests">Unit-Tests&lt;/h4>
&lt;p>Zum Unit-Testen nutzen wir zusätzlich das &lt;a href="https://fluentassertions.com">FluentAssertions-Framework&lt;/a>, was das Schreiben und Lesen von Tests angenehmer gestaltet als das von Unity mitgebrachte &lt;code>Assert&lt;/code>.
Damit es in Unity genutzt werden kann, nutzen wir den &lt;a href="https://github.com/BoundfoxStudios/fluentassertions-unity">Unity-Adapter&lt;/a>.&lt;/p>
&lt;p>Außerdem steht &lt;a href="https://github.com/moq/moq4">Moq&lt;/a> zur Verfügung, um Fake-Objekte zu erzeugen.&lt;/p>
&lt;h3 id="formatierung">Formatierung&lt;/h3>
&lt;ul>
&lt;li>Verwende &lt;strong>1 Tab&lt;/strong> pro Spalte, keine Leerzeichen.
Das gibt einfach jedem die Möglichkeit, den Code visuell so darzustellen, wie man sich wohlfühlt.&lt;/li>
&lt;/ul>
&lt;h3 id="kommentare">Kommentare&lt;/h3>
&lt;ul>
&lt;li>Schreibe Kommentare auf Englisch (dict.cc, deepl.com helfen beim Übersetzen).&lt;/li>
&lt;li>Versuche Kommentare zu vermeiden, der Code sollte für sich sprechen.&lt;/li>
&lt;li>Füge Kommentare dort hinzu, wo es wirklich sinnvoll ist, bspw. wenn eine gewisse Ablaufreihenfolge besteht, die eingehalten werden muss.&lt;/li>
&lt;li>Nutze VSDoc für Beschreibungen von Klassen, Methoden, etc.&lt;/li>
&lt;li>Beschreibe jede öffentliche Klasse, Methode und Eigenschaft welchen Zweck sie erfüllt, z.B.
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-csharp" data-lang="csharp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">/// &amp;lt;summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">/// Diese Klasse kümmert sich um das Abspielen von Kamerafahrten.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">/// &amp;lt;/summary&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>Verwende keine &lt;code>#region&lt;/code>-Direktiven oder Kommentare, die eine visuelle Trennung erzeugen, wie z.B. &lt;code>//-------&lt;/code>.
Falls Du sowas brauchst, ist das oft ein Hinweis, dass die Klasse zu viele Zuständigkeiten hat.&lt;/li>
&lt;/ul>
&lt;h2 id="scene--hierarchy">Scene &amp;amp; Hierarchy&lt;/h2>
&lt;h3 id="organisation">Organisation&lt;/h3>
&lt;ul>
&lt;li>Nutze leere GameObjects auf der obersten Ebene, um die Hierarchy visuell in logische Bereiche zu trennen, z.B. &lt;code>----Environment----&lt;/code>, &lt;code>----Managers----&lt;/code>.
Nutze für diese GameObjects das &lt;code>EditorOnly&lt;/code>-Tag, sodass Unity beim Bauen des Projekts diese GameObjects entfernt.&lt;/li>
&lt;li>Nutze leere GameObjects als Container, sobald Du mehr als 2 zusammenpassende Kind-Objekte hast.&lt;/li>
&lt;/ul>
&lt;h3 id="benamung">Benamung&lt;/h3>
&lt;ul>
&lt;li>Nutze keine Leerzeichen innerhalb von GameObject-Namen.&lt;/li>
&lt;li>Nutze &lt;strong>PascalCase&lt;/strong>, z.B. &lt;code>MainDoor&lt;/code>, &lt;code>LeverTrigger&lt;/code>.&lt;/li>
&lt;li>Benenne auch Prefab-Instanzen passend in der Hierarchy um.&lt;/li>
&lt;/ul>
&lt;h2 id="projektdateien">Projektdateien&lt;/h2>
&lt;h3 id="benamung-1">Benamung&lt;/h3>
&lt;ul>
&lt;li>Gleiche Regeln wie bei &lt;a href="#scene--hierarchy">Scene &amp;amp; Hierachy&lt;/a>&lt;/li>
&lt;li>Benenne Deine Objekte so, dass sie auf natürliche Art und Weise gruppiert werden, wenn sie im gleichen Ordner sind.
&lt;ul>
&lt;li>Start beim Namen mit dem &amp;ldquo;Ding&amp;rdquo; zu dem es gehört, z.B. &lt;code>PlayerAnimationController&lt;/code>, &lt;code>PlayerIdle&lt;/code>, &lt;code>PlayerRun&lt;/code>, &amp;hellip;&lt;/li>
&lt;li>Wenn es sinnvoll ist, können Objekte so benannt werden, dass ähnliche Objekte zusammenbleiben oder durch ein Adjektiv anders gruppiert werden würden. Beispiel: In einem Ordner mit Requisiten würde man Tische nach dem Schema &lt;code>TableRound&lt;/code> und &lt;code>TableRectanngular&lt;/code> benennen statt &lt;code>RectangularTable&lt;/code> und &lt;code>RoundTable&lt;/code>, sodass alle Tische logisch gruppiert werden.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Vermeide Dateitypen in Namen, z.B. nutze &lt;code>ShinyMetal&lt;/code> statt &lt;code>ShinyMetalMaterial&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="ordnerstruktur">Ordnerstruktur&lt;/h3>
&lt;p>Beispielstruktur:&lt;/p>
&lt;pre tabindex="0">&lt;code>- Assets
|- _Game [1]
|- Art
|- Buildings
|- LightningTower
|- Materials
|- Prefabs
|- Environment
|- Nature
|- Materials
|- Prefabs
|- Scenes [2]
|- Examples [3]
|- Menus
|- Levels
|- ScriptableObjects (Instanzen) [4]
|- Scripts [5]
|- Events
|- ScriptableObjects (Definition)
|- UI
|- Materials
|- _Sandbox [6]
|- ... (eventuelle Drittanbieterintegrationen)
&lt;/code>&lt;/pre>&lt;ol>
&lt;li>&lt;code>_Game&lt;/code>-Ordner, das ist unser Root-Ordner für das Spiel. Wir platzieren keinerlei Assets direkt im &lt;code>Assets&lt;/code>-Ordner von Unity. Diesen halten wir frei für Drittanbieterintegrationen, z.B. Steam.&lt;/li>
&lt;li>Im Ordner &lt;code>Scenes&lt;/code> legen wir alle Scenen des Spiels ab, logisch gruppiert in weiteren Unterordnern.&lt;/li>
&lt;li>Im Ordner &lt;code>Examples&lt;/code> kannst Du, wenn Du neue Systeme für das Spiel implementierst, eine Beispielszene ablegen, um anderen zu zeigen, wie es funktioniert.&lt;/li>
&lt;li>Instanzen von ScriptableObjects legen wir separat in diesem Ordner ab.&lt;/li>
&lt;li>In diesem Ordner legen wir alle Skripte ab, gruppiert nach jeweiligem System.&lt;/li>
&lt;li>In diesem Ordner wird alles abgelegt, von dem wir wissen, dass es noch ausgetauscht werden muss. Eignet sich z.B. wenn man an einem Feature arbeitet, ein Beispiel-Modell dafür benutzt, dass dann später von einem Artist erst neu modelliert wird.&lt;/li>
&lt;/ol>
&lt;p>Generell gilt, dass zusammengehörende Dinge in einem Ordner gruppiert werden sollen. Im Zweifel lieber einen Ordner mehr als zu wenig.&lt;/p></description></item><item><title>Docs: Continuous Integration &amp; Continuous Delivery</title><link>https://docs.fairytaledefender.de/docs/docs-technical/ci-cd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/ci-cd/</guid><description>
&lt;h2 id="continuous-integration">Continuous Integration&lt;/h2>
&lt;p>Vereinfacht beschreibt CI automatisierte Systeme, die bei Änderungen im Repo loslaufen und diese Änderungen prüfen, ob sie gewisse Dinge einhalten.&lt;/p>
&lt;p>Dieses Repo nutzt GitHub Actions zur Umsetzung von Continuous Integration (CI).
Alle Workflows finden sich unter &lt;a href="https://github.com/BoundfoxStudios/fairy-tale-defender/tree/develop/.github/workflows">.github/workflows&lt;/a>.
Wir setzen hier stark auf &lt;a href="https://game.ci">Game CI&lt;/a>, die eine Build-Umgebung für Unity bereitstellen.&lt;/p>
&lt;p>In unserem Fall gibt es mehrere Prüfungen, die loslaufen, sobald ein Push auf &lt;code>develop&lt;/code> erfolgt oder ein PR gestellt wird.&lt;/p>
&lt;ol>
&lt;li>Code Linting: Prüfung, ob Code-Formatierung eingehalten wird.&lt;/li>
&lt;li>Unit Tests: Starten der Unity Edit- &amp;amp; Play-Mode-Tests.&lt;/li>
&lt;li>Export des Players: Es wird versucht, sowohl für Windows, Linux als auch für macOS das Spiel zu exportieren.&lt;/li>
&lt;/ol>
&lt;p>Sobald alle drei Prüfungen abgeschlossen sind, kann ein PR übernommen werden.
Schlägt auch nur eine der Prüfungen fehl, muss der Ersteller des PRs schauen, woran es liegt und diese Fehler beheben.&lt;/p>
&lt;h3 id="unity-lizenzierung">Unity Lizenzierung&lt;/h3>
&lt;p>Ein &lt;em>nerviges&lt;/em> Problem bei lizenzierter Software ist oft das Aufsetzen von solchen automatischen Systemen, da diese in der Regel eine eigene Lizenz benötigen.
Daher funktioniert es in unserem Repo wie folgt:&lt;/p>
&lt;ol>
&lt;li>PRs und Änderungen an &lt;code>develop&lt;/code> werden mit einer Unity Personal License gebaut.&lt;/li>
&lt;li>Änderungen an &lt;code>main&lt;/code> werden mit einer Unity Professional License gebaut (sodass der typische &amp;ldquo;Made by Unity&amp;rdquo;-Splashscreen nicht auftaucht).&lt;/li>
&lt;/ol>
&lt;h2 id="continuous-delivery">Continuous Delivery&lt;/h2>
&lt;p>Vereinfacht beschreibt Continuous Delivery aus ständige Ausliefern von Änderungen an die Nutzer der Anwendung.&lt;/p>
&lt;p>In unserem Fall ist das ein automatisches Ausliefern in einen Steam-Beta-Branch mit dem Namen &lt;code>CI&lt;/code>.&lt;/p>
&lt;p>Nach jedem Push auf &lt;code>develop&lt;/code> erfolgt eine automatische Auslieferung.
Wenn alles gut läuft bedeutet das, dass jede erfolgreiche Integration eines PRs innerhalb 1-2 Stunden spielbar auf einem Steam-Branch ist.&lt;/p>
&lt;h3 id="technische-steam-infos">Technische Steam Infos&lt;/h3>
&lt;p>Unser Spiel hat auf Steam die App Id: &lt;code>2350330&lt;/code>.&lt;/p>
&lt;p>Folgende Depots sind konfiguriert:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Depot ID&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2350331&lt;/td>
&lt;td>Windows&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2350332&lt;/td>
&lt;td>macOS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2350333&lt;/td>
&lt;td>Linux&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Dies ist bisher im Projekt noch nicht genutzt, soll aber implementiert werden.&lt;/p></description></item><item><title>Docs: Farbpalette</title><link>https://docs.fairytaledefender.de/docs/docs-visual/colors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-visual/colors/</guid><description>
&lt;p>Alle Elemente im Spiel orientieren sich an einer Farbpalette.
Es wird &amp;ldquo;pro Jahreszeit&amp;rdquo; eine Farppalette geben.&lt;/p>
&lt;p>Jede Farbpalette ist 16x16 Pixel groß und bietet somit Platz für 256 verschiedene Farben.
Das sollte mehr als ausreichend sein.&lt;/p>
&lt;p>Anwenden kannst Du Farben in &lt;a href="https://www.youtube.com/watch?v=8NEmx0cHwoI">Blender via UV Editing&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>Wenn Dir eine Farbe fehlt, schreib uns auf dem &lt;a href="https://discord.gg/tHqNzMT">Discord&lt;/a> eine Nachricht, sodass wir die Farbe hinzufügen können.&lt;/p>
&lt;/blockquote>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">Download&lt;/h4>
&lt;p>Du kannst die Farbpalette &lt;a href="../blender/">hier&lt;/a> im Blender Starter-Kit herunterladen, falls Du noch kein Asset erstellt hast.&lt;/p>
&lt;p>Falls Du nur die Farbpalette runterladen möchtest, schaue unten bei den einzelnen Paletten.&lt;/p>
&lt;/div>
&lt;h2 id="sommer">Sommer&lt;/h2>
&lt;p>[ &lt;a href="assets/ColorPalette_Summer.png">Download&lt;/a> ]&lt;/p>
&lt;p>Hier siehst Du die Farbpalette für den Sommer:&lt;/p>
&lt;p>&lt;img src="assets/ColorPalette_Summer_Description.png" alt="Sommer-Farbpalette">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>#&lt;/th>
&lt;th>Beschreibung&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>Erde&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>Dunkle Erde&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>Gras&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>Blatt Schattierung 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>34&lt;/td>
&lt;td>Blatt Schattierung 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>Stein&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>Dunkler Stein&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>Wasser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>5&lt;/td>
&lt;td>Holz Schattierung 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>21&lt;/td>
&lt;td>Holz Schattierung 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>37&lt;/td>
&lt;td>Holz Schattierung 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>53&lt;/td>
&lt;td>Holz Schattierung 4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>69&lt;/td>
&lt;td>Dachziegel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>6&lt;/td>
&lt;td>Blume Lila Schattierung 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>22&lt;/td>
&lt;td>Blume Lila Schattierung 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>38&lt;/td>
&lt;td>Blume Lila Schattierung 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>7&lt;/td>
&lt;td>Blume Gelb Schattierung 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>23&lt;/td>
&lt;td>Blume Gelb Schattierung 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>8&lt;/td>
&lt;td>Blume Blau Schattierung 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>24&lt;/td>
&lt;td>Blume Blau Schattierung 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>Weiß&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>25&lt;/td>
&lt;td>Schwarz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>41&lt;/td>
&lt;td>Grau Schattierung 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>57&lt;/td>
&lt;td>Grau Schattierung 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>73&lt;/td>
&lt;td>Grau Schattierung 3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>Pilz-Rot&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Tiles</title><link>https://docs.fairytaledefender.de/docs/docs-visual/tiles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-visual/tiles/</guid><description>
&lt;h2 id="basis-tile">Basis-Tile&lt;/h2>
&lt;p>Eine Tile ist der Grundbaustein zum Zusammensetzen des Terrains.
Es ist ein 1 Meter langer, 1 Meter breiter und 0,2 Meter hoher Quader.&lt;/p>
&lt;p>Die Höhe, 0,2 Meter, teilt sich auf 0,1 Meter Boden und 0,1 Meter Oberfläche.&lt;/p>
&lt;p>&lt;img src="assets/Tile.svg" alt="Tile">&lt;/p>
&lt;p>An diesem Tile orientieren sich alle weiteren Modellierungen.&lt;/p>
&lt;h2 id="weg-tile">Weg-Tile&lt;/h2>
&lt;p>Ein Weg-Tile beschreibt ein Tile, auf dem die Gegner laufen.&lt;/p>
&lt;p>Der Weg ist 0,8 Meter breit.
Die Seiten sind jeweils 0,1 Meter breit.&lt;/p>
&lt;p>Auf dem Weg wird über Farbe eine leichte Schattierung erzeugt.
Hierzu werden seitlich am Weg jeweils 0,1 Meter genutzt.
Siehe gestrichelte Linie in der Beschreibung &amp;ldquo;Dunkler Boden&amp;rdquo; im Bild.&lt;/p>
&lt;p>Bitte achte darauf, diese Maße exakt einzuhalten, ansonsten können wir die Tiles im Spiel nicht zusammensetzen.&lt;/p>
&lt;p>&lt;img src="assets/Way-Tile.svg" alt="Way Tile">&lt;/p>
&lt;p>So sieht z.B. ein Weg-Tile fertig modelliert und gerendert aus:&lt;/p>
&lt;p>&lt;img src="assets/Way-Tile.png" alt="Way Tile Render">&lt;/p>
&lt;h2 id="turm">Turm&lt;/h2>
&lt;p>Ein Turm wird auf einem Tile platziert.
Darf maximal 0,9 Meter breit und lang sein, sodass er niemals das ganze Tile einnimmt (sähe sonst komisch aus, wenn man Türme nebeneinander baut).
Die Höhe kann je nach Turm etwas variieren und sollte auch um 1 Meter herum sein.
Die Basis vom Turm kann rund oder eckig sein.&lt;/p>
&lt;p>&lt;img src="assets/TileWithTower.svg" alt="Tile mit Tower">&lt;/p>
&lt;h2 id="origin">Origin&lt;/h2>
&lt;p>Der Origin aller Objekte befindet sich unten in der Mitte vom Objekt.&lt;/p></description></item><item><title>Docs: Wind-Effekt</title><link>https://docs.fairytaledefender.de/docs/docs-visual/wind/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-visual/wind/</guid><description>
&lt;p>Wir haben in Unity einen Fragment-Shader, der einen Wind-Effekt bei Natur-Elementen (z.B. Bäume, Gräser, Blumen) simulieren kann.
Die nötige Information, welche Teile des Modells wie stark im Wind bewegt werden, speichern wir auf den Modellen im 2. UV-Kanal.&lt;/p>
&lt;p>Diesen 2. UV-Kanal kannst Du in Blender anlegen, in dem Du das Mesh auswählst, dann bei den Properties auf den &amp;ldquo;Object Data Properties&amp;rdquo;-Tab wechselst und dort beim Punkt &amp;ldquo;UV Maps&amp;rdquo; eine zweite Map anlegst.
Wie Du diese nennst, spielt keine Rolle, wir empfehlen aber den Namen &amp;ldquo;Wind&amp;rdquo;, damit man weiß, für was diese UV Map existiert.&lt;/p>
&lt;p>Jetzt ist wichtig zu wissen, wie die Vertices in dieser UV angeordnet werden müssen.
Vorab: Die X-Achse spielt keine Rolle, für den Wind-Effekt ist ausschließlich die Y-Achse relevant.&lt;/p>
&lt;p>Die UV Map geht 0/0 (links unten) nach 1/1 (rechts oben).
Die Y-Achse bestimmt nun, wie stark der Wind Einfluss auf den Vertex hat.
Ist dieser bei 0, wird er nicht vom Wind beeinflusst und ist dieser bei 1, dann wird er maximal vom Wind beeinflusst.&lt;/p>
&lt;p>Wenn man z.B. einen Baum nimmt, der aus einem Stamm und einer Krone besteht, dann könnte man alle Vertices vom Stamm auf 0 setzen, sodass dieser nicht im Wind mitbewegt wird und die Vertices der Krone auf 1, sodass diese maximal vom Wind erfasst wird.&lt;/p>
&lt;p>Alle Stuffen zwischen 0 und 1 bestimmen prozentual wie stark die Vertices vom Wind bewegt werden.
So könnte man z.B. den Teil vom Stamm, der in die Krone reicht, bei 0.5 platzieren, sodass der obere Teil vom Stamm auch etwas vom Wind bewegt wird.&lt;/p>
&lt;p>Somit kann man gut bestimmen, welche Teile vom Modell wie stark vom Wind erfasst werden, ganz so, wie es in der echten Natur auch wäre.&lt;/p>
&lt;h2 id="windskala">Windskala&lt;/h2>
&lt;p>Anhand dieser Skala kannst Du Dich orientieren, wie du das UV-Mapping gestaltest.
Du kannst gerne die Grafik herunterladen und als Bild im 2. UV-Kanal hinterlegen.
Da wir in Unity nur den 1. UV-Kanal zum Rendern benutzen, taucht das Bild im Spiel später nicht auf.&lt;/p>
&lt;p>&lt;img src="assets/wind-scale.png" alt="Windskala">&lt;/p>
&lt;h3 id="beispiel-in-blender">Beispiel in Blender&lt;/h3>
&lt;p>So sieht es aus, wenn Du das Bild in den 2. UV-Kanal in Blender lädst:&lt;/p>
&lt;p>&lt;img src="assets/wind-scale-in-blender.png" alt="Windskala in Blender">&lt;/p></description></item><item><title>Docs: Häufig gestellte Fragen</title><link>https://docs.fairytaledefender.de/docs/docs-technical/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/faq/</guid><description>
&lt;h2 id="wenn-ich-pr-gestellt-habe-bricht-es-ab-beim-lint-code-base-check">Wenn ich PR gestellt habe, bricht es ab beim &amp;ldquo;Lint code base&amp;rdquo;-Check.&lt;/h2>
&lt;p>Linting bedeutet, dass automatisiert eine Software (in diesem Fall dotnet-format) prüft, ob Du den Code so formatiert hast, wie wir es gerne in diesem Projekt hätten.
Wenn dies fehlschlägt, dann ist Dein Code noch nicht korrekt formatiert.&lt;/p>
&lt;p>Um das Problem zu behben, musst Du in einer Kommandozeile, die im Ordner &lt;code>FairyTaleDefender&lt;/code> geöffnet wurde, folgendes ausführen:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Windows:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>format.bat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000"># Linux/mac:S&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>./format.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wenn der Befehl fertig ist, prüfst Du in GitHub Desktop, ob es geändert Dateien gibt, das sollte jetzt auch der Fall sein.
Die geänderten Dateien (und prüfe bitte, ob es wirklich nur Deine Dateien sind) kannst Du nun committen und pushen.&lt;/p>
&lt;p>Durch den Push wird Dein PR erneut geprüft und sollte zumindest bei &amp;ldquo;Lint code base&amp;rdquo; kein Problem mehr machen.&lt;/p>
&lt;h2 id="ich-erhalte-einen-fehler-beim-ausführen-von-formatbatformatsh">Ich erhalte einen Fehler beim Ausführen von format.bat/format.sh.&lt;/h2>
&lt;p>Es scheint, als hättest Du nicht .NET 6 installiert, dort kommt dotnet-format, was von format.bat/format.sh ausgeführt wird, mit.
Bitte installiere das &lt;a href="https://dotnet.microsoft.com/en-us/download">.NET 6 SDK&lt;/a>&lt;/p>
&lt;h2 id="wie-kann-ich-dinge-entwickeln-für-die-ich-steam-benötige">Wie kann ich Dinge entwickeln, für die ich Steam benötige?&lt;/h2>
&lt;p>Um permanente Fehlermeldungen zu vermeiden, ist im Unity-Projekt die Steam-Integration per Standard ausgeschaltet.
Erst durch den Build durch GitHub wird die Steam-Integration aktiviert.&lt;/p>
&lt;p>Wenn Du eine Aufgabe übernimmst, bei der Du etwas implementieren möchtest, dass mit Steam zu tun hat, kannst Du die Steam-Integration lokal aktivieren.
Dazu findest Du rechts oben im Editor einen Steam-Button, der per Standard rot (= aus) ist.
Wenn Du diesen Button klickst, wird er grün und damit aktiviert sich die Steam-Integration.
Klicke ihn erneut an, um die Integration wieder auszuschalten.&lt;/p>
&lt;p>&lt;img src="assets/steam-integration.png" alt="Steam-Integration">&lt;/p>
&lt;div class="alert alert-success" role="alert">
&lt;h4 class="alert-heading">Achtung&lt;/h4>
Bevor Du einen PR stellst, musst Du die Steam-Integration wieder ausschalten, ansonsten werden die automatischen Prüfungen Deines PR fehlschlagen.
&lt;/div></description></item><item><title>Docs: Glossar</title><link>https://docs.fairytaledefender.de/docs/glossary/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/glossary/</guid><description>
&lt;p>In diesem Glossar sollen einige Begrifflichkeiten definiert werden, die man unter Umständen so noch nicht kennt.
Bitte beachte, dass diese Begrifflichkeiten in diesem Glossar oft sehr vereinfacht beschrieben werden, um ein Grundverständnis zu erzeugen.
Du solltest natürlich auch die Suchmaschine Deiner Wahl bemühen, um Dein Verständnis zu vergrößern.&lt;/p>
&lt;p>Sollte Dir hier ein Begriff fehlen, eröffne gerne ein &lt;a href="https://github.com/BoundfoxStudios/fairy-tale-defender/issues/new/choose">Issue&lt;/a> (&amp;ldquo;Sonstiges&amp;rdquo;).&lt;/p>
&lt;h2 id="git--co">Git &amp;amp; Co.&lt;/h2>
&lt;dl>
&lt;dt>&lt;a href="https://git-scm.com" target="_blank">Git&lt;/a>&lt;/dt>
&lt;dd>Allgmeine Versionskontrolle für Softwareentwicklung.&lt;/dd>
&lt;dt>&lt;a href="https://github.com" target="_blank">GitHub&lt;/a>&lt;/dt>
&lt;dd>Öffentliches Hosting eines Repositories.&lt;/dd>
&lt;dt>&lt;a href="https://desktop.github.com" target="_blank">GitHub Desktop&lt;/a>&lt;/dt>
&lt;dd>Software von GitHub zur vereinfachten Nutzung von Git und GitHub.&lt;/dd>
&lt;dt>Branch&lt;/dt>
&lt;dd>Beschreibt eine Abzweigung innerhalb des Repositories, um verschiedene Entwicklungsstände zu erzeugen.&lt;/dd>
&lt;dt>Commit&lt;/dt>
&lt;dd>Festsetzen von Änderungen in Git. Kann benannt werden, sodass man nachvollziehen kann, wann welche Änderungen gemacht wurden.&lt;/dd>
&lt;dt>Fork&lt;/dt>
&lt;dd>"Verknüpfte" Kopie eines Repositories. Wird z.B. genutzt um Features, Bugs, etc. zu entwickeln/fixen und dann via Pull Request an das Original-Repository zu übertragen.&lt;/dd>
&lt;dt>Repository, Repo&lt;/dt>
&lt;dd>Ein unter Versionskontrolle stehender Ordner, in dem Änderungen nachvollzogen werden können. Oder salopp: Ein Git(Hub)-Projekt.&lt;br>&lt;br>
Hier unterscheidet man zwischen einem lokalen Repo und einem remote Repo.
Das lokale Repo liegt auf der Festplatte.
Das remote Repo liegt z.B. bei GitHub.
Über die Git-Kommandos Push und Pull kann das lokale Repo mit dem remote Repo kommunizieren.&lt;/dd>
&lt;dt>Pull&lt;/dt>
&lt;dd>Das Runterladen von Commits von einem remote Repo in das lokale Repo.&lt;/dd>
&lt;dt>Push&lt;/dt>
&lt;dd>Das Hochladen von Commits von einem lokalen Repo in ein remote Repo.&lt;/dd>
&lt;dt>Pull Request, PR&lt;/dt>
&lt;dd>Das Bereitstellen von Änderungen, die in einem Fork gemacht wurden, in das Original-Repo.&lt;/dd>
&lt;/dl>
&lt;h2 id="game-dev">Game Dev&lt;/h2>
&lt;dl>
&lt;dt>User Interface, UI&lt;/dt>
&lt;dd>Die Benutzeroberfläche einer Anwendung.&lt;/dd>
&lt;dt>GDD&lt;/dt>
&lt;dd>Game Design Document&lt;/dd>
&lt;dt>MVP&lt;/dt>
&lt;dd>Minimal Viable Product, &lt;a href="https://docs.fairytaledefender.de/docs/roadmap#mvp">siehe hier&lt;/a>&lt;/dd>
&lt;/dl></description></item><item><title>Docs: Audio Cue (Sound Effekte)</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/audiocue-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/audiocue-system/</guid><description>
&lt;p>Das AudioCue-System dient dazu, einzelne Soundeffekte abzuspielen.
Man möchte vielleicht fragen, warum nicht einfach das GameObjekt, welches den Sound benötigt eine AudioSource hat,
welche dann den Sound abspielt. Dies ginge theoretisch, allerdings gibt es bei z.B. dem Tod einer Einheit das
Problem, dass das GameObjekt zerstört werden soll und hierbei würde das Abspielen abgebrochen. Desswegen
wird dies von einem System, welches diese Aufgabe zentraliesiert, übernommen.&lt;/p>
&lt;h2 id="verwendenung">Verwendenung&lt;/h2>
&lt;h3 id="audiocue">AudioCue&lt;/h3>
&lt;p>Zuerst muss eine Instanz des AudioCueSO erstellt werden. An dieser Stelle muss der Audio Clip spezifiziert werden.&lt;/p>
&lt;h3 id="abspielendes-gameobject">Abspielendes GameObject&lt;/h3>
&lt;p>Das abspielende GameObject muss eine Referenz, nennen wir sie &lt;code>eventChannel&lt;/code> zu dem AudioCueEventChannelSO, abegelegt unter &lt;code>ScriptableObjects/Events&lt;/code>,
haben. Außerdem muss das GameObject die Instanz, beispielsweise &lt;code>PlayerDeathSound&lt;/code> des AudioCueSO mit dem entsprechenden Clip kennen. Anschließend
muss das Event mit &lt;code>eventChannel.Invoke(PlayerDeathSound);&lt;/code> geworfen werden. Nun ist die Arbeit auf Seiten des Abspielenden GameObject erledigt
und es kann sich selbst zerstören/zerstört werden, ohne dass Probleme auftreten.&lt;/p></description></item><item><title>Docs: Auditiv (Effekte, Musik) mitmachen</title><link>https://docs.fairytaledefender.de/docs/contributing/auditory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/contributing/auditory/</guid><description>
&lt;div class="alert alert-danger" role="alert">
&lt;h4 class="alert-heading">TODO&lt;/h4>
Diese Seite ist aktuell noch nicht soweit ausgearbeitet, da es soundtechnisch leider noch nichts zu machen gibt. :)
&lt;/div>
&lt;p>Du bist hier richtig, wenn Du Dich auditiv am Projekt beteiligen möchtest, d.h. Du&lt;/p>
&lt;ul>
&lt;li>möchtest Musik komponieren oder&lt;/li>
&lt;li>möchtest Sound-Effekte für das Spiel erstellen.&lt;/li>
&lt;/ul>
&lt;h2 id="worauf-muss-ich-achten">Worauf muss ich achten?&lt;/h2>
&lt;ul>
&lt;li>Stereo-Sound.&lt;/li>
&lt;li>Exportiere Deine Arbeit als &lt;code>.wav&lt;/code>-Datei.&lt;/li>
&lt;/ul>
&lt;h2 id="wo-lade-ich-meine-ergebnisse-hin">Wo lade ich meine Ergebnisse hin?&lt;/h2>
&lt;p>Du kannst Deine Ergebnisse im Ordner &lt;code>_contributing/auditory&lt;/code> ablegen.
Hier erstellst Du einen Ordner mit Deinem Benutzernamen und dort drin je nach Bedarf weitere Ordner (falls Du z.B. an mehrere Stücken gearbeitet hast).&lt;/p>
&lt;p>Wichtig ist, dass Du einmal die Original-Datei hochlädst (sodass jemand anders es weiterbearbeiten kann, falls es nötig ist) und bei Sounds einmal einen Export im &lt;code>.wav&lt;/code>-Format, sodass wir es dann später in Unity nutzen können.
Falls Dein Programm kein &lt;code>.wav&lt;/code> exportieren kann (was sehr unwahrscheinlich ist), dann wäre auch &lt;code>.ogg&lt;/code> oder &lt;code>.mp3&lt;/code> in Ordnung. &lt;code>.wav&lt;/code> wird in jedem Fall allerdings bevorzugt.&lt;/p>
&lt;p>Falls Du Dir unsicher bist, frag gerne auf dem &lt;a href="https://discord.gg/tHqNzMT">Discord&lt;/a> nach.&lt;/p>
&lt;h3 id="beispiel">Beispiel&lt;/h3>
&lt;p>Wenn Dein Benutzername &lt;code>DerMusterMensch&lt;/code> ist und Du einen Plopp-Effekt erstellt hast, dann würdest Du den Ordner &lt;code>_contributing/auditory/DerMusterMensch/PloppEffect&lt;/code> anlegen und dort zwei Dateien hochladen:&lt;/p>
&lt;ul>
&lt;li>&lt;code>PloppEffect.original&lt;/code>&lt;/li>
&lt;li>&lt;code>PloppEffect.wav&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="was-passiert-dann">Was passiert dann?&lt;/h3>
&lt;p>&lt;a href="../#ich-habe-eine-aufgabe-fertig-was-mache-ich-damit">Siehe hier&lt;/a>.&lt;/p>
&lt;h3 id="hilfe-ich-komme-mit-git-gar-nicht-klar">Hilfe, ich komme mit Git gar nicht klar&lt;/h3>
&lt;p>Als kreativer Mensch hat man oft noch keinen Berührungspunkt mit dem sehr technischen Git gehabt.
Spreche bitte einen &lt;a href="https://github.com/boundfoxstudios/fairy-tale-defender/#ansprechpartner">Ansprechpartner&lt;/a> an, eventuell kann er die Arbeit mit Git für Dich übernehmen.&lt;/p>
&lt;p>&lt;em>Für die Erweiterung Deiner Skills ist&amp;rsquo;s natürlich cool, wenn Du Dir Git aneignest.&lt;/em>&lt;/p></description></item><item><title>Docs: Erklärung Event-System</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/event-system/explanation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/event-system/explanation/</guid><description>
&lt;p>[ &lt;a href="https://www.youtube.com/watch?v=qqzZZfgtQyU&amp;amp;list=PLxVAs8AY4TgeLrapbKxWAmbfwAbTOaLDc&amp;amp;index=2">Boundfox YouTube Tutorial&lt;/a> ]&lt;/p>
&lt;p>Wenn Du noch nicht weißt, was ein Event-System ist, dann ist &lt;a href="#was-ist-ein-event-system">weiter unten&lt;/a> eine kleine Erklärung.&lt;/p>
&lt;h2 id="implementierung">Implementierung&lt;/h2>
&lt;p>Im Code findest Du das Event-System &lt;a href="https://github.com/BoundfoxStudios/fairy-tale-defender/tree/develop/FairyTaleDefender/Assets/_Game/Scripts/Runtime/Infrastructure/Events/ScriptableObjects">hier&lt;/a>.
Es besteht aus mehreren Event Channels in Form von ScriptableObjects.
Ein Event Channel ist schlicht ein Kanal über den Informationen laufen.&lt;/p>
&lt;p>Jeder kann Informationen in ein Event Channel geben und jeder kann diese Informationen mitbekommen.
Dadurch das wir hier auf ScriptableObjects setzen, können Sender und Empfänger in unterschiedlichen Szenen sein, was z.B. für das &lt;a href="../../multi-scene-management/">Multi-Scene-Management&lt;/a> sehr praktisch ist.&lt;/p>
&lt;div class="mermaid">flowchart LR
Action["Aktion/Trigger (MonoBehaviour)"] -->|"Raise()"| Event["Event (ScriptableObject)"]
EventListener["Event Listener (MonoBehaviour)"] -->|"Horcht auf"| Event
EventListener --> Response["Antwort auf Event"]
&lt;/div>
&lt;h2 id="was-ist-ein-event-system">Was ist ein Event-System?&lt;/h2>
&lt;p>Der Sinn eines Event-Systems ist es, Systeme zu entkoppeln.&lt;/p>
&lt;p>Nehmen wir als Beispiel mal das Leben des Spielers.
Wenn der Spieler Leben verliert oder bekommt, möchte man das in der Regel im UI anzeigen.
Jetzt könnte der Spieler eine Referenz auf das UI haben (oder auch umgekehrt) und sobald der Spieler Leben verliert oder gewinnt, diese Änderung direkt an das UI übertragen.
Weiter möchten wir, dass die Gegner sich anders verhalten, je nach dem, wie viel Leben der Spieler hat.
Auch hier könnte jetzt der Spieler alle Gegner kennen und ihnen mitteilen, wenn sich das Leben verändert.
Weiter geht&amp;rsquo;s mit anderen Systemen: Post Processing zum Effekte je nach Leben anzeigen, Audio System, dass entsprechend den Sound ändert etc.&lt;/p>
&lt;div class="mermaid">flowchart LR
Spieler --> UI
Spieler --> Gegner1
Spieler --> ...
Spieler --> GegnerX
Spieler --> PostProcessing
Spieler --> AudioSystem
&lt;/div>
&lt;p>Wenn der Spieler all diese Systeme direkt kennen würde, nennt man dies auch eine hohe Kopplung.
In der Softwareentwicklung versucht man, genau diese hohe Kopplung zu vermeiden.
Auch wenn dieses Beispiel hier sehr einfach gehalten ist, führt diese Kopplung langsam aber sicher zu schlecht wartbarem Code.
Denn, wann immer man sich die Spieler-Klasse ansieht, sehen wir viele Abhängigkeiten im Code.
Jetzt muss jeder Entwickler schauen, was genau diese Abhängigkeiten machen, um zu verstehen, wie die Spieler-Klasse funktioniert.
Außerdem hat die Spieler-Klasse viel mehr Verantwortung, als sie eigentlich haben müsste, da sie viele Bereiche der Gesamtanwendung kennt und bearbeitet.&lt;/p>
&lt;p>Das ist in der Softwareentwicklung &lt;em>kein&lt;/em> erstrebenswerter Zustand.&lt;/p>
&lt;p>Viel mehr wollen wir eine Entkopplung erreichen und hier tritt unser Event-System ein:&lt;/p>
&lt;div class="mermaid">flowchart LR
Spieler -->|Leben: 50| EventSystem
EventSystem -->|Leben: 50| UI
EventSystem -->|Leben: 50| GegnerX
EventSystem -->|Leben: 50| PostProcessing
EventSystem -->|Leben: 50| AudioSystem
&lt;/div>
&lt;p>Leider sieht es jetzt durch die Grafik so aus, als hätten wir das Problem zum Event-System verschoben, dass jetzt alle anderen kennt.
Dem ist aber nicht so.
Anstelle dass der Spieler jedes Einzelsystem bearbeitet, nutzt es einfach nur das Event-System und teilt sein aktuelles Leben mit.
Was jetzt damit passiert, &lt;em>das ist dem Spieler vollkommen egal&lt;/em>.
In diesem Moment haben wir alles voneinander entkoppelt.
Die Spieler-Klasse hat viel weniger Verantwortlichkeiten, auch für den Entwickler ist es jetzt sehr viel einfacher zu verstehen, da statt viele Einzelsysteme nur noch das Event-System angesprochen wird.
Damit haben wir jetzt eine &lt;em>lose Kopplung&lt;/em> erreicht.&lt;/p>
&lt;p>Einfach ausgedrückt kann man sich das Event-System als eine Art Walkie-Talkie vorstellen.
Jemand teilt seinen Zustand über das Walkie-Talkie mit, ohne zu wissen, wer diese Nachricht hört, ob sich jemand dafür interessiert und was mit der Information passiert.&lt;/p></description></item><item><title>Docs: Forschung</title><link>https://docs.fairytaledefender.de/docs/ideas/research/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/ideas/research/</guid><description>
&lt;p>Durch forschen können weitere Inhalte und Verbesserungen freigeschaltet werden.
Wie und wann man die Möglichkeit bekommt weiter zu forschen, steht noch offen.
Dies könnte durch Sammeln von Erfahrung, beim Besiegen von Gegnern und ganzen Leveln der Fall sein, könnte aber auch z.B. Geld erfordern.&lt;/p>
&lt;p>Die Forschung könnte sich u.a. über folgende Gebiete erstrecken:&lt;/p>
&lt;h2 id="türmedocsideastowers">&lt;a href="../../../docs/ideas/towers/">Türme&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Türme werden erst mit abgeschlossener Forschung freigeschaltet&lt;/li>
&lt;li>&lt;a href="../../../docs/ideas/towers/#t%C3%BCrme-sollen-%C3%BCber-folgende-attribute-verf%C3%BCgen-k%C3%B6nnen">Attribute&lt;/a> werden verbessert&lt;/li>
&lt;li>Kosten werden reduziert
&lt;ul>
&lt;li>für Bau&lt;/li>
&lt;li>für Upgrade&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Benötigte Zeit zum upgraden wird reduziert&lt;/li>
&lt;/ul>
&lt;h2 id="personaldocsideastowersidee-von-wodan-im-discord">&lt;a href="../../../docs/ideas/towers/#idee-von-wodan-im-discord">Personal&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Das Cap (Limit) an Personal könnte sich erhöhen&lt;/li>
&lt;li>Weniger Personalbedarf für bestimmte Türme&lt;/li>
&lt;/ul>
&lt;h2 id="magiedocsideasmagic">&lt;a href="../../../docs/ideas/magic/">Magie&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Element wird erst durch Forschung freigeschaltet&lt;/li>
&lt;li>Element wird verbessert
&lt;ul>
&lt;li>Schaden&lt;/li>
&lt;li>Fläche&lt;/li>
&lt;li>Effektdauer&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="gegnerdocsideasenemies">&lt;a href="../../../docs/ideas/enemies/">Gegner&lt;/a>&lt;/h2>
&lt;ul>
&lt;li>Globaler Schadenbonus für alle Türme gegen eine bestimmte Gegnerart
&lt;ul>
&lt;li>Könnte zum freischalten auch z.B. X-Kills an dem Gegnertyp benötigen&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Gegner</title><link>https://docs.fairytaledefender.de/docs/ideas/enemies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/ideas/enemies/</guid><description>
&lt;h2 id="gegnerarten">Gegnerarten&lt;/h2>
&lt;p>Bisher wurden folgende Gegner vorgeschlagen:&lt;/p>
&lt;ul>
&lt;li>Bauern&lt;/li>
&lt;li>Zwerge&lt;/li>
&lt;li>Ritter&lt;/li>
&lt;li>Reiter&lt;/li>
&lt;li>Drachen&lt;/li>
&lt;/ul>
&lt;h2 id="attribute-der-gegner">Attribute der Gegner&lt;/h2>
&lt;p>Gegner sollen über folgende Eigenschaften verfügen, die grob in jeweils 3-4 Stufen eingeteilt werden können.&lt;/p>
&lt;ul>
&lt;li>Lebenspunkte: Wenig, Mittel, Viel&lt;/li>
&lt;li>Rüstung: Keine, Wenig, Mittel, Viel&lt;/li>
&lt;li>Geschwindigkeit: Langsam, Mittel, Schnell&lt;/li>
&lt;li>Größe: Klein, Mittel, Groß&lt;/li>
&lt;li>Erfahrungpunkte für den Spieler: Wenig, Mittel, Viel&lt;/li>
&lt;li>Münzen für den Spieler: Wenig, Mittel, Viel&lt;/li>
&lt;li>Elementarwiderstände: Luft, Wasser, Feuer, Erde&lt;/li>
&lt;li>Effektwiderstände: Umwerfwiderstand&lt;/li>
&lt;li>Typ: Boden-, Lufteinheit&lt;/li>
&lt;/ul>
&lt;p>Es wurde sich gegen die Fähigkeit der Heilung bei Gegner entschieden.&lt;/p>
&lt;h2 id="tabelle">Tabelle&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:center">Bauer&lt;/th>
&lt;th style="text-align:center">Zwerg&lt;/th>
&lt;th style="text-align:center">Ritter&lt;/th>
&lt;th style="text-align:center">Reiter&lt;/th>
&lt;th style="text-align:center">Drachen&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Lebenspunkte&lt;/td>
&lt;td style="text-align:center">Wenig&lt;/td>
&lt;td style="text-align:center">Wenig&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Mittel (mehr als Ritter)&lt;/td>
&lt;td style="text-align:center">Hoch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Rüstung&lt;/td>
&lt;td style="text-align:center">Keine&lt;/td>
&lt;td style="text-align:center">Wenig&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Keine&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Geschwindigkeit&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Langsam&lt;/td>
&lt;td style="text-align:center">Schnell&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Größe&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Klein&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Groß&lt;/td>
&lt;td style="text-align:center">Groß&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Erfahrungspunkte&lt;/td>
&lt;td style="text-align:center">Wenig&lt;/td>
&lt;td style="text-align:center">Wenig&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Hoch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Münzen&lt;/td>
&lt;td style="text-align:center">Wenig&lt;/td>
&lt;td style="text-align:center">Wenig&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Hoch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Typ&lt;/td>
&lt;td style="text-align:center">Boden&lt;/td>
&lt;td style="text-align:center">Boden&lt;/td>
&lt;td style="text-align:center">Boden&lt;/td>
&lt;td style="text-align:center">Boden&lt;/td>
&lt;td style="text-align:center">Flug&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Gegner-Navigation</title><link>https://docs.fairytaledefender.de/docs/ideas/navigation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/ideas/navigation/</guid><description>
&lt;p>Gemäß dem &lt;a href="../../../game-design-document/gameplay/enemies/">GDD&lt;/a> laufen Gegner auf vorgefertigten Wegen.
Diese Wege sollen allerdings durch den Spieler beeinflussbar sein.&lt;/p>
&lt;h2 id="ideen-zu-wegen-von-gegnern">Ideen zu Wegen von Gegnern&lt;/h2>
&lt;ul>
&lt;li>Level-Designer platziert Wege und/oder Wegpunkte für Boden- und Lufteinheiten.&lt;/li>
&lt;li>Bodeneinheiten könnten durch Wegveränderungen im Laufe des Levels anders verlaufen (siehe &lt;a href="#ideen-zur-ver%C3%A4nderung-von-wegen-durch-den-spieler">unten&lt;/a>).&lt;/li>
&lt;li>Jedes Level benötigt mindestens einen Weg vom Spawnpunkt zum Ziel.
&lt;ul>
&lt;li>Hat ein Level nur einen einzigen Weg oder wurden andere Wege so abgeschnitten, dass nur noch ein einziger Weg existiert, dann kann der Spieler keine unüberwindbare Barrikade erstellen.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Jedes Level könnte einen oder mehrere Spawnpunkte haben.&lt;/li>
&lt;/ul>
&lt;h2 id="ideen-zur-veränderung-von-wegen-durch-den-spieler">Ideen zur Veränderung von Wegen durch den Spieler&lt;/h2>
&lt;ul>
&lt;li>Funktioniert nur bei Levels, die mehrere Wege haben&lt;/li>
&lt;li>Errichten von Barrikaden
&lt;ul>
&lt;li>Könnten unüberwindbar sein&lt;/li>
&lt;li>Könnten durch Gegner zerstört werden&lt;/li>
&lt;li>Könnten nur durch bestimmte Gegnertypen bzw. Gegner mit bestimmten Attributen zerstört werden&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Das Verändern des Weges soll auch einen negativen Einfluss auf den Spieler haben, sodass das Beeinflussen eine bewusste Entscheidung sein muss
&lt;ul>
&lt;li>Weniger Gold pro Gegner?&lt;/li>
&lt;li>Kürze Wartezeit zwischen Wellen?&lt;/li>
&lt;li>Mehr Gegner pro Welle?&lt;/li>
&lt;li>Stärkere Gegner?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Magie</title><link>https://docs.fairytaledefender.de/docs/ideas/magic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/ideas/magic/</guid><description>
&lt;h2 id="elementarmagie">Elementarmagie&lt;/h2>
&lt;p>Folgende Elemente sollen als Magie ihren Weg in das Spiel finden:&lt;/p>
&lt;ul>
&lt;li>Luft&lt;/li>
&lt;li>Erde/ Stein&lt;/li>
&lt;li>Wasser/ Eis&lt;/li>
&lt;li>Feuer&lt;/li>
&lt;/ul>
&lt;h2 id="türme">Türme&lt;/h2>
&lt;p>Einige Ideen wie Türme Magie einsetzen könnten, finden sich &lt;a href="../../../docs/ideas/towers/#feuerwasserlufterde-turm">hier&lt;/a>.&lt;/p></description></item><item><title>Docs: Multi Scene Management</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/multi-scene-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/multi-scene-management/</guid><description>
&lt;p>Unity ist in der Lage, mehrere Szenen gleichzeitig laufen zu lassen.
Dabei können wir als Entwickler bestimmen, wann wir neue Szenen dazu laden oder auch welche wieder entladen.
In Unity-sprech ist das ein &lt;em>additives Laden von Szenen&lt;/em>.&lt;/p>
&lt;p>Der Ablauf ist aktuell wie folgt:&lt;/p>
&lt;ul>
&lt;li>Wir laden zum Start des Spiels die &lt;code>Initialization&lt;/code>-Szene. Sie hat nur ein einziges Objekt mit dem &lt;a href="https://github.com/BoundfoxStudios/fairy-tale-defender/blob/develop/FairyTaleDefender/Assets/_Game/Scripts/Runtime/Infrastructure/SceneManagement/InitializationLoader.cs">InitializationLoader&lt;/a>-Script. Dieses Script startet das eigentliche Spiel, in dem es zwei weitere Szenen lädt: &lt;code>PersistentManagers&lt;/code> und das &lt;code>MainMenu&lt;/code>. Danach wird die &lt;code>Initialization&lt;/code>-Szene entladen.&lt;/li>
&lt;li>&lt;code>PersistentManagers&lt;/code> ist eine Szene, die einmalig geladen wird und während der gesamten Laufzeit vom Spiel nie wieder entladen wird. In dieser Szene liegen Objekte/Manager, die wir das gesamte Spiel über benötigen, z.B. Hintergrundmusik oder das Laden von anderen Szenen (via &lt;a href="https://github.com/BoundfoxStudios/fairy-tale-defender/blob/develop/FairyTaleDefender/Assets/_Game/Scripts/Runtime/Infrastructure/SceneManagement/SceneLoader.cs">SceneLoader&lt;/a>-Skript). Über ein &lt;a href="../event-system/">Event-System&lt;/a> können andere Szenen und Objekte mit den &lt;code>PersistentManagers&lt;/code> kommunizieren. Für den Fall, dass man in Unity den Play Mode von einer anderen Szene aus startet (was durchaus üblich ist), kümmert sich ein &lt;code>EditorOnly&lt;/code>-GameObject darum, diese &lt;code>PersistentManagers&lt;/code> zu laden. So, als hätte man das Spiel über die &lt;code>Initialization&lt;/code>-Szene gestartet. Dieser Vorgang nennt sich bei Fairy Tale Defender &amp;ldquo;EditorColdStartup&amp;rdquo;.&lt;/li>
&lt;/ul>
&lt;p>Die Implementierung des Multi Scene Managements findet sich im Ordner &lt;a href="https://github.com/BoundfoxStudios/fairy-tale-defender/tree/develop/FairyTaleDefender/Assets/_Game/Scripts/Runtime/Infrastructure/SceneManagement">SceneManagement&lt;/a>.&lt;/p>
&lt;div class="mermaid">sequenceDiagram
autonumber
Spielstart ->> Initialization: Lädt
activate Spielstart
activate Initialization
Initialization ->> PersistentManagers: Lädt
activate PersistentManagers
Initialization ->> PersistentManagers: Event: LoadScene "MainMenu"
PersistentManagers ->> MainMenu: Lädt
Initialization ->> Initialization: Entlädt sich selbst
deactivate Initialization
Note over PersistentManagers, MainMenu: Typischer Spielablauf...&lt;br>Spiel wird gespielt...
PersistentManagers ->> Spielstart: Spiel beenden
deactivate PersistentManagers
deactivate Spielstart
&lt;/div>
&lt;h2 id="vorteile">Vorteile&lt;/h2>
&lt;h3 id="kein-dontdestroyonload-notwendig">Kein &lt;code>DontDestroyOnLoad&lt;/code> notwendig&lt;/h3>
&lt;p>&lt;code>DontDestroyOnLoad&lt;/code> (DDOL) bringt einige Nachteile mitsich:&lt;/p>
&lt;ul>
&lt;li>Es wird oft in Zusammenhang mit dem Singleton-Pattern implementiert. Das bedeutet, dass Unity das Objekt erstellt, das Skript dann prüft, ob es bereits existiert und falls ja, sich automatisch wieder zerstört. Das sind unnötig verbratene Ressourcen.&lt;/li>
&lt;li>Oft kann DDOL mit einem ScriptableObject ersetzt werden, da DDOL gerne für das Speichern von Laufzeitdaten verwendet wird, die man überall benötigt.&lt;/li>
&lt;li>Diesen Mechanismus kann man durch Multi Scene Management sehr einfach mit den PersistentManagers erreichen, da diese im Spiel immer zur Verfügung stehen.&lt;/li>
&lt;/ul>
&lt;h3 id="kein-code-typisches-singleton-pattern-notwendig">Kein code-typisches Singleton-Pattern notwendig&lt;/h3>
&lt;p>Oft wird zusammen mit DDOL auch im Code ein Singleton-Pattern implementiert.
Das bedeutet, dass das Objekt selbst entscheidet, ob es ein Singleton ist oder nicht.
Das führt dann in der Regel dazu, dass man durch seine gesamte Codebase hinweg von überall den Zugriff auf irgendwelche Singletons sieht, was wiederum zu einer hohen Kopplung führt.
Warum das schlecht ist, wird im &lt;a href="../event-system/">Event-System&lt;/a> erklärt.&lt;/p>
&lt;p>Dennoch gibt es Anwendungsfälle, bei denen Singletons praktisch sind.
Denn das Pattern als solches ist per-se erstmal nicht schlecht, sondern oft dessen Anwendung ist das, was es schlecht macht.
Bei Multi Scene Management können wir ein Singleton ganz einfach erreichen, in dem wir ein GameObject in der &lt;code>PersistentManagers&lt;/code>-Szene ablegen.
Dadurch, dass diese einmalig geladen wird und das gesamte Spiel lebt, haben wir jetzt eine Instanz von einem Objekt, dass wir verwenden können, ergo ein Singleton.&lt;/p>
&lt;p>Zudem kommt, dass Singeltons auch oft als Datencontainer, ähnlich wie bei DDOL, genutzt werden.
Auch hier haben wir bereits ein Board-Mittel von Unity: ScriptableObjects.&lt;/p>
&lt;p>Typische Anwendungsfälle sind hier z.B. Dinge wie:&lt;/p>
&lt;ul>
&lt;li>Scene Management&lt;/li>
&lt;li>Hintergrundmusik&lt;/li>
&lt;li>Analytics&lt;/li>
&lt;li>Ladebildschirm&lt;/li>
&lt;/ul>
&lt;h2 id="nachteile">Nachteile&lt;/h2>
&lt;p>Natürlich bringt das Multi Scene Management auch Nachteile mit sich.&lt;/p>
&lt;ul>
&lt;li>Komplexität: Gerade für Anfänger, die bisher nur mit einer Szene gearbeitet haben, kann Multi Scene Management zu Beginn sehr komplex wirken.&lt;/li>
&lt;li>Umdenken: Eigentlich was positives, aber anfänglich eher als Nachteil zu sehen: Man muss umdenken, wie der Code strukturiert ist, da man auf gewisse Dinge eben nicht sofort Zugriff hat, sondern eine Indirektion, z.B. über das &lt;a href="../event-system/">Event-System&lt;/a> gehen muss.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Prefabs</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/prefabs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/prefabs/</guid><description>
&lt;h2 id="ui-prefabs">UI Prefabs&lt;/h2>
&lt;p>Wir nutzen ein kleines System, um einfacher Prefabs für das UI finden zu können.
Generell liegen die Prefabs im Ordner &lt;code>Prefabs/UI&lt;/code>.&lt;/p>
&lt;p>Um komfortabel ein UI zusammenbauen zu können, integrieren wir unsere eigenen Prefabs auch in das Menü von Unity (Rechtsklick in der Hierarchy).
Auf diese Art funktioniert das Zusammenstecken von UI-Elementen ähnlich wie bei den Standard-Unity-Elementen.&lt;/p>
&lt;p>&lt;img src="assets/hierarchy-menu.png" alt="Hierarchy Menü">&lt;/p>
&lt;p>Damit das ganze funktioniert, nutzen wir eine Instanz von &lt;code>PrefabManagerSO&lt;/code>, dass alle Prefabs sammelt, die in diesem Menü angezeigt werden.
Du findest die Instanz unter &lt;code>ScriptableObjects/PrefabManager&lt;/code>, oder einfach im Menü auf &lt;code>Community Project&lt;/code> -&amp;gt; &lt;code>Select PrefabManager&lt;/code>.&lt;/p>
&lt;p>&lt;img src="assets/select-prefab-manager.png" alt="Select Prefab Manager">&lt;/p>
&lt;p>Im Inspektor siehst Du, welche Prefabs verknüpft sind und genutzt werden können.&lt;/p>
&lt;p>&lt;img src="assets/prefab-manager.png" alt="Prefab Manager">&lt;/p>
&lt;p>Wenn Du hier eigene Prefabs hinzufügen möchtest, musst Du den &lt;a href="https://github.com/BoundfoxStudios/fairy-tale-defender/blob/develop/FairyTaleDefender/Assets/_Game/Scripts/Runtime/EditorExtensions/ScriptableObjects/PrefabManagerSO.cs">PrefabManager im Code&lt;/a> und die &lt;a href="https://github.com/BoundfoxStudios/fairy-tale-defender/tree/develop/FairyTaleDefender/Assets/_Game/Scripts/Editor/Menus/GameObjectMenu">Menü-Einträge&lt;/a> erweitern.&lt;/p>
&lt;h3 id="ich-finde-nicht-was-ich-brauche">Ich finde nicht, was ich brauche.&lt;/h3>
&lt;p>Es kann durchaus sein, dass Du UI umsetzen möchtest, aber es dafür noch keine passenden Prefabs findest.
Am Besten legst Du diese dann an und fügst wie, wie im Abschnitt zuvor beschrieben, dem PrefabManager hinzu.&lt;/p></description></item><item><title>Docs: Runtime Anchors</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/runtime-anchors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/runtime-anchors/</guid><description>
&lt;p>Oft benötgt man in Unity Referenzen auf andere GameObjects.
Gerade durch den Ansatz mit &lt;a href="../multi-scene-management/">Multi-Scene-Management&lt;/a> kommt es vor, dass ein GameObject nicht in der eigenen Scene, sondern in einer anderen liegt.
Leider wird zur Lösung hier oft ein Singleton-Pattern im Code implementiert, was die Wartbarkeit und Testbarkeit erschwert.&lt;/p>
&lt;p>Anstelle von Singletons im Code verwenden wir Runtime Anchors.
Ein Runtime Anchor ist ein ScriptableObject, was eine Referenz auf ein bestimmtes GameObject kennt.
Dadurch entkoppeln wir verschiedene Systeme und es entsteht keine harte Abhängigkeit.
Als prominentes Beispiel wäre hier die MainCamera zu nennen, diese wird öfter mal in einem Spiel gebraucht, sei es zur Berechnung von Raycasts oder für Billboard-UI-Elemente.&lt;/p>
&lt;p>Die Basis vom Runtime Anchor ist wie folgt implementiert:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">public&lt;/span> &lt;span style="color:#00f">abstract&lt;/span> &lt;span style="color:#00f">class&lt;/span> &lt;span style="color:#2b91af">RuntimeAnchorBaseSO&lt;/span>&amp;lt;T&amp;gt; : ScriptableObject
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">where&lt;/span> T : &lt;span style="color:#00f">class&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">public&lt;/span> &lt;span style="color:#2b91af">bool&lt;/span> IsSet { &lt;span style="color:#00f">get&lt;/span>; &lt;span style="color:#00f">private&lt;/span> &lt;span style="color:#00f">set&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">private&lt;/span> T? _item;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">public&lt;/span> T? Item
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">get&lt;/span> =&amp;gt; _item;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">set&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _item = &lt;span style="color:#00f">value&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IsSet = _item &lt;span style="color:#00f">is&lt;/span> not &lt;span style="color:#00f">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#00f">private&lt;/span> &lt;span style="color:#00f">void&lt;/span> OnDisable()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _item = &lt;span style="color:#00f">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> IsSet = &lt;span style="color:#00f">false&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Eine konkrete Implementierung für eine Camera wäre:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">using&lt;/span> UnityEngine;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>[CreateAssetMenu]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">public&lt;/span> &lt;span style="color:#00f">class&lt;/span> &lt;span style="color:#2b91af">CameraRuntimeAnchorSO&lt;/span> : RuntimeAnchorBaseSO&amp;lt;Camera&amp;gt; { }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Jetzt werden zwei Dinge benötigt:&lt;/p>
&lt;ol>
&lt;li>Ein Skript muss den Wert des &lt;code>CameraRuntimeAnchorSO&lt;/code>s setzen.&lt;/li>
&lt;li>Jemand muss diesen Wert konsumieren.&lt;/li>
&lt;/ol>
&lt;p>In beiden Fällen wird in einem &lt;code>MonoBehaviour&lt;/code> oder auch in einem weiteren &lt;code>ScriptableObject&lt;/code> ein Feld dafür angelegt:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cs" data-lang="cs">&lt;span style="display:flex;">&lt;span>[field: SerializeField]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">private&lt;/span> CameraRuntimeAnchorSO CameraRuntimeAnchor { &lt;span style="color:#00f">get&lt;/span>; &lt;span style="color:#00f">set&lt;/span>; } = &lt;span style="color:#00f">default&lt;/span>!;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// Anchor setzen:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">private&lt;/span> &lt;span style="color:#00f">void&lt;/span> Awake()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CameraRuntimeAnchor.Item = GetComponent&amp;lt;Camera&amp;gt;();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">private&lt;/span> &lt;span style="color:#00f">void&lt;/span> OnDestroy()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CameraRuntimeAnchor.Item = &lt;span style="color:#00f">null&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#008000">// Anchor nutzen:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#00f">private&lt;/span> &lt;span style="color:#00f">void&lt;/span> DoSomething()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#2b91af">var&lt;/span> camera = CameraRuntimeAnchor.Item;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#008000">// camera.ScreenPointToRay...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: Scene Templates</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/scene-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/scene-templates/</guid><description>
&lt;p>Du kannst komfortabel neue Szenen anlegen, wenn Du in Unity über das Menü &lt;code>File&lt;/code> -&amp;gt; &lt;code>New Scene&lt;/code> gehst.
Dort findest Du im Dialog zwei Templates, die von Fairy Tale Defender stammen:&lt;/p>
&lt;ul>
&lt;li>Menu Szene&lt;/li>
&lt;li>Level Szene&lt;/li>
&lt;/ul>
&lt;p>Wähle die &lt;strong>Menu Szene&lt;/strong>, wenn Du ein neues Menü anlegen möchtest.
Darunter zählen alle FullScreen-Menüs, z.B. MainMenu, Optionen, Credits.&lt;/p>
&lt;p>Wähle die &lt;strong>Level Szene&lt;/strong>, wenn Du ein neues Leven anlegen möchtest.&lt;/p></description></item><item><title>Docs: Story</title><link>https://docs.fairytaledefender.de/docs/ideas/story/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/ideas/story/</guid><description>
&lt;p>Diese Storys sind von unserem Community-Mitglied &lt;strong>Tipi&lt;/strong> geschrieben worden. Sie sind gedacht, um eine Idee für die Handlung und damit die Umgebung und den grafischen Stil des Spiels zu setzen. Es sind jeweils die Startszenarien, die dann weiter ausgebaut werden, wenn die Community sich für eines entschieden hat (oder was ganz anderes will).&lt;/p>
&lt;p>Über eine Abstimmung über den YouTube-Kanal hat sich die Community für Story 2 entschieden.&lt;/p>
&lt;h2 id="story-1-obsolet">Story 1 (Obsolet)&lt;/h2>
&lt;p>Unsere Protagonistin ist Tochter einer mittelständischen Familie, ihre Kindheit war so weit in Ordnung. Ihr Vater war Handwerker, die Mutter hauptsächlich Mutter und wenn sie Zeit hatte, hat sie versucht, mit Kleinigkeiten etwas Geld dazuzuverdienen. Es reichte zum Leben, viel mehr aber auch nicht. Mit dem Heranwachsen zeigte sich immer mehr eine zurückhaltende, aber sehr aufmerksame Persönlichkeit, ideal für den Besuch einer Bedienstetenschule.&lt;/p>
&lt;p>Sie sollte erst als Hausmädchen anfangen und später vielleicht bei einem Adligen den Haushalt übernehmen. Die Ausbildung lief ohne größere Probleme: Ein geschicktes junges Mädchen, ordentlich, schnell, freundlich und gut in der Lage trotz Stress ein freundliches Gesicht aufzusetzen. Bei einem der ersten Testeinsätze passierten ihr dann aber in der Aufregung erste Fehler. Nach dem Abräumen des Abendessens fielen mehrere Teile des Silberbesteckes zu Boden und einige rutschten unter die Möbel. Ihre Chefin aber sagte ihr, sie könnten es morgen mit der Hilfe des Küchenjungen herausholen.&lt;/p>
&lt;p>Am nächsten Morgen war aber ihre Chefin nicht da und ihre Vertretung sagte nur, sie sei krank und das Besteck jetzt egal. Obwohl das Mädchen mehrfach fragte, wurde es die gesamte Woche über immer wieder verschoben. Kurz vor Ende ihrer Probearbeit angelte sie mit einem Stock nach Ende der Arbeit 2 Silberlöffel und eine Gabel unter dem Schrank hervor, nur nahm sie diese mit nach Hause. Geübt darin immer ein freundliches Gesicht zu machen, ging sie einfach mit dem Besteck im Kleid aus dem Haus und verkaufte es am nächsten Tag auf dem Markt. Sie schenkte ihren Eltern eine Kleinigkeit zur Feier der überstandenen Probearbeit und hatte die gesamte Woche Angst, jemand würde sich melden, aber es passierte nichts.&lt;/p>
&lt;p>Nach einem Monat sprach sie mit einer Freundin, die sie bei der Arbeit kennengelernt hatte. Nichts, niemandem war das Fehlen des Silberbestecks aufgefallen: Ein Wochenlohn konnte einfach so entwendet werden. Ab diesem Zeitpunkt war ihr klar: Sie könnte die Adligen bei der Arbeit einfach bestehlen, denn es hatte sich gezeigt, dass sie gar nicht zu schätzen wissen, was sie alles hatten. Straßenkinder hingegen zeigten sich als sehr dankbar, selbst wenn es nur um einen halben Apfel oder eine Handvoll Kirschen ging.&lt;/p>
&lt;p>So zog es sich einige Jahre, bis die Kinder größer waren und sie eine erwachsene Frau war. Dies führte unausweichlich dazu, dass sie eine Gruppe sehr treuer und ebenfalls geschickter Freunde hatte. Anfangs versorgte sie diese ungewollt mit den Informationen, die für Einbrüche nötig waren. Nachdem sie aber realisiert hatte, was die ehemaligen Kinder dort taten, entschied sie sich, das Ganze zu koordinieren und weitere Kontakte aufzubauen. Die freundliche, elegante Art, die sie von der Bedienstetenschule gelernt hatte, ihre Erfolge beim Bestehlen der Adligen und ihre Fähigkeit ihre Emotionen sehr gut zu überspielen, brachten ihr schnell Kontakte zur Unterwelt ein. Nun hatte sie ihre eigene Diebeshöhle im Wald, die manchmal ungewollten Besuch bekam&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>Von dem Ausgangspunkt aus können verschiedenste Szenarien besucht werden. Städte, Wälder, Meere. Überall, wo sich Überfälle oder Schmuggeltouren lohnen, können wir verschiedenste Türme und Fallen bauen, von Alchemieständen, die am Wegesrand stehen über Giftbombenwerfer bis Turmruinen, die die Schurken besetzen, mit allen Upgrades von Feuerpfeilen bis Magie.&lt;/li>
&lt;/ul>
&lt;h2 id="story-2">Story 2&lt;/h2>
&lt;p>Wir spielen eine Geschichtenerzählerin. Sie zieht mit einem Jahrmarkt durchs Land und erzählt verschiedene Geschichten. Im Prinzip ist es eine Geschichte, die viele Abschnitte hat: die Geschichte der Glücksfee. Hinter den Kulissen von &amp;ldquo;Den sieben Geißlein&amp;rdquo; oder &amp;ldquo;Rotkäppchen&amp;rdquo; leitet die Glücksfee ungesehen den Großteil der Probleme, die auf die Geschichte zukommen, um. Schneewittchen z.B. hätte beim Verlassen des Waldes von viel mehr Wildtieren angegriffen werden müssen, aber hatte Glück, weil die Glücksfee Horden von gefährlichen Waldmonstern abgelenkt hat. Die Königin hat nicht nur einen Jäger losgeschickt, sondern haufenweise Kopfgeldjäger, nur der netteste ist an der Glücksfee vorbeigekommen, nachdem er ihr versprach Schneewittchen am Leben zu lassen. Angriffe auf die Zwerge von Monstern in den Minen oder das Abwehren von Assassinen ist auch das Werk der Glücksfee. Selbst am Ende, als der Prinz bei ihr auftauchte, kam er zufällig vorbei, weil alle anderen Kundschafter von der Glücksfee abgewehrt wurden und der Weg zu Schneewittchen für ihn als einziger sicherer Weg durch den Wald galt.&lt;/p>
&lt;p>Wir können so jedes Märchen für uns nutzen und einbauen, worauf wir Lust haben, ohne die Modelle der Türme groß anzupassen. Und wegen Urheberrecht: Gebrüder Grimm sollte public-domain sein 😄 (Anmerkung des Lektors: Ja, solange wir den Original-Text nutzen, ist dieser gemeinfrei, denn die Urheber sind länger als 70 Jahre tot.),
zumindest kenne ich genug andere Spiele, die das auch nutzen z.B. &amp;ldquo;Dark Parables&amp;rdquo; (die halt wirklich die ganzen Märchen durchmachen: Schneewittchen, Dornröschen, Jack und die wundererbse&amp;hellip;) es gibt auch ein Gutenberg Projekt (oder so) in dem public-domain texte gehortet werden. Dieser Vorschlag hat den riesigen Vorteil, dass wir beim Design der Türme völlig eskalieren können, von Rotkäppchen Türmen mit Wolfsmotiven bis Rattenfänger Türmen, die Musik machen, oder Eiskönigin Tower, die Eisspeere und Schneestürme verschießen.&lt;/p>
&lt;h2 id="story-3-obsolet">Story 3 (Obsolet)&lt;/h2>
&lt;p>In einem kleinen Walddorf ist es normal, dass alle 5 Jahre eine neue Kräuterfrau in die geheime Magie der Pflanzen und Tiere eingeweiht wird. Es braucht eine natürliche Begabung mit Pflanzen und ein gutes Verständnis der Heilkunde, um dafür infrage zu kommen. Unsere kleine Hexe hat beides. Zudem wird ein gutes Gespür für Magie und ein gesunder Abenteuerdrang benötigt, da man sein Dorf verlässt und die Welt kennenlernt oder genauer genommen einen sehr magischen Teil der Welt. Nach einigen Monaten der Ausbildung lernt man, wie Dinge dazu gebracht werden können, einfache Handlungen von selbst auszuführen, Töpfe, die sich selbst umrühren, Besen, die von selbst fegen, aber auch Bögen, die von selbst Pfeile verschießen. Sobald dieses Wissen gefestigt ist, bricht man auf zu seiner ersten Wanderschaft. Von dem Dorf aus geht es zu einem Breitenzirkel, der sich tief im Wald versteckt. Schlägt man an einem bestimmten Ort ein Lager auf, bittet man damit um Einlass und ein Auflösen der schützenden Magie, die die Druiden Siedlung versteckt hält. Natürlich muss man zuvor den Druiden beweisen, dass man nicht irgendwer ist. Ein normaler, nicht magischer Bürger würde in der Nacht von Wesen aus Laub mitsamt seinem Zelt aus der Lichtung getragen werden und irgendwo in der Wildnis aufwachen. Eine Hexe hingegen kann mit ihren magischen Geschützen diese Laubmonster abwehren. Dort endet die Reise jedoch nicht, es gibt andere Hexen und andere Länder, die man bereisen muss. Sümpfe, Moore, Dschungel, Küsten, Wüsten, sogar die hohe See und ferne Länder&amp;hellip;&lt;/p>
&lt;p>Hier können wir halt fröhlich alle Terrains einbauen und verschiedenste Magierichtungen mit einbeziehen: Druiden, Hexen, Magier, Heilige, dämonische Kreaturen: alles ist möglich.&lt;/p></description></item><item><title>Docs: TargetLocator / Zielerfassung</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/target-locator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/target-locator/</guid><description>
&lt;p>Ein wichtiger Punkt bei jedem Tower Defense Spiel ist das Erfassen, welches Ziel als nächstes angegriffen wird.&lt;/p>
&lt;p>Das übernimmt in unserem Spiel ein TargetLocator-ScriptableObject.
Ihn wird es in mehreren Ausführungen geben, aktuell ist nur ein TargetLocator für ballistische Waffen implementiert.&lt;/p>
&lt;p>Im groben läuft das Herausfinden des nächsten Ziels so ab, sofern die Waffe noch kein Ziel hat:&lt;/p>
&lt;ol>
&lt;li>Finde alle Gegner im Umkreis des Turms (der durch die &lt;a href="../">Waffe&lt;/a> selbst bestimmt wird.&lt;/li>
&lt;li>Schaue, welche der Gegner, die gefunden wurden, auch im passenden Angriffswinkel der Waffe sind.
Z.B. kann ein Katapult Gegner treffen, die in einem 90°-Winkel vor der Waffe sind, es kann also nicht seitlich oder nach hinten schießen.&lt;/li>
&lt;li>Falls Gegner im richtigen Angriffswinkel sind, suche je nach &lt;a href="#TargetType">TargetType&lt;/a> der Waffe einen Gegner aus.&lt;/li>
&lt;li>Gegner wurde gefunden und wird solange verfolgt, bis er entweder zerstört wurde oder außerhalb der Angriffsreichweite ist.&lt;/li>
&lt;/ol>
&lt;h2 id="targettype">TargetType&lt;/h2>
&lt;p>Der TargetType bestimmt, welche Art von Gegner bevorzugt wird:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Closest&lt;/code>: Der Gegner, der am nahesten ist.&lt;/li>
&lt;li>&lt;code>Random&lt;/code>: Irgendein Gegner.&lt;/li>
&lt;/ul>
&lt;p>Diese zwei sind bereits implementiert und können später noch erweitert werden.&lt;/p></description></item><item><title>Docs: Technisch mitmachen</title><link>https://docs.fairytaledefender.de/docs/contributing/technical/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/contributing/technical/</guid><description>
&lt;h2 id="inhaltsverzeichnis">Inhaltsverzeichnis&lt;/h2>
&lt;p>Du bist hier richtig, wenn Du Dich für die Entwicklung interessierst, d.h. Du&lt;/p>
&lt;ul>
&lt;li>entwickelst Code für das Spiel,&lt;/li>
&lt;li>entwickelst Erweiterungen für den Unity-Editor,&lt;/li>
&lt;li>möchtest bestehende Bugs im Spiel beseitigen und/oder&lt;/li>
&lt;li>möchtest mit Shadern bzw. dem Shader-Graph visuellen Pepp hinzufügen (siehe auch &lt;a href="../visual/">hier&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h2 id="worauf-muss-ich-achten">Worauf muss ich achten?&lt;/h2>
&lt;ul>
&lt;li>Lies Dir die &lt;a href="../../docs-technical/">Technische Dokumentation&lt;/a> durch.&lt;/li>
&lt;li>Du musst die korrekte Unity-Version installieren, das ist aktuell &lt;strong>Unity 2022.2.14f1&lt;/strong>. Schaue gerne &lt;a href="https://github.com/boundfoxstudios/fairy-tale-defender/tree/develop/FairyTaleDefender/ProjectSettings/ProjectVersion.txt">hier&lt;/a> nach, welche Version im Projekt eingesetzt wird, falls vergessen wurde, dieses Dokument zu aktualisieren.
&lt;ul>
&lt;li>Um Unity in dieser Version zu installieren, klicke &lt;a href="unityhub://2022.2.14f1/b2c9b1ac6cc0">hier&lt;/a>, wenn Du den Unity Hub installiert hast.
Alternativ, schaue gerne &lt;a href="https://unity3d.com/get-unity/download/archive">hier auf der Unity-Seite&lt;/a> nach der Version.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Unity tendiert gerne dazu, dass es Dinge mitändert, die man nicht oder vermeintlich nicht angefasst hat.
Konzentriere Dich daher generell nur auf Deine Aufgabe und prüfe in Git, ob Du auch nur die Sachen committest, die Du auch wirklich geändert hast.&lt;/li>
&lt;/ul>
&lt;h2 id="was-soll-ich-nicht-tun">Was soll ich nicht tun?&lt;/h2>
&lt;p>Bitte mache folgende Dinge &lt;strong>nicht&lt;/strong> oder nur nach Rücksprache mit einem &lt;a href="https://github.com/boundfoxstudios/fairy-tale-defender/#ansprechpartner">Ansprechpartner&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>Aktualisierung der Unity-Version.&lt;/li>
&lt;li>Neues Package dem Projekt hinzufügen.&lt;/li>
&lt;li>Bestehendes Package aktualisieren.&lt;/li>
&lt;li>Lösche keine Assets oder Szenen, die nicht unmittelbar mit Deiner Aufgabe zu tun haben. Refactoring, Rename &lt;em>kann&lt;/em> in Ordnung sein.&lt;/li>
&lt;li>Füge keine Test-Szenen oder Test-Scripte hinzu. Du kannst diese gerne für Dich erstellen, aber committe und pushe sie nicht.&lt;/li>
&lt;li>Nutze nicht den alten Unity-Text. Wir setzten ausschließlich auf TextMeshPro.&lt;/li>
&lt;li>Nutze nicht das alte Unity Input. Wir nutzen ausschließlich das neue Unity &lt;a href="https://www.youtube.com/playlist?list=PLxVAs8AY4TgdZTkklVi739QeL-YTYU8in">Input System&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="wo-lade-ich-meine-ergebnisse-hin">Wo lade ich meine Ergebnisse hin?&lt;/h2>
&lt;p>Im Gegensatz zur kreativen Mitarbeit, arbeitest Du als als Techniker direkt am Unity-Projekt und machst dort Deine Änderungen.&lt;/p>
&lt;h3 id="was-passiert-dann">Was passiert dann?&lt;/h3>
&lt;p>&lt;a href="../#ich-habe-eine-aufgabe-fertig-was-mache-ich-damit">Siehe hier&lt;/a>.&lt;/p>
&lt;h3 id="hilfe-ich-komme-mit-git-gar-nicht-klar">Hilfe, ich komme mit Git gar nicht klar&lt;/h3>
&lt;p>Als technischer Mitwirkender musst Du Dir Git soweit aneignen, dass Du es für das Projekt nutzen kannst. :)&lt;/p>
&lt;p>Frag gerne auf dem &lt;a href="https://discord.gg/tHqNzMT">Discord&lt;/a> nach, wenn Du so gar nicht weiter kommst.&lt;/p>
&lt;h2 id="jetbrains-rider-lizenz">JetBrains Rider Lizenz&lt;/h2>
&lt;p>&lt;a href="https://jetbrains.com">JetBrains&lt;/a> sponsert Fairy Tale Defender mit &lt;a href="https://jb.gg/OpenSourceSupport">Lizenzen&lt;/a> für JetBrains Rider!
Jeder Entwickler, der sich im Projekt regelmäßig engagiert und aktiv ist, kann eine Lizenz für JetBrains Rider erhalten.&lt;/p>
&lt;p>&lt;img src="../assets/jb_beam.png" alt="JetBrains">
&lt;img src="../assets/Rider.png" alt="JetBrains Rider">&lt;/p></description></item><item><title>Docs: Tooltips</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/tooltips-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/tooltips-system/</guid><description>
&lt;p>In Fairy Tale Defender können wir sowohl für UI-Elemente als auch für GameObjects Tooltips anzeigen.
Tooltips sind Hinweistexte/Bilder, die erscheinen, sobald man mit der Maus über bestimmte Elemente fährt.&lt;/p>
&lt;p>Um einen Tooltip zu nutzen, kann eine der Klassen von &lt;a href="#tooltip-typen">Tooltip-Typen&lt;/a> auf einem GameObject platziert werden.
Sobald man das Spiel startet und über das Element fährt, wird der entsprechende Tooltip angezeigt.&lt;/p>
&lt;p>Wichtig ist, dass alle GameObjects, die ein Tooltip anzeigen sollen, einen Collider benötigen!
Im Moment reagieren die Tooltips auch nur bei Objekten, die auf dem Layer &amp;ldquo;Tower&amp;rdquo; sind.
Falls weitere benötigt werden, können wir das anpassen.&lt;/p>
&lt;p>Bei UI-Elementen funktioniert es direkt, sofern der Canvas einen GraphicsRaycaster hat (per Standard so) und das UI-Element irgendwas hat, was raycast-bar ist (z.B. ein Image).&lt;/p>
&lt;p>Aktuell sind folgende Tooltips implementiert.
Weitere können bei Bedarf hinzugefügt werden.&lt;/p>
&lt;h2 id="tooltip-typen">Tooltip-Typen&lt;/h2>
&lt;h3 id="texttooltip">TextTooltip&lt;/h3>
&lt;p>Nutzt einen lokalisierbaren String.&lt;/p></description></item><item><title>Docs: Towers</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/towers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/towers/</guid><description>
&lt;p>Auf dieser Seite findet sich die Dokumentation, wie man einen Turm im Spiel erstellen und organisiert ablegen kann.
Wichtig zu verstehen ist, dass der Turm selbst keine großartige Funktion hat.
Oft würde die Funktion, z.B. von einem Katapult-Turm, direkt &amp;ldquo;in den Turm&amp;rdquo; implementiert werden.
Wir gehen im Spiel allerdings einen anderen Ansatz und sehen die Waffe als eigenständige Waffe, die die eigentliche Funktion implementiert hat.
Der Turm ist nur ein &amp;ldquo;Etwas&amp;rdquo;, das die Waffe trägt.
Daher ist es wichtig, sich auch den Abschnitt über &lt;a href="../weapons/">Waffen&lt;/a> durchzulesen.&lt;/p>
&lt;h2 id="organisation">Organisation&lt;/h2>
&lt;h3 id="prefabs">Prefabs&lt;/h3>
&lt;p>Im Ordner &lt;code>_Game/Prefabs/Buildings/Towers&lt;/code> befinden sich alle vom Spieler baubaren Türme.
Jeder Turm bekommt hier seinen eigenen Ordner.&lt;/p>
&lt;p>Als Beispiel zeigt das Bild den &amp;ldquo;CatapultTower&amp;rdquo;:&lt;/p>
&lt;p>&lt;img src="assets/towers.png" alt="CatapultTower">&lt;/p>
&lt;p>Jeder Turm besteht aus drei Prefabs:&lt;/p>
&lt;ol>
&lt;li>&lt;code>Turmname_Gfx&lt;/code>: Beinhaltet die grafische Umsetzung des Turms ohne weitere Scripts.&lt;/li>
&lt;li>&lt;code>Turmname_Blueprint&lt;/code>: Ist eine Variante von &lt;code>Turmname_Gfx&lt;/code>, bei dem die Materialen zum &lt;code>Blueprint&lt;/code> geändert wurden.
Diese Repräsentation wird genutzt, um dem Spieler ein &amp;ldquo;Geist&amp;rdquo;-Element anzuzeigen, wo der Turm gebaut werden kann.
Im Bild sieht man links den Blueprint/Geist und rechts den gebauten Turm.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="assets/ghost.png" alt="Geist und echter Turm">&lt;/p>
&lt;ol start="3">
&lt;li>&lt;code>Turmname&lt;/code>: Der eigentliche funktionierende Turm, der im Spiel platziert wird. Er nutzt &lt;code>Tower_Base&lt;/code> als Basis-Prefab,
&lt;code>Turmname_Gfx&lt;/code> für die visuelle Darstellung und eine Waffe. Wie genau alles zusammengestöpselt ist, erklärt der Abschnitt &lt;a href="#Turmaufbau">Turmaufbau&lt;/a>.&lt;/li>
&lt;/ol>
&lt;h3 id="scriptableobject">ScriptableObject&lt;/h3>
&lt;p>Zu jedem baubaren Turm gehört ein ScriptableObject, das im Ordner &lt;code>_Game/ScriptableObjects/Buildings/Towers&lt;/code> abgelegt wird.&lt;/p>
&lt;p>&lt;img src="assets/scriptable-object.png" alt="ScriptableObject eines Turms">&lt;/p>
&lt;p>In diesem ScriptableObject stehen aktuell nur, welches Prefab gebaut werden kann und welches Prefab als Blueprint dient.&lt;/p>
&lt;h2 id="turmaufbau">Turmaufbau&lt;/h2>
&lt;p>Im weiteren wird beschrieben, wie die drei Prefabs für einen Turm aufgebaut sind.&lt;/p>
&lt;h3 id="gfx-prefab">Gfx-Prefab&lt;/h3>
&lt;p>&lt;img src="assets/gfx-organization.png" alt="Gfx-Prefab">&lt;/p>
&lt;ul>
&lt;li>Basis-Prefab.&lt;/li>
&lt;li>Beinhaltet direkt das Modell oder Modelle für die visuelle Repräsentation.&lt;/li>
&lt;li>Beinhaltet ein leeres GameObject &amp;ldquo;Weapon&amp;rdquo; das dort platziert ist, wo später die Waffe vom Turm stehen wird.&lt;/li>
&lt;/ul>
&lt;h3 id="blueprint-prefab">Blueprint-Prefab&lt;/h3>
&lt;p>&lt;img src="assets/blueprint-organization.png" alt="Blueprint-Prefab">&lt;/p>
&lt;ul>
&lt;li>Varianten-Prefab vom obigen Gfx-Prefab.&lt;/li>
&lt;li>Hier werden alle Materialen (sofern nötig) zum Blueprint-Material geändert.&lt;/li>
&lt;li>Sollte der Turm irgendwelche Effekte haben, die wir im Baumodus nicht benötigen, dann können sie hier ausgeschaltet werden.&lt;/li>
&lt;li>In das GameObject &lt;code>Weapon&lt;/code> wird jetzt die visuelle Repräsentation einer Waffe gelegt (siehe &lt;a href="../weapons/#Waffenaufbau">Waffenaufbau&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h3 id="turm-prefab">Turm-Prefab&lt;/h3>
&lt;p>&lt;img src="assets/tower-organization.png" alt="Turmaufbau">&lt;/p>
&lt;ul>
&lt;li>Varianten-Prefab von &lt;code>Tower_Base&lt;/code>.&lt;/li>
&lt;li>In das GameObject &lt;code>GFX&lt;/code> wird das Gfx-Prefab (siehe oben) abgelegt.&lt;/li>
&lt;li>Beinhaltet alle Scripts, um den Turm zum Leben zu erwecken.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Türme</title><link>https://docs.fairytaledefender.de/docs/ideas/towers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/ideas/towers/</guid><description>
&lt;h1 id="allgemeine-ideen">Allgemeine Ideen&lt;/h1>
&lt;h2 id="kanonenturm">Kanonenturm&lt;/h2>
&lt;ul>
&lt;li>Feuert auf ein einzelnes Ziel&lt;/li>
&lt;/ul>
&lt;h2 id="katapultturm">Katapultturm&lt;/h2>
&lt;ul>
&lt;li>Flächenschaden&lt;/li>
&lt;/ul>
&lt;h2 id="balisteturm">Balisteturm&lt;/h2>
&lt;ul>
&lt;li>Gut gegen Rüstung&lt;/li>
&lt;/ul>
&lt;h2 id="trebuchetturm">Trebuchetturm&lt;/h2>
&lt;ul>
&lt;li>Ähnlich wie Katapult&lt;/li>
&lt;li>Mehr Schaden, langsamere Feuerrate&lt;/li>
&lt;/ul>
&lt;h2 id="feuerwasserlufterde-turm">Feuer/Wasser/Luft/Erde Turm&lt;/h2>
&lt;ul>
&lt;li>Falls Magie in dieser Form einer Rolle spielt&lt;/li>
&lt;/ul>
&lt;h2 id="eisturm">Eisturm&lt;/h2>
&lt;ul>
&lt;li>Verlangsamung&lt;/li>
&lt;/ul>
&lt;h1 id="ideen-vom-livestream-am-13112022">Ideen vom Livestream am 13.11.2022&lt;/h1>
&lt;h2 id="weitere-turmideen">Weitere Turmideen:&lt;/h2>
&lt;ul>
&lt;li>Blizzardturm&lt;/li>
&lt;li>Erdwurzelturm&lt;/li>
&lt;li>Blitzturm&lt;/li>
&lt;li>Wandturm:
&lt;ul>
&lt;li>Luft: Pustet Gegner weg (nehmen anderen Weg)&lt;/li>
&lt;li>Erdwurzel: Hält kleine und mittlere Gegner auf&lt;/li>
&lt;li>Wasser: Lässt nur gerüstete oder große Gegner durch&lt;/li>
&lt;li>Feuer: Lässt nur Luftgegner durch&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="idee-von-wodan-im-discord">Idee von Wodan im Discord:&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Türme haben &amp;ldquo;Personal&amp;rdquo; als Ressource&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Je mehr Personal pro Turm, umso schneller könnte dieser wieder feuerbereit gemacht werden, schneller ausgerichtet (rotiert) werden usw.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dazu könnte man dann auch das Personal pro Level erstmal begrenzen und über Forschung weiter erhöhen, oder auch das benötigte Personal verringern.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Abgesehen von &amp;ldquo;normalem Personal&amp;rdquo; wären auch Magier denkbar&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="türme-sollen-über-folgende-attribute-verfügen-können">Türme sollen über folgende Attribute verfügen können:&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Maximal 3 Upgrades -&amp;gt; Turmupgrade deaktiviert den Turm für eine gewisse Zeit&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Anzahl der Ziele: Einzel-, Mehrfachziel oder Flächenschaden&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Zieltyp: Boden, Lufteinheiten&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mindestreichweite (Abstand zum Turm, darunter kann kein Gegner getroffen werden): Wenig, Mittel, Hoch&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Maximale Reichweite: Nahkampf, Kurz, Mittel, Weit&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Angriffswinkel: Die Breite der Fläche innerhalb der ein Turm angreifen kann in Grad.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Rotationsgeschwindigkeit des Turmes bzw der Einheit darauf: Langsam, Mittel, Schnell&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Feuerrate: Langsam, Mittel, Schnell&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Angriffskraft: Schwach, Mittel, Stark&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Treffergenauigkeit: Niedrig, Mittel, Hoch&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Treffereffekte: Umwerfen (Gegner kurzzeitig bewegungsunfähig), Verlangsamen, Schaden über Zeit&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Modifikatoren: Gift, Rüstungsdurchdringung, Feuer (Chance Gegner in Brand zu setzen, Feuerrate könnte langsamer werden, ebenso Treffergenauigkeit abnehmen)&lt;/p>
&lt;ul>
&lt;li>Allgemein sollten Modifikatoren ebenso eine negative Auswirkung haben, z.B. auch Geldkosten um zeitweise zu aktivieren.&lt;/li>
&lt;li>Türme evtl. zu Gruppen zusammenfassbar wie in RTS Spielen um Modifikatoren für diese auf einmal zu aktivieren.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Angriffsmodus (Priorisiertes Ziel): Nächster Gegner, Weitestentfernter Gegner, Zufällig, Höchste Lebenspunkte, Stärkste Rüstung, Schwächste Rüstung, Boden- oder Flugeinheit&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="tabelle">Tabelle&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">&lt;/th>
&lt;th style="text-align:center">Kanonen&lt;/th>
&lt;th style="text-align:center">Bogenschützen&lt;/th>
&lt;th style="text-align:center">Katapult&lt;/th>
&lt;th style="text-align:center">Trebuchet&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Anzahl der Ziele&lt;/td>
&lt;td style="text-align:center">Einzelziel&lt;/td>
&lt;td style="text-align:center">Mehrfachziele&lt;/td>
&lt;td style="text-align:center">Flächenschaden&lt;/td>
&lt;td style="text-align:center">Flächenschaden&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Zieltyp&lt;/td>
&lt;td style="text-align:center">Boden&lt;/td>
&lt;td style="text-align:center">Boden, Luft&lt;/td>
&lt;td style="text-align:center">Boden&lt;/td>
&lt;td style="text-align:center">Boden&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Min. Reichweite&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Wenig&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Hoch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Max. Reichweite&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Kurz&lt;/td>
&lt;td style="text-align:center">Mittel (mehr als Kanonenturm)&lt;/td>
&lt;td style="text-align:center">Hoch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Angriffswinkel&lt;/td>
&lt;td style="text-align:center">360°&lt;/td>
&lt;td style="text-align:center">360°&lt;/td>
&lt;td style="text-align:center">60°&lt;/td>
&lt;td style="text-align:center">25°&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Rotationsgeschwindigkeit&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Schnell&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Niedrig&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Feuerrate&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Schnell&lt;/td>
&lt;td style="text-align:center">Langsam&lt;/td>
&lt;td style="text-align:center">Langsam (langsamer als Katapult)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Angriffskraft&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Schwach&lt;/td>
&lt;td style="text-align:center">Hoch&lt;/td>
&lt;td style="text-align:center">Hoch (mehr als Katapult)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Genauigkeit&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Hoch&lt;/td>
&lt;td style="text-align:center">Mittel&lt;/td>
&lt;td style="text-align:center">Niedrig&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Effekte&lt;/td>
&lt;td style="text-align:center">Umwerfen&lt;/td>
&lt;td style="text-align:center">Verlangsamen&lt;/td>
&lt;td style="text-align:center">Umwerfen&lt;/td>
&lt;td style="text-align:center">Umwerfen&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Modifikatoren&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">Feuer, Rüstungsdurchdringung, Gift&lt;/td>
&lt;td style="text-align:center">Feuer&lt;/td>
&lt;td style="text-align:center">Feuer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Visuell (3D, 2D) mitmachen</title><link>https://docs.fairytaledefender.de/docs/contributing/visual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/contributing/visual/</guid><description>
&lt;p>Du bist hier richtig, wenn Du Dich visuell am Projekt beteiligen möchtest, d.h. Du&lt;/p>
&lt;ul>
&lt;li>modellierst 3D-Modelle,&lt;/li>
&lt;li>erstellst 2D-Grafiken, -Icons, UI-Designs oder&lt;/li>
&lt;li>möchtest mit Shadern bzw. dem Shader-Graph visuellen Pepp hinzufügen (siehe auch &lt;a href="../technical/">hier&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h2 id="worauf-muss-ich-achten">Worauf muss ich achten?&lt;/h2>
&lt;p>Lese Dir vorab die &lt;a href="../../docs-visual/">visuelle Dokumentation&lt;/a> durch.&lt;/p>
&lt;h2 id="wo-lade-ich-meine-ergebnisse-hin">Wo lade ich meine Ergebnisse hin?&lt;/h2>
&lt;p>Du kannst Deine Ergebnisse im Ordner &lt;code>_contributing/visual&lt;/code> ablegen.
Hier erstellst Du einen Ordner mit Deinem Benutzernamen und dort drin je nach Bedarf weitere Ordner (falls Du z.B. an mehrere Modellen gearbeitet hast).&lt;/p>
&lt;p>Wichtig ist, dass Du einmal die Original-Datei hochlädst (sodass jemand anders es weiterbearbeiten kann, falls es nötig ist) und Dein 3D-Modell als &lt;code>.fbx&lt;/code> oder Deine 2D-Arbeit als &lt;code>.png&lt;/code>.&lt;/p>
&lt;p>Bitte achte auch darauf, dass Deine Dateien bereits optimiert sind, unnötige Sachen entfernt sind, etc.
Original-Dateien tendieren oft dazu, recht schnell groß zu werden.
Git und große Dateien sind nicht unbedingt Freunde, je mehr Du daher optimierst, umso besser.&lt;/p>
&lt;p>Falls Du Dir unsicher bist, frag gerne auf dem &lt;a href="https://discord.gg/tHqNzMT">Discord&lt;/a> nach.&lt;/p>
&lt;h3 id="beispiel">Beispiel&lt;/h3>
&lt;p>Wenn Dein Benutzername &lt;code>DerMusterMensch&lt;/code> ist und Du ein Baum-Modell erstellt hast, dann würdest Du den Ordner &lt;code>_contributing/visual/DerMusterMensch/Baum&lt;/code> anlegen und dort zwei Dateien hochladen:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Baum.blendfile&lt;/code>&lt;/li>
&lt;li>&lt;code>Baum.fbx&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="was-passiert-dann">Was passiert dann?&lt;/h3>
&lt;p>&lt;a href="../#ich-habe-eine-aufgabe-fertig-was-mache-ich-damit">Siehe hier&lt;/a>.&lt;/p>
&lt;h3 id="hilfe-ich-komme-mit-git-gar-nicht-klar">Hilfe, ich komme mit Git gar nicht klar&lt;/h3>
&lt;p>Als kreativer Mensch hat man oft noch keinen Berührungspunkt mit dem sehr technischen Git gehabt.
Spreche bitte einen &lt;a href="https://github.com/boundfoxstudios/fairy-tale-defender/#ansprechpartner">Ansprechpartner&lt;/a> an, eventuell kann er die Arbeit mit Git für Dich übernehmen.&lt;/p>
&lt;p>&lt;em>Für die Erweiterung Deiner Skills ist&amp;rsquo;s natürlich cool, wenn Du Dir Git aneignest.&lt;/em>&lt;/p></description></item><item><title>Docs: Waffenarten</title><link>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/weapon-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://docs.fairytaledefender.de/docs/docs-technical/systems/weapons/weapon-types/</guid><description>
&lt;p>Die Idee der Gruppierung in Waffenarten ist, dass man ähnliche Waffen nicht mehrfach implementieren muss.
Ein Beispiel wäre ein Katapult und ein Trebuchet.
Beides sind ballistische Waffen, die in ihrer Grundfunktion gleich sind: Sie schleudern ein Projektil auf den Gegner.
Der Unterschied ist am Ende nur etwas in der Animation, (Mindest-)Reichweite und Stärke.
Ansonsten sind diese Waffen gleich.
Es wäre daher nicht gut, wenn wir beide Waffen jedes mal von Grund auf implementieren müssten.&lt;/p>
&lt;p>Im Ideallfall nutzen beide das gleiche Script für eine ballistische Waffe und unterscheiden sich nur in den Parametern und natürlich im visuellen Modell.&lt;/p>
&lt;h2 id="ballistische-waffen">Ballistische Waffen&lt;/h2>
&lt;p>Zu ballistischen Waffen gehören z.B. Katapulte, Trebuchets, etc. - alles, was ein Projektil durch die Luft schleudert.
Charakteristisch für diese Waffen ist oft, dass sie ungenau sind, aber dafür Flächenschaden anrichten.
Auch sind sie oft recht langsam und das Projektil benötigt einige Zeit, um das Ziel zu treffen.
Für ballistische Waffen exitiert ein ScriptableObject vom Typ &lt;code>BallisticWeaponSO&lt;/code>.&lt;/p>
&lt;p>Beispiel vom Katapult:&lt;/p>
&lt;p>&lt;img src="../assets/weapon-so.png" alt="Katapult">&lt;/p>
&lt;h3 id="projektile">Projektile&lt;/h3>
&lt;p>Ballistische Waffen verschießen Projektile, die aktuell so implementiert sind, dass sie physikalisch korrekt fliegen.
Ein Projektil hat einen dynamischen Rigidbody und wird durch die Gravitation nach unten gezogen.
Beim Start ein Projektiles wird einmalig die Abschussgeschwindigkeit (Velocity) bestimmt, anhand derer das Projektil zu seinem Zielpunkt fliegt.&lt;/p></description></item></channel></rss>